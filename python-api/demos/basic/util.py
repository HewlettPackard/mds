"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the 
Application containing code generated by the Library and added to the 
Application during this compilation process under terms of your choice, 
provided you also meet the terms and conditions of the Application license.
"""

from datetime import timedelta
from threading import Condition
from time import sleep


class Pause(object):

    class Button(object):

        def __init__(self):
            self.__cv = Condition()
            self.__pressed = False
            self.__mutex = None

        def wait_for_press(self):
            # unique_lock<mutex> lock{_mutex};

            while self.__pressed is False:
                self.__cv.wait()

        def press(self):
            # lock_guard<mutex> lock{_mutex};

            self.__pressed = True
            self.__cv.notify_all()

    @staticmethod
    def on(button=None, prefix=""):
        if button is not None:
            print("{}Pausing".format(prefix))
            button.wait_for_press()
            print("{}Back from pause".format(prefix))

    @staticmethod
    def time(delta=None, prefix=""):
        if delta is None:
            return

        assert isinstance(delta, timedelta)
        announce_back = len(prefix) > 0

        if announce_back:
            prefix += ": "

        print("Pausing for {} seconds".format(delta.seconds))
        sleep(seconds=delta.seconds)

        if announce_back:
            print("{}Back from {} seconds pause".format(prefix, delta.seconds))

