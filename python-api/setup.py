# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

import os
import os.path
import sys

from distutils.core import setup
from distutils.extension import Extension
from typing import Text
from unittest import TestLoader, TestResult

import inject_wrappers as generate

_MDS_INCLUDE_PATH_VAR = 'MDS_INCLUDE_PATH'

# Enforce minimum Python version
if sys.version_info < (3, 6):
    raise RuntimeError('MDS PAPI requires a minimum of Python 3.6')
    sys.exit(1)

# Enforce requirement of Cython (for now)
try:
    from Cython.Build import cythonize
    from Cython.Distutils import build_ext
except ImportError:
    raise RuntimeError('You need Cython to compile the MDS Python API')
    sys.exit(1)

DEBUG = True  # TODO: Should check this at build time

def find_mds_install_dir() -> Text:
    """
    This finds the root repo where 'mds' and 'mpgc' repos reside, also
    where 'install' will be generated.
    """
    root = os.path.realpath(__file__)
    print(root)
    components = root.split(os.sep)
    repos = os.path.join(os.sep, *components[:-3])

    for repo in ('mds', 'mpgc'):
        path = os.path.join(repos, repo)
        print(path)
        assert(os.path.exists(path))

    return repos

def get_install_dir(repo_dir: Text) -> Text:
    """
    Uses the base repos path found in find_mds_install_dir to locate
    where the libraries to link against should be located. This can be
    overriden by the $_MDS_INCLUDE_PATH_VAR envvar
    """
    if _MDS_INCLUDE_PATH_VAR in os.environ:
        location = os.environ[_MDS_INCLUDE_PATH_VAR]
    else:
        location = os.path.join(*[repo_dir, 'install'])

    return location

def check_and_build_mds_core(install_dir: Text) -> None:
    if not os.path.exists(install_dir):
        # TODO: Issue the shell command, deal with the fact we may not be in the
        # same place.
        pass

RUN_TESTS = False
DIR_REPO = find_mds_install_dir()
DIR_INSTALL = get_install_dir(DIR_REPO)
DIR_LIB = os.path.join(DIR_INSTALL, 'lib')
HEADER_DIRS = [
    os.path.join(DIR_INSTALL, 'include'),
    os.path.join(DIR_REPO, 'mds', 'python-api', 'mds', 'include')
]
LIBS = [os.path.join(DIR_LIB, f'lib{l}.a') for l in ['mds_core', 'mpgc', 'ruts']]
ARGS = ['-std=c++14', '-MMD', '-MP', '-fmessage-length=0', '-mcx16']
UNDEF_MACROS = []
MDS_PACKAGES = ['managed', 'containers', 'internal']

if DEBUG:
    ARGS.extend(['-Og', '-ggdb3'])
    UNDEF_MACROS.append('NDEBUG')

def make_extension(package_identifier):
    local_path = package_identifier.replace('.', os.sep)

    return Extension(package_identifier,
        sources=[f'{local_path}.pyx'],
        include_dirs=HEADER_DIRS,
        language='c++',
        extra_compile_args=ARGS,
        extra_objects=LIBS,
        undef_macros=UNDEF_MACROS
    )

# Make sure everything's available and not stale
check_and_build_mds_core(DIR_INSTALL)

# Make sure code generation is up-to-date
generate.generate_and_inject_all_sources(dry_run=False)

# Setup our package hierarchy
extensions = [make_extension(f'mds.{e}') for e in MDS_PACKAGES]

setup(
    name='mds',
    packages=['mds'],
    ext_modules=cythonize(
        extensions,
        language_level=3,
        gdb_debug=DEBUG
    )
)

if RUN_TESTS:
    result = TestResult()
    TESTS = TestLoader().discover('mds')
    TESTS.run(result)

    print(result)
