# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from collections import namedtuple

"""
MDSArrayBase*
    `- BoolArray
    `- IntArrayBase*
        `- ByteArray
        `- UByteArray
        `- ShortArray
        `- UShortArray
        `- IntArray
        `- UIntArray
        `- LongArray
        `- ULongArray
    `- FloatArrayBase*
        `- FloatArray
        `- DoubleArray

* Should not be instantiable, contains generic methods only.
"""

Taxonomy = namedtuple("Taxonomy", ["primitive", "array"])
Bounds = namedtuple("Bounds", ["min", "max"])

class TypeInfo():
    # These bases will be written manually
    MDS_BASE_ARRAY = "MDSArrayBase"
    MDS_INTEGRAL_ARRAY = "MDSIntArrayBase"
    MDS_FLOATING_ARRAY = "MDSFloatArrayBase"

    MDS_BASE_PRIMITIVE = "MDSPrimitiveBase"
    MDS_INTEGRAL_PRIMITIVE = "MDSIntPrimitiveBase"
    MDS_FLOATING_PRIMITIVE = "MDSFloatPrimitiveBase"

    MDS_BASE = 1
    MDS_INTEGRAL = 2
    MDS_FLOATING = 3

    MDS_TAXONOMY = {
        MDS_BASE: Taxonomy(MDS_BASE_PRIMITIVE, MDS_BASE_ARRAY),
        MDS_INTEGRAL: Taxonomy(MDS_INTEGRAL_PRIMITIVE, MDS_INTEGRAL_ARRAY),
        MDS_FLOATING: Taxonomy(MDS_FLOATING_PRIMITIVE, MDS_FLOATING_ARRAY)
    }

    MDS_INTEGRAL_BOUNDS = dict()

    def __init__(self, api, c_type, taxonomy, python_type=None):
        self.api = api
        self.title = api.title()

        if self.title.startswith('U'):
            self.title = api[:2].upper() + api[2:]

        self.title_array = f"{self.title}Array"
        self.title_array_init = f"{self.title_array}_Init"
        self.title_array_cinit = f"{self.title_array}_Inplace"
        self.title_record_member = f"{self.title}RecordMember"
        self.title_const_record_member = f"Const{self.title_record_member}"
        self.c_type = c_type
        self.taxonomy = taxonomy
        self.python_type = python_type
        self.primitive = f"h_m{api}_t"
        self.array = f"h_array_{api}_t"
        self.managed_value = f"mv_{api}"
        self.managed_array = f"h_marray_{api}_t"
        self.managed_type_handle = f"managed_{api}_type_handle"
        self.const_record_field = f"h_const_rfield_{api}_t"
        self.record_field = f"h_rfield_{api}_t"
        self.kind = "mds::api::kind::{}".format(api.upper())
        self.f_create_array = f"create_{api}_marray"
        self.f_bind = f"bind_{api}"

        self.primitive_parent = self.MDS_TAXONOMY[taxonomy].primitive
        self.array_parent = self.MDS_TAXONOMY[taxonomy].array

        if not TypeInfo.MDS_INTEGRAL_BOUNDS:
            for p in (8, 16, 32, 64):
                TypeInfo.MDS_INTEGRAL_BOUNDS[f"int{p}_t"] = Bounds(-(2 ** (p - 1)), (2 ** (p - 1)) - 1)
                TypeInfo.MDS_INTEGRAL_BOUNDS[f"uint{p}_t"] = Bounds(0, (2 ** p) - 1)

        if self.taxonomy == self.MDS_INTEGRAL:
            self.bounds = self.MDS_INTEGRAL_BOUNDS[c_type]

    @property
    def is_integral(self):
        return self.taxonomy == self.MDS_INTEGRAL

    @property
    def use_atomic_math(self):
        return self.taxonomy in [self.MDS_INTEGRAL, self.MDS_FLOATING]


# These types are the ones that this script will generate wrappers for
MDSTypes = {
    "bool": TypeInfo("bool", "bool", TypeInfo.MDS_BASE, "True"),
    "byte": TypeInfo("byte", "int8_t", TypeInfo.MDS_INTEGRAL),
    "ubyte": TypeInfo("ubyte", "uint8_t", TypeInfo.MDS_INTEGRAL),
    "short": TypeInfo("short", "int16_t", TypeInfo.MDS_INTEGRAL),
    "ushort": TypeInfo("ushort", "uint16_t", TypeInfo.MDS_INTEGRAL),
    "int": TypeInfo("int", "int32_t", TypeInfo.MDS_INTEGRAL),
    "uint": TypeInfo("uint", "uint32_t", TypeInfo.MDS_INTEGRAL),
    "long": TypeInfo("long", "int64_t", TypeInfo.MDS_INTEGRAL),
    "ulong": TypeInfo("ulong", "uint64_t", TypeInfo.MDS_INTEGRAL),
    "float": TypeInfo("float", "float", TypeInfo.MDS_FLOATING),
    "double": TypeInfo("double", "double", TypeInfo.MDS_FLOATING)
}

#TODO: Need record_fields for these:
#      STRING,
#      RECORD,
#      BINDING,
#      ARRAY,
#      NAMESPACE,
