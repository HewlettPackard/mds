# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the 
Application containing code generated by the Library and added to the 
Application during this compilation process under terms of your choice, 
provided you also meet the terms and conditions of the Application license.
"""

import sys
import unittest

from mds.containers import *
from mds.managed import *

class TestTask(unittest.TestCase):

    def setUp(self):
        self.isoctxt = IsolationContext.get_for_process().create_child()
        self.assertTrue(self.isoctxt.is_publishable)
        self.task = Task()

    def test_get_parent(self):
        parent = self.task.parent

        self.assertIsNotNone(parent)
        self.assertIsInstance(parent, Task)
        self.assertNotEqual(self.task, parent)
        self.assertNotEqual(id(self.task), id(parent))

    def __run_callable(self, fn=None, args=tuple()):
        self.isoctxt.call(fn, args)

    def test_task_lambda(self):
        # TODO: Need to test these with different Python types
        def w1():
            Task(lambda: 2 * 100).run()

        def w2(x, y):
            Task(lambda x, y: x * y, (x, y)).run()

        self.__run_callable(fn=w1, args=tuple())
        self.__run_callable(fn=w2, args=(2, 100))

    def test_task_function(self):
        def w1():
            def fn1():
                x = 1
                y = 2
                z = x * y

                return z

            Task(fn1).run()

        def w2(x, y):
            def fn2(x, y):
                z = x * y

                return z

            Task(fn2, (x, y)).run()

        self.__run_callable(fn=w1)
        self.__run_callable(fn=w2, args=(2, 100))
    
    def test_task_functor(self):
        def w1(*args):
            class Functor(object):

                def __call__(self, x=42, y=424):
                    return x * y

            Task(Functor(), args=args).run()

        self.__run_callable(fn=w1)
        self.__run_callable(fn=w1, args=(2424, 122))

    @unittest.skip("Debug - this kills the heap")
    def test_task_mdsarray(self):
        l = BoolArray.create(1000)

        self.assertFalse(l[0])
        self.assertFalse(l[1])
        self.assertFalse(l[2])

        def w1(ref):
            def worker(ref):
                ref[1] = True

            t = Task(worker, (ref,))
            t.run()

        self.__run_callable(fn=w1, args=(l,))
 
        self.assertFalse(l[0])
        self.assertTrue(l[1])
        self.assertFalse(l[2])

if __name__ == '__main__':
    unittest.main()
