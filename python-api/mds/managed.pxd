# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from itertools import chain

from libcpp.string cimport string

from mds.core.api_strings cimport *
from mds.core.api_arrays cimport *
from mds.core.api_records cimport *

from mds.private cimport *
from mds.namespace cimport Namespace

# =========================================================================
#  Exportable Types for Cython
# =========================================================================

cdef class String(MDSObject):
    cdef:
        managed_string_handle _handle
        int __iter_idx

cdef class Record(MDSObject):
    cdef:
        RecordTypeDeclaration __type_decl
        RecordToken __tok
        managed_record_handle _handle
        dict __field_decls

# START INJECTION

cdef class Bool(MDSPrimitiveBase):
    cdef mv_bool _value


cdef class BoolArray(MDSArrayBase):
    cdef h_marray_bool_t _handle


cdef inline BoolArray_Init(h_marray_bool_t handle):
    result = BoolArray()
    result._handle = handle
    return result


cdef class Byte(MDSIntPrimitiveBase):
    cdef mv_byte _value


cdef class ByteArray(MDSIntArrayBase):
    cdef h_marray_byte_t _handle


cdef inline ByteArray_Init(h_marray_byte_t handle):
    result = ByteArray()
    result._handle = handle
    return result


cdef class UByte(MDSIntPrimitiveBase):
    cdef mv_ubyte _value


cdef class UByteArray(MDSIntArrayBase):
    cdef h_marray_ubyte_t _handle


cdef inline UByteArray_Init(h_marray_ubyte_t handle):
    result = UByteArray()
    result._handle = handle
    return result


cdef class Short(MDSIntPrimitiveBase):
    cdef mv_short _value


cdef class ShortArray(MDSIntArrayBase):
    cdef h_marray_short_t _handle


cdef inline ShortArray_Init(h_marray_short_t handle):
    result = ShortArray()
    result._handle = handle
    return result


cdef class UShort(MDSIntPrimitiveBase):
    cdef mv_ushort _value


cdef class UShortArray(MDSIntArrayBase):
    cdef h_marray_ushort_t _handle


cdef inline UShortArray_Init(h_marray_ushort_t handle):
    result = UShortArray()
    result._handle = handle
    return result


cdef class Int(MDSIntPrimitiveBase):
    cdef mv_int _value


cdef class IntArray(MDSIntArrayBase):
    cdef h_marray_int_t _handle


cdef inline IntArray_Init(h_marray_int_t handle):
    result = IntArray()
    result._handle = handle
    return result


cdef class UInt(MDSIntPrimitiveBase):
    cdef mv_uint _value


cdef class UIntArray(MDSIntArrayBase):
    cdef h_marray_uint_t _handle


cdef inline UIntArray_Init(h_marray_uint_t handle):
    result = UIntArray()
    result._handle = handle
    return result


cdef class Long(MDSIntPrimitiveBase):
    cdef mv_long _value


cdef class LongArray(MDSIntArrayBase):
    cdef h_marray_long_t _handle


cdef inline LongArray_Init(h_marray_long_t handle):
    result = LongArray()
    result._handle = handle
    return result


cdef class ULong(MDSIntPrimitiveBase):
    cdef mv_ulong _value


cdef class ULongArray(MDSIntArrayBase):
    cdef h_marray_ulong_t _handle


cdef inline ULongArray_Init(h_marray_ulong_t handle):
    result = ULongArray()
    result._handle = handle
    return result


cdef class Float(MDSFloatPrimitiveBase):
    cdef mv_float _value


cdef class FloatArray(MDSFloatArrayBase):
    cdef h_marray_float_t _handle


cdef inline FloatArray_Init(h_marray_float_t handle):
    result = FloatArray()
    result._handle = handle
    return result


cdef class Double(MDSFloatPrimitiveBase):
    cdef mv_double _value


cdef class DoubleArray(MDSFloatArrayBase):
    cdef h_marray_double_t _handle


cdef inline DoubleArray_Init(h_marray_double_t handle):
    result = DoubleArray()
    result._handle = handle
    return result


# END INJECTION

# =========================================================================
#  Helpers
# =========================================================================

cpdef inline is_record_type(obj):
    return issubclass(obj, Record)

cdef inline _declare_record_member(RecordMemberBase rm, str ident, record_type_handle rt):
    pass

# TODO: These record_creator methods
cdef inline _register_type(record_type_handle crht):
    pass

cdef inline _create_from_handle(managed_record_handle mrh):
    pass

cdef inline record_type_handle _declare_record_type(str ident):
    return record_type_handle.declare(convert_py_to_ish(ident))
