# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from libcpp cimport bool

from mds.core.api_helpers cimport initialize_base_task
from mds.core.api_namespaces cimport *
from mds.core.api_primitives cimport *
from mds.core.api_strings cimport convert_py_to_ish

initialize_base_task()


cdef class Namespace(object):

    cdef namespace_handle _handle

    def __setitem__(self, str key, value):
        # TODO: Restrict value to MDSObject, or just do smallest-fitting-elem?
        cdef interned_string_handle ish = convert_py_to_ish(key)

        if not issubclass(value, MDSObject):
            raise TypeError('Cannot commit a non-MDS type into a MDS namespace')

        # TODO: get the boxed item to release its wrapped value into bind...
        self._handle.bind(ish, <uint16_t> value)

    def __getitem__(self, str key):
        # TODO: Need some type inference here, require explicit third param?
        cdef:
            uint16_t retval
            interned_string_handle ish = convert_py_to_ish(key)

        retval = self._handle.lookup(ish, managed_ushort_type_handle())
        return retval

    def create_child(self, str child_id, bint create_if_missing=True):
        cdef:
            interned_string_handle ish = convert_py_to_ish(child_id)
            bool cim = <bool> create_if_missing
        
        return Namespace_Init(self._handle.child_namespace(ish, cim))

    @staticmethod
    def from_path(path):
        pass

    @staticmethod
    def get_current():
        pass  # TODO: mds_namespace::current()

    @staticmethod
    def get_global():
        return Namespace_Init(handle=namespace_handle._global())

    property is_root:
        def __get__(self):
            # TODO: Implement this
            pass

    property parent:
        def __get__(self):
            # TODO: Implement this
            pass


cdef Namespace_Init(namespace_handle handle=namespace_handle._global()):
    initialize_base_task()
    result = Namespace()
    result._handle = handle
    return result

