# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from mds.core.api_primitives cimport *

cdef extern from "helpers.h" namespace "mds::python::types":

# Put any manual declarations above this line    
# START INJECTION

    cdef cppclass h_marray_bool_t:
        mv_bool frozen_read(size_t)
        mv_bool write(size_t, mv_bool)
        size_t size()

    h_marray_bool_t create_bool_marray(size_t)
    
    cdef cppclass h_marray_byte_t:
        mv_byte frozen_read(size_t)
        mv_byte write(size_t, mv_byte)
        size_t size()

    h_marray_byte_t create_byte_marray(size_t)
    
    cdef cppclass h_marray_ubyte_t:
        mv_ubyte frozen_read(size_t)
        mv_ubyte write(size_t, mv_ubyte)
        size_t size()

    h_marray_ubyte_t create_ubyte_marray(size_t)
    
    cdef cppclass h_marray_short_t:
        mv_short frozen_read(size_t)
        mv_short write(size_t, mv_short)
        size_t size()

    h_marray_short_t create_short_marray(size_t)
    
    cdef cppclass h_marray_ushort_t:
        mv_ushort frozen_read(size_t)
        mv_ushort write(size_t, mv_ushort)
        size_t size()

    h_marray_ushort_t create_ushort_marray(size_t)
    
    cdef cppclass h_marray_int_t:
        mv_int frozen_read(size_t)
        mv_int write(size_t, mv_int)
        size_t size()

    h_marray_int_t create_int_marray(size_t)
    
    cdef cppclass h_marray_uint_t:
        mv_uint frozen_read(size_t)
        mv_uint write(size_t, mv_uint)
        size_t size()

    h_marray_uint_t create_uint_marray(size_t)
    
    cdef cppclass h_marray_long_t:
        mv_long frozen_read(size_t)
        mv_long write(size_t, mv_long)
        size_t size()

    h_marray_long_t create_long_marray(size_t)
    
    cdef cppclass h_marray_ulong_t:
        mv_ulong frozen_read(size_t)
        mv_ulong write(size_t, mv_ulong)
        size_t size()

    h_marray_ulong_t create_ulong_marray(size_t)
    
    cdef cppclass h_marray_float_t:
        mv_float frozen_read(size_t)
        mv_float write(size_t, mv_float)
        size_t size()

    h_marray_float_t create_float_marray(size_t)
    
    cdef cppclass h_marray_double_t:
        mv_double frozen_read(size_t)
        mv_double write(size_t, mv_double)
        size_t size()

    h_marray_double_t create_double_marray(size_t)
    
# END INJECTION

