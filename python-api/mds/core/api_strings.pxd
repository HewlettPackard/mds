# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from libc.stdint cimport uint_least16_t, uint64_t
from libcpp cimport bool
from libcpp.string cimport string

ctypedef uint_least16_t char_type

cdef extern from "mds_core_api.h" namespace "mds::api" nogil:
    cdef cppclass interned_string_handle:
        interned_string_handle()
        interned_string_handle(string s)

    interned_string_handle intern(string s)
    
    cdef cppclass managed_string_handle:
        managed_string_handle()
        managed_string_handle(interned_string_handle ish)

        char_type at(size_t i)
        string utf8()

        size_t size()
        size_t length()
        uint64_t hash1()

        bool operator==(managed_string_handle other)
        bool operator!=(managed_string_handle other)
        bool operator<(managed_string_handle other)
        bool operator<=(managed_string_handle other)
        bool operator>(managed_string_handle other)
        bool operator>=(managed_string_handle other)

cdef inline interned_string_handle convert_py_to_ish(value):
    cdef string msg
    
    if isinstance(value, bytes):
        msg = value 
    elif isinstance(value, str):
        msg = value.encode("utf-8")
    else:
        raise TypeError(
            "Base string must be in instance of `str` or `bytes`, got {}".format(type(value))
        )

    return intern(msg)

