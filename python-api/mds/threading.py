# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from threading import Thread, local
from typing import Dict, Text, Union

from mds.containers import Task
from mds.managed import Namespace

ThreadLocalDataTypes = Union[Task, Namespace]
CurrentDict = Dict[Text, ThreadLocalDataTypes]


class MDSThreadData(object):

    STORE = threading.local()

    def __init__(self):
        local_data = MDSThreadData.STORE

        if not hasattr(local_data, "current") or not local_data.current:
            local_data.current = {
                "task" = Task.get_current(),
                "namespace" = Namespace.get_current()
            }

    @property
    def current() -> CurrentDict:
        return MDSThreadData.STORE.current

    def set_from_child(self, other: CurrentDict):
        # We want to make sure a child thread can only set the context once.
        local_data = MDSThreadData.STORE

        if not hasattr(local_data, "set") or local_data.set == False:
            local_data.set = True
            local_data.current = other

    def reset(self) -> None:
        local_data = MDSThreadData.STORE
        local_data.set = False
        local_data.current.clear()


class ChildThread(Thread):
    
    def __init__(self, *args, **kwargs):
        self.parent_current = MDSThreadData().current
        super().__init__(*args, **kwargs)

    def run(self):
        # Update the thread-local stuff
        MDSThreadData().set_from_child(self.parent_current)

        # Now call up the MRO to invoke the call
        super().run()

        # TODO: Ask Evan if this is a good idea?
        # MDSThreadData().reset()
