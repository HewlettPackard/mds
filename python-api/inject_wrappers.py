# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

import glob
import os
import os.path
import sys

from collections import namedtuple

import mds
from mds import TypeInfo

__generate_specializations = lambda fn: [fn(t) for t in mds.typing.mappings] + ['\n']
__ensure_is_list = lambda elem: [elem] if not isinstance(elem, list) else elem

def find_and_inject(file_path, dry_run=True, generator_separator='|'):
    with open(file_path, "r") as fp:
        lines = [l for l in fp]

    Target = namedtuple("Target", ["start", "end", "fn_name"])
    targets = []
    start = None
    fn_name = None

    for i, line in enumerate(lines):
        if f"START INJECTION {generator_separator}" in line:
            start = i + 1
            fn_name = line.split(generator_separator).pop().strip()
        elif start is not None and "END INJECTION" in line:
            targets.append(Target(start, i, fn_name))
            start = fn_name = None

    if not targets:
        return

    # If we're here, we have at least 1 injection point.
    # Let's assume we have N targets and L lines, progressing
    # and doing the injection i=1..N thru 1..L
    chunks = []
    start = 0

    for target in targets:
        chunks.extend(lines[start:target.start])
        chunks.extend(__generate_specializations(TARGETS[target.fn_name]))
        start = target.end

    chunks.extend(lines[start:])

    if dry_run:
        print(file_path)

        for line in chunks:
            print(line)
    else:
        with open(file_path, "w") as fp:
            fp.writelines(chunks)

def generate_and_inject_all_sources(dry_run=True, root=os.getcwd(), exts=('pyx', 'pxd')):
    print(f"Injecting Cython Wrappers (simulated={dry_run})")

    def get_all_cython_files(root, exts):
        paths = set()

        for ext in exts:
            for found in glob.glob(pathname=f"{root}/**/**.{ext}", recursive=True):
                paths.add(found)

        return sorted(list(paths))

    for source in get_all_cython_files(root=root, exts=exts):
        if dry_run:
            print(f"Evaluating {source}")

        find_and_inject(file_path=source, dry_run=dry_run)

def tmpl_record_field_wrapper_math(t):
    return f"""
        {t.c_type} add(const managed_record_handle&, {t.c_type})
        {t.c_type} sub(const managed_record_handle&, {t.c_type})
        {t.c_type} mul(const managed_record_handle&, {t.c_type})
        {t.c_type} div(const managed_record_handle&, {t.c_type})
"""

def tmpl_record_field_wrapper(t):
    EXTRA = tmpl_record_field_wrapper_math(t) if t.use_atomic_math else ""
    compiled = ""

    for prefix in ("", "const_"):
        wrapper_name = t.record_field if prefix == "" else t.const_record_field
        compiled += f"""
    cdef cppclass {wrapper_name} "mds::api::{prefix}record_field_handle<{t.kind}>":
        {wrapper_name}()
        {wrapper_name}({wrapper_name}&)
        {t.c_type} free_read(const managed_record_handle&)
        {t.c_type} frozen_read(const managed_record_handle&)
        bool has_value(const managed_record_handle&)
        bool write_initial(const managed_record_handle&,const {t.c_type}&)
        {t.c_type} write(const managed_record_handle&, const {t.c_type}&)
        interned_string_handle name()
        {EXTRA}
        const_record_type_handle rec_type()
        #const_type_handle_for<K> field_type()
"""
    return compiled
 
def tmpl_primitive_wrapper(t):
    return f"""
    # BEGIN {t.api}

    cdef cppclass {t.managed_value} "mds::api::api_type<{t.kind}>":
        {t.managed_value}()
        {t.managed_value}({t.c_type})

    cdef cppclass {t.primitive} "mds::api::managed_type_handle<{t.kind}>":
        {t.primitive}()
        # TODO:
        # Throws incompatible_type_ex if the field exists but is of the wrong type
        # Throws unmodifiable_record_type_ex if the field doesn't exist, create_if_absent
        # is true, and the record type is fully created.
        {t.record_field} field_in(record_type_handle&, interned_string_handle&, bool) except+

    cdef {t.primitive} {t.managed_type_handle} "mds::api::managed_type_handle<{t.kind}>"()

    cdef cppclass {t.const_primitive} "mds::api::const_managed_type_handle<{t.kind}>":
        {t.const_primitive}()
        # TODO:
        # Throws incompatible_type_ex if the field exists but is of the wrong type
        # Throws unmodifiable_record_type_ex if the field doesn't exist, create_if_absent
        # is true, and the record type is fully created.
        {t.const_record_field} field_in(record_type_handle&, interned_string_handle&, bool) except+

    cdef {t.const_primitive} {t.const_managed_type_handle} "mds::api::managed_type_handle<{t.kind}>"()
    cdef {t.c_type} to_core_val "mds::api::to_core_val<{t.kind}>" (const {t.managed_value}&)
"""

def tmpl_namespace_wrapper(t):
    return f"""
        {t.c_type} lookup "lookup<{t.kind},mds::core::kind_type<{t.kind}>,false,true>"(interned_string_handle, const {t.primitive}&)
        {t.managed_array} lookup "lookup<{t.kind},false,true>"(const interned_string_handle&, const {t.array}&)
        bool bind "bind<{t.kind}>"(interned_string_handle, {t.c_type})
    """

def tmpl_array_wrapper_math(t):
    return f"""
        {t.c_type} add(const size_t&, const {t.c_type}&)
        {t.c_type} sub(const size_t&, const {t.c_type}&)
        {t.c_type} mul(const size_t&, const {t.c_type}&)
        {t.c_type} div(const size_t&, const {t.c_type}&)
"""

def tmpl_array_wrapper(t):
    EXTRA = tmpl_array_wrapper_math(t) if t.use_atomic_math else ""

    return f"""
    cdef cppclass {t.array} "mds::api::array_type_handle<{t.kind}>":
        # const_managed_type_handle<K> element_type()
        {t.managed_array} create_array(size_t)
        bool is_same_as(const {t.array}&)

    cdef cppclass {t.managed_array}:
        {t.managed_value} frozen_read(size_t)
        {t.managed_value} write(size_t, {t.managed_value})
        size_t size()
        bool has_value()
        h_marray_base_t as_base()
        {EXTRA}
    {t.managed_array} {t.f_create_array}(size_t)
    """

def tmpl_int_primitive_bounds(t):
    return f"""
    property MIN:
        def __get__(self):
            return {t.bounds.min}

    property MAX:
        def __get__(self):
            return {t.bounds.max} 
"""

def tmpl_record_field(t):
    return f"""
cdef class {t.title_record_field}(RecordMemberBase):

    cdef {t.record_field} _handle

    def read(self):
        return self._handle.frozen_read(self._mr_handle)

    def write(self, value):
        self._handle.write(self._mr_handle, value)

    def declare(self):
        self._handle = {t.primitive}().field_in(_get_record_type_handle(self._parent.type_declaration), self._type_ident, True)
        # TODO: self._handle.write_initial(self._initial_value)

   # def ensure_type(self):
   #     # TODO: For Const* too
   #     # managed_type<T>::ensure_complete()
   #     pass


cdef class {t.title_const_record_field}(ConstRecordMemberBase):

    cdef {t.const_record_field} _handle

    def read(self):
        return self._handle.frozen_read(self._mr_handle)

    def declare(self):
        self._handle = {t.const_primitive}().field_in(_get_record_type_handle(self._parent.type_declaration), self._type_ident, True)
        # TODO: write_initial?
"""


def tmpl_concrete_array(t):
    primitive_extra = ""

    if t.taxonomy == TypeInfo.MDS_INTEGRAL:
        primitive_extra = tmpl_int_primitive_bounds(t)

    s = f"""
cdef class {t.title}({t.primitive_parent}):

    cdef {t.managed_value} _value

    def __cinit__(self, value):  # TODO: Set the value in _value
        value = self._sanitize(value)

    def _to_python(self):
        return to_core_val(self._value)

    def _to_mds(self):  # TODO: This needs to update _value
        pass
    {primitive_extra}

cdef inline {t.title_array_cinit}({t.title_array} cls, size_t length):
    cls._handle = {t.f_create_array}(length)

cdef class {t.title_array}({t.array_parent}):

    cdef {t.managed_array} _handle
    _primitive = {t.title}

    def __cinit__(self, length=None):
        if length is not None:
            {t.title_array_cinit}(self, length)

    def __len__(self):
        return self._handle.size()

    def _to_python(self, index):
        return to_core_val(self._handle.frozen_read(index))

    def _to_mds(self, index, value):
        # Delegate bounds checking etc. to the primitive wrapper
        wrapped = self._primitive(value)
        self._handle.write(index, {t.managed_value}(value))
    
    def copy(self):
        retval = {t.title_array}(len(self))

        for i in range(len(self)):
            retval[i] = self[i]

        return retval
"""

    # Sometimes we need to be creative to coerce the correct Python type
    if t.python_type is not None:
        s += f"""
    property dtype:
        def __get__(self):
            return type({t.python_type})
"""
    return s

TARGETS = {
    'tmpl_primitive_wrapper': tmpl_primitive_wrapper,
    'tmpl_array_wrapper': tmpl_array_wrapper,
    'tmpl_namespace_wrapper': tmpl_namespace_wrapper,
    'tmpl_record_field_wrapper': tmpl_record_field_wrapper,
    'tmpl_record_field': tmpl_record_field,
    'tmpl_concrete_array': tmpl_concrete_array
}

if __name__ == '__main__':
    for arg in sys.argv:
        if 'dry' in arg:
            generate_and_inject_all_sources(dry_run=True)
            break
    else:
        generate_and_inject_all_sources(dry_run=False)
