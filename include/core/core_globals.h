/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * core_globals.h
 *
 *  Created on: Oct 21, 2014
 *      Author: evank
 */

#ifndef CORE_GLOBALS_H_
#define CORE_GLOBALS_H_

#include<functional>

#include "core/core_fwd.h"

namespace mds
{
  namespace core
  {

    /*
     * Globals.  These are set in register_process();  It's assumed that the
     * process using this API will either be sure to call register_process()
     * or will call check_process_registered() on its own API calls.  Anything
     * else will almost certainly lead to a null pointer exception.
     */

    extern bool process_registered;

    bool
    register_process ();
    bool
    unregister_process ();
    inline void
    ensure_process_registered ()
    {
      if (!process_registered)
	{
	  register_process ();
	}
    }

    class control;

    //    extern external_gc_ptr<control> control_block;
    extern current_version_t *current_version;
    extern external_gc_ptr<branch> top_level_branch;
    extern external_gc_ptr<iso_context> global_context;
    extern external_gc_ptr<string_table_t> string_table;
    extern external_gc_ptr<record_type_table_t> record_type_table;
    extern external_gc_ptr<name_space> global_namespace;

    template<kind KIND>
      inline external_gc_ptr<const managed_type<KIND>> global_managed_type();

#define _GLOBAL_MANAGED_TYPE_(KIND, name) \
    extern external_gc_ptr<const managed_type<KIND>> managed_##name##_type; \
    \
    template<> \
      inline external_gc_ptr<const managed_type<KIND>> global_managed_type<KIND>(){ \
	return managed_##name##_type; \
      }

    _GLOBAL_MANAGED_TYPE_(kind::BOOL, bool)
    _GLOBAL_MANAGED_TYPE_(kind::BYTE, byte)
    _GLOBAL_MANAGED_TYPE_(kind::UBYTE, ubyte)
    _GLOBAL_MANAGED_TYPE_(kind::SHORT, short)
    _GLOBAL_MANAGED_TYPE_(kind::USHORT, ushort)
    _GLOBAL_MANAGED_TYPE_(kind::INT, int)
    _GLOBAL_MANAGED_TYPE_(kind::UINT, uint)
    _GLOBAL_MANAGED_TYPE_(kind::LONG, long)
    _GLOBAL_MANAGED_TYPE_(kind::ULONG, ulong)
    _GLOBAL_MANAGED_TYPE_(kind::FLOAT, float)
    _GLOBAL_MANAGED_TYPE_(kind::DOUBLE, double)
    _GLOBAL_MANAGED_TYPE_(kind::STRING, string)

  }
}

#endif /* CORE_GLOBALS_H_ */
