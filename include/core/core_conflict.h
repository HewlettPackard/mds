/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * core_conflict.h
 *
 *  Created on: Nov 6, 2014
 *      Author: evank
 */

#ifndef CORE_CONFLICT_H_
#define CORE_CONFLICT_H_

#include "core/core_fwd.h"

namespace mds {
  namespace core {

    class conflict : public gc_allocated {
      const gc_ptr<value_chain> _value_chain;
      const gc_ptr<task> _redo_task;
      mutable bool _resolved = false;
    public:

      conflict(gc_token &gc,
               const gc_ptr<value_chain> &vc,
               const gc_ptr<task> &rt)
        : gc_allocated{gc}, _value_chain{vc}, _redo_task{rt}
      {}

      const static auto &descriptor() {
        static gc_descriptor d =
          GC_DESC(conflict)
          .WITH_FIELD(&conflict::_value_chain)
          .WITH_FIELD(&conflict::_redo_task)
          .WITH_FIELD(&conflict::_resolved)
          ;

        return d;
      }

      bool is_resolved() const {
        return _resolved;
      }

      /*
       * We can either make mark_resolved() accessible to const
       * conflicts or pass them around non-const.  I'm on the fence,
       * but the current code passes them around by const ptr, so I'm
       * taking the easy path.
       */
      void mark_resolved() const {
        _resolved = true;
      }

      gc_ptr<task> redo_task() const {
        return _redo_task;
      }

      gc_ptr<value_chain> get_vc() const {
        return _value_chain;
      }
      
    };
    


  }
}

#endif /* CORE_CONFLICT_H_ */
