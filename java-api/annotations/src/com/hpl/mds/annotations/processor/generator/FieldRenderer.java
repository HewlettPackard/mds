/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.annotations.processor.generator;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Messager;
import javax.tools.Diagnostic.Kind;

import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;

import com.hpl.mds.annotations.processor.RecordInfo;
import com.hpl.mds.annotations.processor.RecordInfo.ConstantInfo;
import com.hpl.mds.annotations.processor.RecordInfo.DataType;
import com.hpl.mds.annotations.processor.RecordInfo.FieldInfo;
import com.hpl.mds.annotations.processor.RecordInfo.VarInfo;
import com.hpl.mds.annotations.processor.RecordInfo.Visibility;
import com.hpl.mds.annotations.processor.generator.TypeProp.Properties;

/**
 * Generates all code related to fields in managed records including getters and
 * setters
 *
 * @author Abraham Alcantara
 */
public class FieldRenderer extends Renderer {

    private static final String TEMPLATE_FIELD_MEMBER = "fieldMember";
    private static final String TEMPLATE_FIELD_DEF = "fieldDef";
    private static final String TYPE_MEMBER = ".TypeDef.TYPE";

    private static final String TEMPLATE_GETTER_IMPL = "getterImpl";
    private static final String TEMPLATE_GETTER_DECLARATION = "getterDeclaration";
    private static final String TEMPLATE_MODIFIER_IMPL = "modifierImpl";
    private static final String TEMPLATE_MODIFIER_DECLARATION = "modifierDeclaration";
    private static final String TEMPLATE_MODIFIER_DECLARATION_NO_ARGS = "modifierDeclarationNoArgs";
    private static final String TEMPLATE_MODIFIER_IMPL_NO_ARGS = "modifierImplNoArgs";
  private static final String TEMPLATE_FINAL_FIELD_IMPL = "finalFieldImpl";
  private static final String TEMPLATE_FINAL_SETTER_DECLARATION = "finalSetterDeclaration";
  private static final String TEMPLATE_MANAGED_GETTER_IMPL = "managedGetterImpl";
  private static final String TEMPLATE_PRIM_GETTER_IMPL = "primGetterImpl";
  private static final String TEMPLATE_MANAGED_SETTER_IMPL = "managedSetterImpl";
  private static final String TEMPLATE_PRIM_SETTER_IMPL = "primSetterImpl";
  private static final String TEMPLATE_FINAL_COMMON_VARS = "finalCommonVars";
  private static final String TEMPLATE_STATIC_FINAL_DECL = "staticFinalDecl";

    /**
     * Information of the fields to render
     */
    private final List<FieldInfo> fields;

    /*
     * Methods and fields being rendered
     */
  private List<String> fieldDefs;
  private List<String> declaredFields;
  private List<String> privateFields;
  private List<String> protectedFields;
  private List<String> publicFields;

  private List<String> finalFields;

  private int nextFinalFieldIndex = 0;

    /**
     * 
     * @param dataTypeRenderer
     *            render for data types
     * @param fields
     *            collection of fields to render
     * @param recordSimpleName
     *            simple name of managed record
     * @param stGroup
     *            string template group
     * @param recordTemplate
     *            string template for a managed record
     */
  public FieldRenderer(Messager messager, RecordInfo recordInfo, DataTypeRenderer dataTypeRenderer, 
                       STGroup stGroup, ST recordTemplate)
  {
    super(recordInfo, dataTypeRenderer, stGroup, recordTemplate, messager);
    this.fields = recordInfo.getFields();
  }

    private void addFieldDef(String render) {
      fieldDefs = addTo(fieldDefs, render);
    }

    private void addDeclaredFields(String render) {
      declaredFields = addTo(declaredFields, render);
    }

    private void addPrivateFields(String render) {
      privateFields = addTo(privateFields, render);
    }

    private void addProtectedFields(String render) {
      protectedFields = addTo(protectedFields, render);
    }


    protected void addPublicFields(String render) {
      publicFields = addTo(publicFields, render);
    }


  private void addFinalFields(String render) {
    finalFields = addTo(finalFields, render);
  }


    /**
     * Renders all class members related to fields
     */
  @Override
  public void render() {
    nextFinalFieldIndex = 0;
    for (FieldInfo fieldInfo : fields) {
      VarInfo varInfo = fieldInfo.getVarInfo();
      DataType dataType = varInfo.getType();
      if (DataType.RECORD.equals(dataType)) {
        renderFieldRecord(fieldInfo, TypeProp.RECORD);
      } else if (DataType.ARRAY.equals(dataType)) {
        renderFieldArray(fieldInfo);
      } else {
        Properties properties = dataTypeRenderer.getProperties(dataType);
        if (properties.isCollection()) {
          renderFieldCollection(fieldInfo, properties);
        } else {
          renderFieldPrimitive(fieldInfo, properties);
        }
      }
    }

    if (nextFinalFieldIndex > 0) {
      renderFinalsCommonCode(nextFinalFieldIndex);
    }

    addCodeToManagedRecord();
  }

    /**
     * fills the managed record template with the generated content
     */
  @Override
  protected void addCodeToManagedRecord(ST recordTemplate) {
    recordTemplate.add("fields", getList(fieldDefs));
    recordTemplate.add("declaredFields", getList(declaredFields));
    recordTemplate.add("privateFields", getList(privateFields));
    recordTemplate.add("protectedFields", getList(protectedFields));
    recordTemplate.add("publicFields", getList(publicFields));
    recordTemplate.add("finalFields", getList(finalFields));
  }


    /**
     * Renders all field members generated for a managed record type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            the properties of the data type
     */
    private void renderFieldRecord(FieldInfo fieldInfo, Properties dataType) {
        VarInfo varInfo = fieldInfo.getVarInfo();
        String recordType = varInfo.getComplexType();
        List<String> typeParams = Arrays.asList(recordSimpleName, recordType);
        boolean isFinal = fieldInfo.isFinal();
        renderFieldRecordDef(fieldInfo, dataType, typeParams);
        renderFieldMembers(fieldInfo, dataType.getFieldType().getCanonicalName(), typeParams);
        if (isFinal) {
          renderFinalField(recordType,
                           fieldInfo.getGetterVisibility(),
                           fieldInfo.getVarInfo().getName(),
                           getGetterName(fieldInfo),
                           fieldInfo.getMdsName(),
                           TypeProp.PEEK_MNG_VALUE_METHOD,
                           "null");
        } else {
          renderFieldGetters(fieldInfo, recordType);
          // String mName = isFinal ? TypeProp.INIT_FIELD_VALUE_METHOD : TypeProp.SET_FIELD_VALUE_METHOD;
          String mName = TypeProp.SET_FIELD_VALUE_METHOD;
          Visibility vis = fieldInfo.getSetterVisibility();
          renderFieldModifier(varInfo.getName(), vis, mName, recordType,
                              firstCharUpperCase(fieldInfo.getMdsName()), isFinal);
        }
    }

  private void renderFinalField(String type, Visibility getterVis,
                                String fieldMemberName, String getterName,
                                String fieldName, String fieldPeeker,
                                String defaultVal)
  {
    int index = nextFinalFieldIndex++;
    String peekerName = getPeekGetterName(getterName);
    addCode(adder(getterVis),
            getFieldGetterDeclaration(type, getterName, true));
    addCode(adder(getterVis),
            getFieldGetterDeclaration(type, peekerName, true));
    String setValueMethod = TypeProp.SET_FIELD_VALUE_METHOD;
    String setter = setValueMethod+firstCharUpperCase(fieldName);
    addCode(this::addConstructingMethod,
            renderTemplate(TEMPLATE_FINAL_SETTER_DECLARATION,
                           t->{
                             t.add("modifierName", setter);
                             t.add("typeParam", type);
                           }));
    addCode(this::addFinalFields,
            renderTemplate(TEMPLATE_FINAL_FIELD_IMPL,
                           t->{
                             t.add("fieldName",fieldMemberName);
                             t.add("field", fieldName);
                             t.add("type", type);
                             t.add("getter", getterName);
                             t.add("peeker", peekerName);
                             t.add("setter", setter);
                             t.add("peekValueMethod", fieldPeeker);
                             t.add("setValueMethod", setValueMethod);
                             t.add("recordName", recordSimpleName);
                             t.add("index", index);
                             t.add("defaultVal", defaultVal);
                           }));
  }
                           

    /**
     * Generates field definition for record type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            data type properties
     * @param typeParams
     *            type parameter types
     */
  private void renderFieldRecordDef(FieldInfo fieldInfo, Properties dataType,
                                    List<String> typeParams)
  {
    VarInfo varInfo = fieldInfo.getVarInfo();
    addCode(this::addFieldDef,
            renderTemplate(TEMPLATE_FIELD_DEF,
                           t->{
                             t.add("type", dataType.getFieldType().getCanonicalName());
                             t.add("typeParams", typeParams);
                             t.add("name", varInfo.getName());
                             t.add("creationMethod", dataType.getCreateFieldMethod());
                             t.add("methodArgs",
                                   new String[] { getMDSName(fieldInfo),
                                                  varInfo.getComplexType() + TYPE_MEMBER });
                           }));
  }

    /**
     * @param fieldInfo
     *            information of the field
     * @return the MDS name of the field as a string
     */
    private String getMDSName(FieldInfo fieldInfo) {
        return "\"" + fieldInfo.getMdsName() + "\"";
    }

    /**
     * Renders field declaration at the correct visibility level
     * 
     * @param fieldInfo
     *            information of the field
     * @param type
     *            type of the field
     * @param typeParams
     *            type parameters of the field
     */
    private void renderFieldMembers(FieldInfo fieldInfo, String type, List<String> typeParams) {
      String code = renderTemplate(TEMPLATE_FIELD_MEMBER,
                                   t->{
                                     t.add("type", type);
                                     t.add("typeParams", typeParams);
                                     t.add("name", fieldInfo.getVarInfo().getName());
                                     t.add("recordType", recordSimpleName);
                                   });
      addCode(fieldInfo.getFieldVisibility(), code);
      addCode(this::addDeclaredFields, code);
    }

    /**
     * Renders getter methods for the given managed data type
     * 
     * @param fieldInfo
     * @param managedType
     */
    private void renderFieldGetters(FieldInfo fieldInfo, String managedType) {
        String getterName = getGetterName(fieldInfo);
        renderFieldGetter(fieldInfo, managedType, TypeProp.GET_MNG_VALUE_METHOD, getterName);
        renderFieldGetter(fieldInfo, managedType, TypeProp.PEEK_MNG_VALUE_METHOD,
                getPeekGetterName(getterName));
    }

    private String getGetterName(FieldInfo fieldInfo) {
        String getterNameFormat = fieldInfo.getGetterNameFormat();
        String fieldName;
        if (getterNameFormat.startsWith("%s")) {
            fieldName = fieldInfo.getMdsName();
        } else {
            fieldName = firstCharUpperCase(fieldInfo.getMdsName());
        }
        return String.format(getterNameFormat, fieldName);
    }

    /**
     * Renders getter definition and declaration at different visibility levels
     * 
     * @param fieldInfo
     *            information of the field
     * @param type
     *            return data type of the getters
     * @param getValueMethod
     *            the name of the method to retrieve the field's value
     * @param getterName
     *            the name of the getter
     */
  private void renderFieldGetter(FieldInfo fieldInfo, String type,
                                 String getValueMethod, String getterName)
  {
    addCode(fieldInfo.getGetterVisibility(),
            getFieldGetterDeclaration(type, getterName, false),
            renderFieldGetterImpl(fieldInfo.getVarInfo().getName(),
                                  type, getValueMethod, getterName));
  }

    /**
     * @param fieldName
     *            name of the field
     * @param type
     *            field data type
     * @param getValueMethod
     *            method name to retrieve the field's value
     * @param getterName
     *            the name of the getter method
     * @return render of a getter implementation method of a field
     */
  private String renderFieldGetterImpl(String fieldName, String type,
                                       String getValueMethod, String getterName)
  {
    return renderTemplate(TEMPLATE_GETTER_IMPL,
                          t->{
                            t.add("type", type);
                            t.add("getterName", getterName);
                            t.add("fieldName", fieldName);
                            t.add("getValueMethod", getValueMethod);
                            t.add("recordName", recordSimpleName);
                          });
    }

    /**
     * @param type
     *            the return type of the getter
     * @param getterName
     *            the name of the getter
     * @return the render of a getter declaration
     */
  private String getFieldGetterDeclaration(String type, String getterName,
                                           boolean isFinal)
  {
    return renderTemplate(TEMPLATE_GETTER_DECLARATION,
                          t->{
                            t.add("type", type);
                            t.add("getterName", getterName);
                            t.add("fq_name", recordInfo.getFQName());
                            t.add("isFinal", isFinal);
                          });
  }

    private String getPeekGetterName(String getterName) {
      if (getterName.startsWith("get") || getterName.startsWith("has")) {
        return "peek"+getterName.substring(3);
      } else if (getterName.startsWith("is")) {
        return "peek"+getterName.substring(2);
      } else {
        return "peek" + firstCharUpperCase(getterName);
      }
    }

    /**
     * Generates modifier method implementation and declaration at the given
     * visibility level
     * 
     * @param fieldName
     *            field name
     * @param visibility
     *            visibility of the modifier method
     * @param methodName
     *            method name of the field and prefix of the generated modifier
     * @param typeParam
     *            parameter type
     * @param modifierSuffix
     *            suffix of method's name
     */
  private void renderFieldModifier(String fieldName, Visibility visibility,
                                   String methodName, String typeParam,
                                   String modifierSuffix, boolean isFinal)
  {
    String modifierName = methodName + modifierSuffix;
    addCode(visibility,
            getFieldNumericModifierDeclaration(typeParam, modifierName),
            renderModifierImpl(fieldName, methodName, typeParam, modifierName));
    if (!isFinal) {
      String getAndMethodName = "getAnd"+firstCharUpperCase(methodName);
      String getAndModifierName = "getAnd"+firstCharUpperCase(modifierName);
      addCode(visibility,
              getFieldNumericModifierDeclaration(typeParam, getAndModifierName),
              renderModifierImpl(fieldName, getAndMethodName, typeParam, getAndModifierName));
    }
  }

    /**
     * Generates numeric field modifier declaration method
     * 
     * @param typeParam
     *            parameter type
     * @param modifierName
     *            the name of the method
     * @return the render of the method
     */
  private String getFieldNumericModifierDeclaration(String typeParam, String modifierName) {
    return renderTemplate(TEMPLATE_MODIFIER_DECLARATION,
                          t->{
                            t.add("typeParam", typeParam);
                            t.add("modifierName", modifierName);
                          });
  }

    /**
     * Generates the modifier default implementation
     * 
     * @param fieldName
     *            field name
     * @param fieldMethod
     *            field method name to modify the value
     * @param typeParam
     *            parameter type
     * @param modifierName
     *            modifier method name
     * 
     * @return the result of the rendering
     */
  private String renderModifierImpl(String fieldName, String fieldMethod,
                                    String typeParam, String modifierName)
  {
    return renderTemplate(TEMPLATE_MODIFIER_IMPL,
                          t->{
                            t.add("typeParam", typeParam);
                            t.add("modifierName", modifierName);
                            t.add("fieldName", fieldName);
                            t.add("fieldMethod", fieldMethod);
                            t.add("recordName", recordSimpleName);
                          });
  }

    /**
     * @param string
     * @return the given string with its first character in upper case
     */
    private String firstCharUpperCase(String string) {
        return string.substring(0, 1).toUpperCase() + string.substring(1);
    }

    /**
     * Renders all class members for array fields
     * 
     * @param fieldInfo
     *            field information
     */
    private void renderFieldArray(FieldInfo fieldInfo) {
        DataType paramType = fieldInfo.getVarInfo().getTypeParams().get(0).getType();
        Properties dataTypeProps = dataTypeRenderer.getArrayProperties(paramType);
        if (dataTypeProps != null) {
            renderFieldArray(fieldInfo, dataTypeProps);
        } else {
            renderFieldCollection(fieldInfo, TypeProp.ARRAY_GENERIC);
        }
    }

    /**
     * Renders a no-generic field array
     * 
     * @param fieldInfo
     *            information of the field to render
     * @param dataTypeProps
     *            data type properties of the array
     */
    private void renderFieldArray(FieldInfo fieldInfo, Properties dataTypeProps) {
        String canonicalName = dataTypeProps.getFieldType().getCanonicalName();
        renderFieldPrimitiveDef(fieldInfo, canonicalName, dataTypeProps.getCreateFieldMethod());
        renderFieldMembers(fieldInfo, canonicalName, Arrays.asList(recordSimpleName));
        String managedType = dataTypeProps.getMngType().getCanonicalName();
        boolean isFinal = fieldInfo.isFinal();
        if (isFinal) {
          renderFinalField(managedType,
                           fieldInfo.getGetterVisibility(),
                           fieldInfo.getVarInfo().getName(),
                           getGetterName(fieldInfo),
                           fieldInfo.getMdsName(),
                           TypeProp.PEEK_MNG_VALUE_METHOD,
                           "null");
        } else {
          renderFieldGetters(fieldInfo, managedType);
          Visibility setterVisibility = fieldInfo.getSetterVisibility();
          // String mName = isFinal ? TypeProp.INIT_FIELD_VALUE_METHOD : TypeProp.SET_FIELD_VALUE_METHOD;
          String mName = TypeProp.SET_FIELD_VALUE_METHOD;
          renderFieldModifier(fieldInfo.getVarInfo().getName(), setterVisibility, mName,
                              managedType, firstCharUpperCase(fieldInfo.getMdsName()), isFinal);
        }
    }

    /**
     * Renders the definition of a primitive data type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param type
     *            data type of the field
     * @param creationMethod
     *            method name to create the field
     */
    private void renderFieldPrimitiveDef(FieldInfo fieldInfo, String type, String creationMethod) {
      addCode(this::addFieldDef,
              renderTemplate(TEMPLATE_FIELD_DEF,
                            t->{
                              t.add("type", type);
                              t.add("typeParams", new String[] { recordSimpleName });
                              t.add("name", fieldInfo.getVarInfo().getName());
                              t.add("creationMethod", creationMethod);
                              t.add("methodArgs", new String[] { getMDSName(fieldInfo) });
                             }));
    }

    /**
     * Renders the generated members of a collection type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            the properties of the data type
     */
    private void renderFieldCollection(FieldInfo fieldInfo, Properties dataType) {
        List<String> types = dataTypeRenderer.getTypes(fieldInfo.getVarInfo().getTypeParams());
        List<String> typeParams = getFieldCollectionTypeParams(recordSimpleName, types);
        boolean isFinal = fieldInfo.isFinal();
        String fullType = dataTypeRenderer
          .renderTypeWithParameters(dataType.getMngType().getCanonicalName(), types);
        renderFieldCollectionDef(fieldInfo, dataType, types, typeParams);
        renderFieldMembers(fieldInfo, dataType.getFieldType().getCanonicalName(), typeParams);
        if (isFinal) {
          renderFinalField(fullType,
                           fieldInfo.getGetterVisibility(),
                           fieldInfo.getVarInfo().getName(),
                           getGetterName(fieldInfo),
                           fieldInfo.getMdsName(),
                           TypeProp.PEEK_MNG_VALUE_METHOD,
                           "null");
        } else {
          renderFieldGetters(fieldInfo, fullType);
          // String setterName = isFinal ? TypeProp.INIT_FIELD_VALUE_METHOD
          //   : TypeProp.SET_FIELD_VALUE_METHOD;
          String setterName = TypeProp.SET_FIELD_VALUE_METHOD;
          Visibility setterVisibility = fieldInfo.getSetterVisibility();
          
          renderFieldModifier(fieldInfo.getVarInfo().getName(), setterVisibility,
                              setterName, fullType,
                              firstCharUpperCase(fieldInfo.getMdsName()), isFinal);
        }
    }

    /**
     * @param recordName
     *            record simple name
     * @param types
     *            parameter data types of the collection
     * @return the parameter types of a collection type field
     */
    private List<String> getFieldCollectionTypeParams(String recordName, List<String> types) {
        List<String> typeParams = new ArrayList<>(types.size() + 1);
        typeParams.add(recordName);
        typeParams.addAll(types);
        return typeParams;
    }

    /**
     * Generates field definition for a collection type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            data type properties of the collection
     * @param argTypes
     *            data types arguments for the creation method
     * @param typeParams
     *            data type parameters of the collection
     */
    private void renderFieldCollectionDef(FieldInfo fieldInfo, Properties dataType, List<String> argTypes,
            List<String> typeParams) {
      addCode(this::addFieldDef,
              renderTemplate(TEMPLATE_FIELD_DEF,
                             t->{
                               t.add("type", dataType.getFieldType().getCanonicalName());
                               t.add("typeParams", typeParams);
                               t.add("name", fieldInfo.getVarInfo().getName());
                               t.add("creationMethod", dataType.getCreateFieldMethod());
                               t.add("methodArgs", getFieldCollectionMethodArgs(fieldInfo, argTypes));
                             }));
    }

    /**
     * @param fieldInfo
     *            information of the field
     * @param types
     *            parameter data types of the collection
     * @return the arguments for the creation of a collection type field
     */
    private List<String> getFieldCollectionMethodArgs(FieldInfo fieldInfo, List<String> types) {
        List<String> methodArgs = new ArrayList<>(types.size() + 1);
        methodArgs.add(getMDSName(fieldInfo));
        for (String type : types) {
            methodArgs.add(type + TypeProp.TYPE_MNG_MEMBER);
        }
        return methodArgs;
    }

    /**
     * Renders all field members generated for a primitive type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            the properties of the data type
     */
    private void renderFieldPrimitive(FieldInfo fieldInfo, Properties dataType) {
        String canonicalName = dataType.getFieldType().getCanonicalName();
        renderFieldPrimitiveDef(fieldInfo, canonicalName, dataType.getCreateFieldMethod());
        renderFieldMembers(fieldInfo, canonicalName, Arrays.asList(recordSimpleName));
        boolean preferPrim = !dataType.managedIsCheaper();
        if (fieldInfo.isFinal()) {
          if (preferPrim) {
            renderFinalField(dataType.getPrimitiveType(),
                             fieldInfo.getGetterVisibility(),
                             fieldInfo.getVarInfo().getName(),
                             primGetterName(fieldInfo),
                             fieldInfo.getMdsName(),
                             dataType.getPeekPrimitiveValueMethod(),
                             dataType.defaultValue());
            renderDelegatingManagedGetter(fieldInfo, dataType);
            renderDelegatingManagedSetter(fieldInfo, dataType);
          } else {
            renderFinalField(dataType.getMngType().getCanonicalName(),
                             fieldInfo.getGetterVisibility(),
                             fieldInfo.getVarInfo().getName(),
                             managedGetterName(fieldInfo),
                             fieldInfo.getMdsName(),
                             TypeProp.PEEK_MNG_VALUE_METHOD,
                             "null");
            renderDelegatingPrimGetter(fieldInfo, dataType);
            renderDelegatingPrimSetter(fieldInfo, dataType);
          }
        } else {
          if (preferPrim) {
            renderPrimGetter(fieldInfo, dataType);
            renderDelegatingManagedGetter(fieldInfo, dataType);
          } else {
            renderManagedGetter(fieldInfo, dataType);
            renderDelegatingPrimGetter(fieldInfo, dataType);
          }

          String methodSuffix = firstCharUpperCase(fieldInfo.getMdsName());
          renderFieldPrimitiveSetters(fieldInfo, dataType, methodSuffix);
          if (dataType.isNumeric() && !fieldInfo.isFinal()) {
            renderFieldPrimitiveNumericModifiers(fieldInfo, dataType, methodSuffix);
          }
        }
    }

  private String primGetterName(FieldInfo fieldInfo) {
    String name = fieldInfo.getMdsName();
    if (fieldInfo.getVarInfo().isManaged()) {
      name = "prim"+firstCharUpperCase(name);
    }
    String getterNameFormat = fieldInfo.getGetterNameFormat();
    if (!getterNameFormat.startsWith("%s")) {
      name = firstCharUpperCase(name);
    }
    return String.format(getterNameFormat, name);
  }
          
  private String managedGetterName(FieldInfo fieldInfo) {
    String name = fieldInfo.getMdsName();
    if (!fieldInfo.getVarInfo().isManaged()) {
      name = "managed"+firstCharUpperCase(name);
    }
    String getterNameFormat = fieldInfo.getGetterNameFormat();
    if (!getterNameFormat.startsWith("%s")) {
      name = firstCharUpperCase(name);
    }
    return String.format(getterNameFormat, name);
  }
          

    /**
     * Renders the getters for a primitive data type field
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            the properties of the data type
     */
  
  // private void renderFieldPrimitiveGetters(FieldInfo fieldInfo, Properties dataType) {
  //   renderPrimGetter(fieldInfo, dataType);
  //   renderManagedGetter(fieldInfo, dataType);
  // }

  private void renderPrimGetter(FieldInfo fieldInfo, Properties dataType) {
    String getter = primGetterName(fieldInfo);
    renderFieldGetter(fieldInfo, dataType.getPrimitiveType(),
                      dataType.getGetPrimitiveValueMethod(),
                      getter);
    renderFieldGetter(fieldInfo, dataType.getPrimitiveType(),
                      dataType.getPeekPrimitiveValueMethod(),
                      getPeekGetterName(getter));
  }

  private void renderManagedGetter(FieldInfo fieldInfo, Properties dataType) {
    String getter = managedGetterName(fieldInfo);
    renderFieldGetter(fieldInfo, dataType.getMngType().getCanonicalName(),
                      TypeProp.GET_MNG_VALUE_METHOD,
                      getter);
    renderFieldGetter(fieldInfo, dataType.getMngType().getCanonicalName(),
                      TypeProp.PEEK_MNG_VALUE_METHOD,
                      getPeekGetterName(getter));
  }

  private void renderDelegatingManagedGetter(FieldInfo fieldInfo, Properties dataType) {
    String getter = managedGetterName(fieldInfo);
    String managedType = dataType.getMngType().getCanonicalName();
    String primGetter = primGetterName(fieldInfo);
    Visibility vis = fieldInfo.getGetterVisibility();
    renderDelegatingManagedGetter(vis, managedType, getter, primGetter);
    renderDelegatingManagedGetter(vis, managedType, getPeekGetterName(getter),
                        getPeekGetterName(primGetter));
  }

  private void renderDelegatingManagedGetter(Visibility vis, String mType, 
                                             String getterName,
                                             String primGetter)
  {
    addCode(vis, getFieldGetterDeclaration(mType, getterName, false),
            renderTemplate(TEMPLATE_MANAGED_GETTER_IMPL,
                           t->{
                             t.add("mType", mType);
                             t.add("getter", getterName);
                             t.add("primGetter", primGetter);
                           }));
  }
  private void renderDelegatingManagedSetter(FieldInfo fieldInfo, Properties dataType) {
    String setter = TypeProp.SET_FIELD_VALUE_METHOD
      +firstCharUpperCase(fieldInfo.getMdsName());
    String mType = dataType.getMngType().getCanonicalName();
    String toPrim = dataType.getAsPrimitiveValueMethod();
    addCode(this::addConstructingMethod,
            renderTemplate(TEMPLATE_MANAGED_SETTER_IMPL,
                           t->{
                             t.add("mType", mType);
                             t.add("setter", setter);
                             t.add("toPrim", toPrim);
                           }));
  }
  private void renderDelegatingPrimSetter(FieldInfo fieldInfo, Properties dataType) {
    String setter = TypeProp.SET_FIELD_VALUE_METHOD
      +firstCharUpperCase(fieldInfo.getMdsName());
    String mType = dataType.getMngType().getCanonicalName();
    String pType = dataType.getPrimitiveType();
    String toPrim = dataType.getAsPrimitiveValueMethod();
    addCode(this::addConstructingMethod,
            renderTemplate(TEMPLATE_PRIM_SETTER_IMPL,
                           t->{
                             t.add("mType", mType);
                             t.add("pType", pType);
                             t.add("setter", setter);
                             t.add("toPrim", toPrim);
                           }));
  }

  private void renderDelegatingPrimGetter(FieldInfo fieldInfo, Properties dataType) {
    String getter = primGetterName(fieldInfo);
    String pType = dataType.getPrimitiveType();
    String mGetter = managedGetterName(fieldInfo);
    String toPrim = dataType.getAsPrimitiveValueMethod();
    Visibility vis = fieldInfo.getGetterVisibility();
    renderDelegatingManagedGetter(vis, pType, getter, mGetter, toPrim);
    renderDelegatingManagedGetter(vis, pType, getPeekGetterName(getter),
                                  getPeekGetterName(mGetter), toPrim);
  }

  private void renderDelegatingManagedGetter(Visibility vis, String pType, 
                                             String getterName,
                                             String mGetter,
                                             String toPrim)
  {
    addCode(vis, getFieldGetterDeclaration(pType, getterName, false),
            renderTemplate(TEMPLATE_PRIM_GETTER_IMPL,
                           t->{
                             t.add("pType", pType);
                             t.add("getter", getterName);
                             t.add("mGetter", mGetter);
                             t.add("toPrim", toPrim);
                           }));
  }
    /**
     * Generates setters for primitive type fields
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            data type properties
     * @param modifierSuffix
     *            suffix of method's name
     */
    private void renderFieldPrimitiveSetters(FieldInfo fieldInfo, Properties dataType, String modifierSuffix) {
        String primitiveType = dataType.getPrimitiveType();
        String managedType = dataType.getMngType().getCanonicalName();
        String fieldName = fieldInfo.getVarInfo().getName();
        boolean isFinal = fieldInfo.isFinal();
        Visibility setterVisibility = isFinal ? Visibility.PRIVATE : fieldInfo.getSetterVisibility();
        // String mName = isFinal ? TypeProp.INIT_FIELD_VALUE_METHOD : TypeProp.SET_FIELD_VALUE_METHOD;
        String mName = TypeProp.SET_FIELD_VALUE_METHOD;
        renderFieldModifier(fieldName, setterVisibility, mName, managedType, modifierSuffix, isFinal);
        renderFieldModifier(fieldName, setterVisibility, mName, primitiveType, modifierSuffix, isFinal);
    }

    /**
     * generates all modifiers for numeric type fields: inc, dec, mult and div.
     * 
     * @param fieldInfo
     *            information of the field
     * @param dataType
     *            data type properties
     * @param modifierSuffix
     *            suffix of method's name
     */
    private void renderFieldPrimitiveNumericModifiers(FieldInfo fieldInfo, Properties dataType, String modifierSuffix) {
        String primitiveType = dataType.getPrimitiveType();
        String managedType = dataType.getMngType().getCanonicalName();
        String name = fieldInfo.getVarInfo().getName();
        renderFieldModifierNoArgs(name, fieldInfo.getIncVisibility(), "inc", primitiveType, modifierSuffix);
        renderFieldModifier(name, fieldInfo.getIncVisibility(), "inc", primitiveType, modifierSuffix, false);
        renderFieldModifier(name, fieldInfo.getIncVisibility(), "inc", managedType, modifierSuffix, false);
        renderFieldModifierNoArgs(name, fieldInfo.getDecVisibility(), "dec", primitiveType, modifierSuffix);
        renderFieldModifier(name, fieldInfo.getDecVisibility(), "dec", primitiveType, modifierSuffix, false);
        renderFieldModifier(name, fieldInfo.getDecVisibility(), "dec", managedType, modifierSuffix, false);
        renderFieldModifier(name, fieldInfo.getMulVisibility(), "mult", primitiveType, modifierSuffix, false);
        renderFieldModifier(name, fieldInfo.getMulVisibility(), "mult", managedType, modifierSuffix, false);
        renderFieldModifier(name, fieldInfo.getDivVisibility(), "div", primitiveType, modifierSuffix, false);
        renderFieldModifier(name, fieldInfo.getDivVisibility(), "div", managedType, modifierSuffix, false);
    }

    /**
     * Generates no arguments modifier method implementation and declaration at
     * the given visibility level
     * 
     * @param fieldName
     *            field name
     * @param visibility
     *            visibility of the modifier method
     * @param methodName
     *            method name of the field and prefix of the generated modifier
     * @param primitiveType
     *            parameter type for casting
     * @param modifierSuffix
     *            suffix of method's name
     */
  private void renderFieldModifierNoArgs(String fieldName, Visibility visibility, String methodName,
                                         String primitiveType, String modifierSuffix)
  {
    String modifierName = methodName + modifierSuffix;
    addCode(visibility,
            getFieldNumericModifierDeclarationNoArgs(modifierName, primitiveType),
            renderModifierImplNoArgs(fieldName, methodName, modifierName, primitiveType));
    String getAndMethodName = "getAnd"+firstCharUpperCase(methodName);
    String getAndModifierName = "getAnd"+firstCharUpperCase(modifierName);
    addCode(visibility,
            getFieldNumericModifierDeclarationNoArgs(getAndModifierName, primitiveType),
            renderModifierImplNoArgs(fieldName, getAndMethodName, getAndModifierName, primitiveType));
  }

    /**
     * Generates the modifier default implementation with no arguments
     * 
     * @param fieldName
     *            field name
     * @param fieldMethod
     *            field method name to modify the value
     * @param modifierName
     *            modifier method name
     * @param primitiveType
     *            type for casting constant
     * 
     * @return the result of the rendering
     */
  private String renderModifierImplNoArgs(String fieldName, String fieldMethod, String modifierName,
                                          String primitiveType)
  {
    return renderTemplate(TEMPLATE_MODIFIER_IMPL_NO_ARGS,
                          t->{
                            t.add("modifierName", modifierName);
                            t.add("fieldName", fieldName);
                            t.add("fieldMethod", fieldMethod);
                            t.add("numType", primitiveType);
                            t.add("recordName", recordSimpleName);
                          });
  }

    /**
     * Generates no argument numeric field modifier method declaration
     * 
     * @param modifierName
     *            the name of the method
     * @param numType
     *            data type of the return value
     * @return the render of the method
     */
  private String getFieldNumericModifierDeclarationNoArgs(String modifierName, String numType) {
    return renderTemplate(TEMPLATE_MODIFIER_DECLARATION_NO_ARGS,
                          t->{
                            t.add("modifierName", modifierName);
                            t.add("typeParam", numType);
                          });
  }

  private void renderFinalsCommonCode(int nFields) {
    addFinalFields(renderTemplate(TEMPLATE_FINAL_COMMON_VARS,
                                  t->{
                                    t.add("nFields", nFields);
                                  }));
  }

  public void renderStaticFinals(List<ConstantInfo> fieldInfos) {
    for (ConstantInfo fieldInfo : fieldInfos) {
      String code = renderTemplate(TEMPLATE_STATIC_FINAL_DECL,
                                   t->{
                                     t.add("name", fieldInfo.getName());
                                     t.add("type", fieldInfo.getType());
                                     t.add("schema", recordInfo.getSchema());
                                   });
      Visibility vis = fieldInfo.getVisibility();
      addCode(vis, code);
      addCode(staticAdder(vis), code);
    }
  }

}
