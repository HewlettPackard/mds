/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.annotations.processor.generator;

import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hpl.mds.ArrayField;
import com.hpl.mds.Field;
import com.hpl.mds.ListField;
import com.hpl.mds.ManagedArray;
import com.hpl.mds.ManagedList;
import com.hpl.mds.ManagedMap;
import com.hpl.mds.ManagedSet;
import com.hpl.mds.MapField;
import com.hpl.mds.SetField;
import com.hpl.mds.ManagedBoolean;
import com.hpl.mds.ManagedByte;
import com.hpl.mds.ManagedDouble;
import com.hpl.mds.ManagedFloat;
import com.hpl.mds.ManagedInt;
import com.hpl.mds.ManagedLong;
import com.hpl.mds.ManagedShort;
import com.hpl.mds.ManagedBooleanArray;
import com.hpl.mds.ManagedByteArray;
import com.hpl.mds.ManagedDoubleArray;
import com.hpl.mds.ManagedFloatArray;
import com.hpl.mds.ManagedIntArray;
import com.hpl.mds.ManagedLongArray;
import com.hpl.mds.ManagedShortArray;
import com.hpl.mds.BooleanArrayField;
import com.hpl.mds.BooleanField;
import com.hpl.mds.ByteArrayField;
import com.hpl.mds.ByteField;
import com.hpl.mds.DoubleArrayField;
import com.hpl.mds.DoubleField;
import com.hpl.mds.FloatArrayField;
import com.hpl.mds.FloatField;
import com.hpl.mds.IntArrayField;
import com.hpl.mds.IntField;
import com.hpl.mds.LongArrayField;
import com.hpl.mds.LongField;
import com.hpl.mds.ShortArrayField;
import com.hpl.mds.ShortField;
import com.hpl.mds.ManagedString;
import com.hpl.mds.ManagedStringArray;
import com.hpl.mds.StringArrayField;
import com.hpl.mds.StringField;

/**
 * All constant information for data types and some of its attributes, including
 * classes and method names
 *
 * @author Abraham Alcantara
 */
public class TypeProp {

    static final String VALUE_OF = ".valueOf";
    static final String SET_FIELD_VALUE_METHOD = "set";
  //    static final String INIT_FIELD_VALUE_METHOD = "init";
    static final String GET_MNG_VALUE_METHOD = "get";
    static final String PEEK_MNG_VALUE_METHOD = "peek";
    static final String TYPE_MNG_MEMBER = ".TYPE";

    static class Properties {

        private final Class<?> fieldType;
      private final String createFieldMethod;
        private final Class<?> mngType;
        private final String primitiveType;
      private final String primLower;
      private final String primUpper;
        private final boolean numeric;
        private final boolean collection;

      public Properties(Class<?> fieldType, String createFieldMethod,
                        Class<?> mngType, String primitiveType,
                        boolean numeric, boolean collection)
      {
            this.fieldType = fieldType;
            this.createFieldMethod = createFieldMethod;
            this.mngType = mngType;
            this.primitiveType = primitiveType;
            if (primitiveType == null) {
              primUpper = primLower = null;
            } else {
              String primName = primitiveType;
              int dotPos = primName.lastIndexOf(".");
              if (dotPos >= 0) {
                primName = primName.substring(dotPos+1);
              }
              primLower = firstCharLowerCase(primName);
              primUpper = firstCharUpperCase(primName);
            }
            this.numeric = numeric;
            this.collection = collection;
        }

      public boolean managedIsCheaper() {
        return primitiveType == null || this == STRING;
      }

      public String defaultValue() {
        if (numeric) {
          return "0";
        } else if ("boolean".equals(primitiveType)) {
          return "false";
        } else {
          return "null";
        }
      }
      

        public Class<?> getFieldType() {
            return fieldType;
        }

        public String getCreateFieldMethod() {
          return createFieldMethod;
        }

        public Class<?> getMngType() {
            return mngType;
        }

        public String getPrimitiveType() {
            return primitiveType;
        }

        public String getGetPrimitiveValueMethod() {
          return primitiveType == null ? null : "get"+primUpper;
        }

        public boolean isNumeric() {
            return numeric;
        }

        public boolean isCollection() {
            return collection;
        }

        public String getAsPrimitiveValueMethod() {
          return primitiveType == null ? null : "as"+primUpper;
        }

        public String getPeekPrimitiveValueMethod() {
          return primitiveType == null ? null : "peek"+primUpper;
        }

    }

    static final Properties BOOLEAN = new Properties(BooleanField.class, "booleanField", ManagedBoolean.class,
            "boolean", false, false);

    static final Properties BYTE = new Properties(ByteField.class, "byteField", ManagedByte.class, "byte", false, false);

    static final Properties DOUBLE = new Properties(DoubleField.class, "doubleField", ManagedDouble.class, "double", true, false);

    static final Properties FLOAT = new Properties(FloatField.class, "floatField", ManagedFloat.class, "float", true, false);

    static final Properties INT = new Properties(IntField.class, "intField", ManagedInt.class, "int", true, false);

    static final Properties LONG = new Properties(LongField.class, "longField", ManagedLong.class, "long", true, false);

    static final Properties SHORT = new Properties(ShortField.class, "shortField", ManagedShort.class, "short", true, false);

    static final Properties STRING = new Properties(StringField.class, "stringField", ManagedString.class,
            String.class.getCanonicalName(), false, false);

    static final Properties LIST = new Properties(ListField.class, "listField", ManagedList.class,
            List.class.getCanonicalName(), false, true);

    static final Properties SET = new Properties(SetField.class, "setField", ManagedSet.class,
            Set.class.getCanonicalName(), false, true);

    static final Properties MAP = new Properties(MapField.class, "mapField", ManagedMap.class,
            Map.class.getCanonicalName(), false, true);

    static final Properties RECORD = new Properties(Field.class, "field", null, null, false, false);

    static final Properties ARRAY_GENERIC = new Properties(ArrayField.class, "arrayField", ManagedArray.class, null,
                                                           false, false);

    static final Properties ARRAY_INT = createArrayProp(IntArrayField.class, "intArrayField", ManagedIntArray.class);

    static final Properties ARRAY_BOOLEAN = createArrayProp(BooleanArrayField.class, "booleanArrayField",
            ManagedBooleanArray.class);

    static final Properties ARRAY_BYTE = createArrayProp(ByteArrayField.class, "byteArrayField",
            ManagedByteArray.class);

    static final Properties ARRAY_DOUBLE = createArrayProp(DoubleArrayField.class, "doubleArrayField",
            ManagedDoubleArray.class);

    static final Properties ARRAY_FLOAT = createArrayProp(FloatArrayField.class, "floatArrayField",
            ManagedFloatArray.class);

    static final Properties ARRAY_LONG = createArrayProp(LongArrayField.class, "longArrayField",
            ManagedLongArray.class);

    static final Properties ARRAY_SHORT = createArrayProp(ShortArrayField.class, "shortArrayField",
            ManagedShortArray.class);

    static final Properties ARRAY_STRING = createArrayProp(StringArrayField.class, "stringArrayField",
            ManagedStringArray.class);

    private static Properties createArrayProp(Class<?> fieldType, String createFieldMethod, Class<?> mngType) {
        return new Properties(fieldType, createFieldMethod, mngType, null, false, false);
    }

    private TypeProp() {
    } // class only for constants

    /**
     * @param string
     * @return the given string with its first character in upper case
     */
    private static String firstCharUpperCase(String string) {
        return string.substring(0, 1).toUpperCase() + string.substring(1);
    }
    private static String firstCharLowerCase(String string) {
        return string.substring(0, 1).toLowerCase() + string.substring(1);
    }
}
