##
#
#  Managed Data Structures
#  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  As an exception, the copyright holders of this Library grant you permission
#  to (i) compile an Application with the Library, and (ii) distribute the 
#  Application containing code generated by the Library and added to the 
#  Application during this compilation process under terms of your choice, 
#  provided you also meet the terms and conditions of the Application license.
#

###########################
#
# This makefile contains definitions that the projects.mk file may
# want to take advantage of
#
###########################

this_mf := $(lastword $(MAKEFILE_LIST))

# The directory that this makefile is in, assumed to be <proj>/build

build_dir := $(abspath $(dir $(this_mf)))

# The project directory

project_dir := $(abspath $(build_dir)/..)

# The name of the project.  This will be used, e.g., for the default lib name

project_name ?= $(notdir $(project_dir))

# The build config directory, assumed to be where the overall make was
# run from.

config := $(notdir $(CURDIR))

# The highest ancestor that has a build dir.  This will be taken to be the broadest repository.

highest_with_build = $(if $(wildcard $1/../build),$(call highest_with_build,$1/..),$(abspath $1))

top_level_repo := $(call highest_with_build,$(project_dir))

git_base_dir := $(abspath $(top_level_repo)/..)

# true if this repo follows the exported repo structure

is_exported_repo := $(if $(wildcard $(project_dir)/HPE_internal_repo.txt),,1)

# $(call repo_dir,name,default,var) finds the repo directory off of
# $(get_base_dir) that has $($(name)_repo.txt) in it.  If there's more
# than one, prefers the one named $(default) and warns.  If $(default)
# isn't there, prints message about setting $(var).

repos_for = $(notdir $(realpath $(dir $(wildcard $(git_base_dir)/*/$1_repo.txt))))

pick_best_repo = $(if $(filter $3,$1),$(warning Multiple possibilities for $2 repo: $1.  Assuming $3.  Use $$$4 to specify.)$3,$(error Multiple possibilities for $2 repo: $1.  Use $$$4 to specify))

pick_repo = $(if $1,$(git_base_dir)/$(if $(word 2,$1),$(call pick_best_repo,$1,$2,$3,$4),$1),$(error Could not find $2 repo.  Please set $$$4))

repo_dir = $(call pick_repo,$(call repos_for,$1),$1,$2,$3)


