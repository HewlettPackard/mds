/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import java.util.*;
import com.hpl.mds.annotations.*;
import com.hpl.mds.*;
import static com.hpl.mds.MDS.*;

@RecordSchema
@TypeName(name="mds-test-%1$s")
public interface BasketSchema {
  @Final ManagedArray<BasketItem> items();

  static String toString(Basket.Private self) {
    return self.getItems().toString();
  }
	
  static void Basket(Basket.Constructing self,
                     BasketItem[] items)
  {
    self.setItems(BasketItem.TYPE.createArray(items));
  }

  static void purchase(Basket.Private self, RecentPurchases recent) {
    self.purchase(recent, null);
  }

  static void purchase(Basket.Private self, RecentPurchases recent,
                       Pause.Button pause) 
  {
    ManagedArray<BasketItem> items = self.getItems();
    isolated(Options.reportTo(new Trace("purchase")),
             () -> {
        items.forEachInTasks(BasketItem::purchase);
        asTask(() -> {
            System.out.format("Adding basket to recent: %s%n", self);
            recent.note(self);
          });
        Pause.on(pause);
      });
  }

  static void addTo(Basket.Private self, Map<Product, IntHolder> total, int mult) {
    self.getItems()
      .forEachInTasks(item -> {
          Product p = item.getProduct();
          int q = item.getQuantity();
          IntHolder h = total.computeIfAbsent(p, prod -> new IntHolder());
          h.value += mult * q;
          // System.out.format("Total += %d = %d for %s (%s)%n", mult*q, h.value, p, total.get(p));
          // System.out.format("Hash = %d for %s%n", p.hashCode(), p);
        });
  }

}
