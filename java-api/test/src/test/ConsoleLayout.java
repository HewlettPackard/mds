/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import java.util.regex.Pattern;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.apache.log4j.spi.LoggingEvent;

import test.TextStyle.Color;

public class ConsoleLayout extends PatternLayout {
	
	private static final String SEPARATOR = ";";
	private Pattern greenPattern = Pattern.compile("succeeded$");
	private Pattern bluePattern = Pattern.compile("succeeded after retry");
	private Pattern yellowPattern = Pattern.compile("conflict detected, will retry");
	private Pattern redPattern = Pattern.compile("conflict detected, giving up");
	
	public ConsoleLayout() {
		super();
	}
	
	public ConsoleLayout(String layout) {
		super(layout);
	}

	@Override
	public String format(LoggingEvent event) {
		String formated = super.format(event);
		String[] fields = formated.split(SEPARATOR);
		if (fields.length == 7) {
			StringBuffer sb = new StringBuffer();
			sb.append(fields[0]);
			sb.append(SEPARATOR);
			sb.append(fields[1]);
			sb.append(SEPARATOR);
			// set the color for this field
			sb.append(Color.Yellow.fg.bold().format(fields[2]));
			sb.append(SEPARATOR);
			sb.append(fields[3]);
			sb.append(SEPARATOR);
			// look for messages to color them
			sb.append(getColoredMessage(fields[4]));
			sb.append(SEPARATOR);
			sb.append(fields[5]);
			sb.append(SEPARATOR);
			sb.append(fields[6]);
			return sb.toString();
		}
		return formated;
	}

	private String getColoredMessage(String input) {
		if (greenPattern.matcher(input).find()) {
			return Color.Green.bg(Color.Black).format(input);
		} else if (bluePattern.matcher(input).find()) {
			return Color.Blue.bg.format(input);
		} else if (yellowPattern.matcher(input).find()) {
			return Color.Yellow.bg(Color.Black).format(input);
		} else if (redPattern.matcher(input).find()) {
			return Color.Red.bg.format(input);
		}
		return input;
	}
	
	public static void main(String[] args) {
		Logger.getLogger(ConsoleLayout.class).log(Level.TRACE, "succeeded");
	}

}
