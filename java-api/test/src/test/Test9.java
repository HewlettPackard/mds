/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.erk.RandomChoice;
import com.hpl.erk.config.*;
import com.hpl.erk.config.ex.*;
import java.io.*;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import org.apache.log4j.Logger;
import com.hpl.mds.*;
import static com.hpl.mds.MDS.*;

public class Test9 {
  static final Logger log = Logger.getLogger(Test9.class);
  static final RunContext rc = RunContext.GLOBAL.subContext("test9").activate();

  static void trace(String which, Namespace ns, String key) {
    System.out.format("%s = %s%n", which, ns.lookupString(key));
  }

  public static void main(String[] args)
    throws ConfigErrorsSeen
  {
    int n = 10;
    ManagedIntArray array = ManagedInt.TYPE.createArray(n);
    for (int i=0; i<n; i++) {
      array.set(i,i);
    }
    IntHolder holder = new IntHolder();
    Pause.Button button1 = new Pause.Button();
    Pause.Button button2 = new Pause.Button();

    Thread t = new Thread(()->{
        Accumulator.ForInt accum = new Accumulator.ForInt();
        isolated(Options.snapshot(),
                 ()->{
                   for (int i=0; i<n; i++) {
                     int j = i;
                     asTask(()->{
                         int k = array.getInt(j);
                         System.out.format("Adding value %d: %d%n", j, k);
                         accum.add(k);
                       });
                   }
                   asTask(()->{
                       int sum = accum.get();
                       System.out.format("Reading sum: %d%n", sum);
                       holder.value = sum;
                     });
                   button1.press();
                   Pause.on(button2, "after change:");
                 });
      });

    t.start();
    Pause.on(button1, "before change:");
    array.set(5, 0);
    button2.press();
    Pause.untilDone(t);
    System.out.format("Final sum: %d%n", holder.value);
  }
}
