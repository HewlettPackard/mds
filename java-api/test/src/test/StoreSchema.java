/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.mds.annotations.*;
import com.hpl.mds.*;
import static com.hpl.mds.MDS.*;
import java.util.*;
//import java.util.*;

@RecordSchema
@TypeName(name="mds-test-%1$s")
public interface StoreSchema {
  @Final ManagedArray<Department> depts();
  @Final ManagedArray<Product> products();
  @Final ManagedArray<PerishableProduct> perishable();
  @Final RecentPurchases recentPurchases();

  static void Store(Store.Constructing self,
                    Department[] depts,
                    Product[] prods,
                    int windowSize)
  {
    self.setDepts(Department.TYPE.createArray(depts));
    self.setProducts(Product.TYPE.createArray(prods));
    self.setRecentPurchases(RecentPurchases.create.record(windowSize));
    PerishableProduct[] perishable = Arrays.stream(prods)
      .filter(p -> p instanceof PerishableProduct)
      .map(p -> (PerishableProduct)p)
      .toArray(PerishableProduct[]::new);
    self.setPerishable(PerishableProduct.TYPE.createArray(perishable));
  }

  static void purchase(Store.Private self, Basket b) {
    self.purchase(b, null);
  }

  static void purchase(Store.Private self, Basket b, Pause.Button pause) {
    b.purchase(self.getRecentPurchases(), pause);
  }

  static void restock(Store.Private self, ToIntFunction<Product> qfn, Pause.Button pause) {
    isolated(Options.reportTo(new Trace("restock")),
             () -> {
               self.getProducts().forEachInTasks(p -> {
                   int q = qfn.applyAsInt(p);
                   if (q > 0) {
                     p.addStock(q, pause);
                   }
                 });
             });
  }

  static void restock(Store.Private self, ToIntFunction<Product> qfn) {
    self.restock(qfn, null);
  }
  
  static void newDay(Store.Private self) {
    isolated(Options.reportTo(new Trace("newDay")),
             () -> {
               self.getPerishable()
                 .forEachInTasks(PerishableProduct::newDay);
             });
  }

  static void updateRanks(Store.Private self) {
    self.updateRanks(null);
  }

  static void updateRanks(Store.Private self, Pause.Button pause) {
    self.getRecentPurchases().updateRanks(self.getProducts(), pause);
  }

  static Product[] rankedProducts(Store.Private self) {
    ManagedArray<Product> prods = inReadOnlySnapshot(()->self.getProducts());
    Product[] array = prods.stream().toArray(Product[]::new);
    Arrays.sort(array, (p1,p2) -> Integer.compare(p1.getRank(), p2.getRank()));
    return array;
  }

}
