/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.mds.annotations.*;
import static com.hpl.mds.MDS.*;
import com.hpl.mds.*;


@RecordSchema
@TypeName(name="mds-test-%1$s")
public interface PerishableProductSchema extends ProductSchema {
  @Final int shelfLife();
  int oldest();
  int today();
  int wastage();
  @Final ManagedIntArray stockOnHand();


  static void PerishableProduct(PerishableProduct.Constructing self,
                                int num, String name, Department dept,
                                int shelfLife,
                                int initialStock)
  {
    self.superInit(num, name, dept);
    self.setShelfLife(shelfLife);
    ManagedIntArray stock = ManagedArray.ofInt(shelfLife);
    stock.set(0, initialStock);
    self.setStockOnHand(stock);
    self.setOldest(0);
    self.setToday(0);
    self.setWastage(0);
  }

  static void addStock(PerishableProduct.Private self, int n, Pause.Button pause) {
    /*
     * We do this unnecessarily in an isolated block to allow testing
     * of two-level conflicts.  Normally, we would assume that it was
     * called in an isolated block.
     */
    String tag = String.format("Adding to %s: ", self.getName());
    isolated(Options.reportTo(new Trace(tag)),
             () -> {
               System.out.format("Adding %d of %s%n", n, self);
               ManagedIntArray stock = self.getStockOnHand();
               int life = self.getShelfLife();
               int today = self.getToday();
               stock.inc(today%life, n);
               System.out.format("Now %s%n", self);
               Pause.on(pause, String.format("%s: ", tag));
             });
  }

  static int removeStock(PerishableProduct.Private self, int n) {
    /*
     * We need to make sure that it doesn't go below zero.  We could
     * do this in an isolated block here, but we assume it will be
     * part of a larger transaction.
     */
    ManagedIntArray stock = self.getStockOnHand();
    int today = self.getToday();
    int oldest = self.getOldest();
    int life = self.getShelfLife();
    int wanted = n;
    boolean bumped = false;
    while (n > 0) {
      int slot = oldest % life;
      int k = stock.getInt(slot);
      if (k >= n) {
        stock.dec(slot, n);
        n = 0;
        break;
      } else {
        stock.set(slot, 0);
        n -= k;
        if (oldest == today) {
          break;
        }
        oldest++;
        bumped = true;
      }
    }
    if (bumped) {
      self.setOldest(oldest);
    }
    self.incNbrSold(wanted-n);
    return wanted-n;
  }

  static void newDay(PerishableProduct.Private self) {
    int today = self.incToday();
    int oldest = self.getOldest();
    int life = self.getShelfLife();
    if (today%life == oldest%life) {
      /*
       * We've bumped so that we've wrapped around to the oldest.
       */
      ManagedIntArray stock = self.getStockOnHand();
      int wasted = stock.getAndSet(oldest%life, 0);
      self.incWastage(wasted);
      self.incOldest();
    }
  }

  static int inStock(PerishableProduct.Private self) {
    int n = 0;
    ManagedIntArray stock = self.getStockOnHand();
    int k = stock.size();
    for (int i = 0; i<k; i++) {
      n += stock.getInt(i);
    }
    return n;
  }
}
