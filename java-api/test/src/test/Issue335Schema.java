/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.mds.*;
import com.hpl.mds.annotations.*;
import static com.hpl.mds.MDS.*;


@RecordSchema
interface Issue335Schema {

  ManagedString uuid();
  int count();
  float data();
  Issue335 nextIssue335();

  static final Namespace dataNS = Namespace.fromPath("/Issue335NS/objects");
  @Private static final Namespace byUUID = dataNS.resolve("Issue335");
  static final String firstIssue335Key = "firstIssue335";

  static void Issue335(Issue335.Private self, String uuid, int count, float data )
  {
    self.setUuid(uuid);
    self.setCount(count);
    self.setData(data);
    isolated( () -> {
        try {
          self.setNextIssue335(dataNS.lookup(firstIssue335Key, Issue335.TYPE));
        } catch (UnboundNameException e) {
          self.bindName(dataNS, firstIssue335Key);
        }
        self.bindName(dataNS, firstIssue335Key);
      });
    self.bindName(byUUID, uuid);
  }

  @Static
  static Issue335 lookup(Issue335.StaticMethod access, String uuid) {
    return byUUID.lookup(uuid, Issue335.TYPE);
  }

  /*
    @Static
    static boolean exists(String uuid) {
    return byUUID.isBound(uuid);
    }

  */
}
