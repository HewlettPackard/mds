/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.erk.RandomChoice;
import com.hpl.erk.config.*;
import com.hpl.erk.config.ex.*;
import java.io.*;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import org.apache.log4j.Logger;
import com.hpl.mds.*;
import static com.hpl.mds.MDS.*;

public class StatsTest {
  static final Logger log = Logger.getLogger(StatsTest.class);
  static final RunContext rc = RunContext.GLOBAL.subContext("statsTest").activate();

  static void trace(String which, Namespace ns, String key) {
    System.out.format("%s = %s%n", which, ns.lookupString(key));
  }

  public static void main(String[] args)
    throws ConfigErrorsSeen
  {
    double[] vals = {
      79.88608678, 80.29219789, 80.5240289, 80.56072678, 80.42628308,
      79.96311555, 80.03856361, 80.01424327, 79.7425283, 79.6057029,
      79.40124342, 79.64529397, 79.9281353, 79.81454598, 79.60629893,
      79.36954783, 79.35152752, 79.37414719, 79.52905231, 79.43078495,
      79.48205319, 79.26596348, 79.36260299, 79.31549294, 79.34741135,
      79.26677779, 79.2918841, 79.25976929, 79.20255692, 79.2296581,
      79.36799842, 79.58835345, 79.39999595, 79.3905394, 79.23805448,
      79.05819913, 78.93981436, 78.87184197, 78.62718428, 78.54772859,
      78.53217591, 78.56395581, 78.68516571, 78.83242252, 78.85642598,
      78.79251654, 78.69270526, 78.59085111, 78.49396233, 78.49313101,
      78.67253419, 78.75396828, 78.78492721, 78.73738347, 78.61927261,
      78.57911978, 78.59907056, 78.73245148, 78.88403528, 78.89296455,
      78.900263, 78.7627102, 78.60478914, 78.49094097, 78.55704405,
      78.61199729, 78.54025845, 78.46905022, 78.44337381, 78.48160889,
      78.46461695, 78.47632418, 78.48750512, 78.41587995, 78.40574477,
      78.51367356, 78.4929166, 78.52751758, 78.50038611, 78.41646457,
      78.36966738, 78.30624947, 78.29156545, 78.31736468, 78.45344075,
      78.54783265, 78.49554319, 78.53582664, 78.38155352, 78.34865271,
      78.30107452, 78.38574745, 78.51592342, 78.46152818, 78.47112569,
      78.48943849, 78.53926389, 78.59050882, 78.5937886, 78.56216383,
      78.60121342, 78.71868685, 78.76360195, 78.83149689, 78.87199965,
      78.87008096, 78.87316334, 78.82657096, 78.86601732, 78.90646232,
      78.95621528, 79.12803364, 79.56774998, 79.34735914, 79.10146104,
      79.14021069, 79.17710659, 79.16045508, 79.17436218, 79.20422137,
      79.1228151, 79.0081908, 78.95448917, 78.97191291, 79.0802625,
      79.18762347, 79.27492815, 79.25664159, 79.24267155, 79.18697333,
      79.14658066, 79.17559222, 79.25319329, 79.30006812, 79.39362895,
      79.32209426, 79.30420752, 79.30904147, 79.24960993, 79.21000468,
      79.31989406, 79.37149319, 79.39425027, 79.33411146, 79.30519994,
      79.36340901, 79.35853795, 79.40044013, 79.40233008, 79.46857697,
      79.49818663, 79.5039931, 79.49418622, 79.51930228, 79.53691652,
      79.51558425, 79.55204345, 79.57956433, 79.57947964, 79.69010092,
      79.7625279, 79.73416012, 79.72704608, 79.72110658, 79.67441979,
      79.58927986, 79.55290918, 79.48582884, 79.53433875, 79.81545842,
      79.90835631, 79.91438622, 79.90113234, 79.91319474, 79.96569748,
      80.0110354, 80.10827036, 80.27047749, 80.44741589, 80.53073618,
      80.46347574, 80.49704801, 80.66021047, 80.70695815, 80.67014841,
      80.69011423, 80.66501419, 80.66901794, 80.62166695, 80.63526275,
      80.75428784, 80.99003517, 81.03039377, 80.85066328, 80.82155571,
      80.80665011, 80.88607248, 81.0328034, 81.15445727, 81.18709984
    };
    SummaryStatistics s = new SummaryStatistics();
    for (double v : vals) {
      s.add(v);
    }

    System.out.format(" count = %s%n", s.count());
    System.out.format(" sum = %s%n", s.sum());
    System.out.format(" mean = %s%n", s.mean());
    System.out.format(" variance = %s%n", s.variance());
    System.out.format(" stdDeviation = %s%n", s.stdDeviation());
    System.out.format(" stdError = %s%n", s.stdError());
    System.out.format(" high95 = %s%n", s.high95());
    
                      
  }
}
