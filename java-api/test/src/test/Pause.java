/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;
import java.util.concurrent.Semaphore;
import java.time.Duration;

public class Pause {
  static class Button {
    final Semaphore semaphore = new Semaphore(0);
    boolean pressed = false;

    public void waitForPress() throws InterruptedException {
      if (!pressed) {
        semaphore.acquire();
      }
    }

    public void press() {
      pressed = true;
      semaphore.release();
    }
  }

  static void on(Button b, String prefix) {
    if (b != null) {
      try {
        System.out.format("%sPausing%n", prefix);
        b.waitForPress();
        System.out.format("%sBack from pause%n", prefix);
      } catch (InterruptedException ex) {
        System.out.format("%sInterrupted%n", prefix);
      }
    }
  }

  static void on(Button b) {
    on(b, "");
  }

  static void forTime(Duration d, String prefix) {
    if (d != null) {
      boolean announceBack = prefix != null;
      if (!announceBack) {
        prefix = "";
      }
      try {
        System.out.format("%sPausing for %s%n", prefix, d);
        Thread.sleep(d.toMillis());
        if (announceBack) {
          System.out.format("%Back from %s pause%n", prefix, d);
        }
      } catch (InterruptedException ex) {
        System.out.format("%s%s pause interrupted%n", prefix, d);
      }
    }
  }
  
  static void forTime(Duration d) {
    forTime(d, null);
  }

  static void forSeconds(int n, String prefix) {
    forTime(Duration.ofSeconds(n), prefix);
  }

  static void forSeconds(int n) {
    forSeconds(n, null);
  }

  static void untilDone(Thread t) {
    try {
      t.join();
    } catch (InterruptedException ex) {
    }
  }
}
