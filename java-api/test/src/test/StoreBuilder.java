/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.mds.*;
import com.hpl.erk.util.*;
import java.util.*;

public class StoreBuilder {
  private Map<String, Department> deptMap = new HashMap<>();
  private List<Department> depts = new ArrayList<>();
  private List<Product> prods = new ArrayList<>();
  private int windowSize = 10;

  public Store build() {
    return Store.create.record(CollUtils.arrayFrom(depts, Department.class),
                               CollUtils.arrayFrom(prods, Product.class),
                               windowSize);
  }

  private Department createDept(String name) {
    int i = deptMap.size();
    Department d = Department.create.record(i, name);
    depts.add(d);
    return d;
  }

  public NonPerishableProduct addNonPerishable(String dname, String pname, int initial)
  {
    Department dept = deptMap.computeIfAbsent(dname, this::createDept);
    NonPerishableProduct prod = NonPerishableProduct.create.record(prods.size(), pname,
                                                                   dept, initial);
    prods.add(prod);
    return prod;
  }

  public PerishableProduct addPerishable(String dname, String pname, int life, int initial)
  {
    Department dept = deptMap.computeIfAbsent(dname, this::createDept);
    PerishableProduct prod = PerishableProduct.create.record(prods.size(), pname,
                                                             dept, life, initial);
    prods.add(prod);
    return prod;
  }

  public void setWindowSize(int n) {
    windowSize = n;
  }
}
