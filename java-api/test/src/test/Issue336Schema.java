/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.mds.*;
import com.hpl.mds.annotations.*;
import static com.hpl.mds.MDS.*;


@RecordSchema
interface Issue336Schema {

  static final int primConst = 5;
  static final String publicConst = "Public";
  @Protected static final String protectedConst = "Protected";
  @Private  static final String privateConst = "Private";
  static final Number nonMDS = 10;

  static void useConstants(Issue336.Private self) {
    System.out.println(Issue336.publicConst);
    System.out.println(self.publicConst);
    System.out.println(self.protectedConst);
    System.out.println(self.privateConst);
    System.out.println(Issue336.classAs(self).publicConst);
    System.out.println(Issue336.classAs(self).protectedConst);
    System.out.println(Issue336.classAs(self).privateConst);
    Issue336.publicStatic();
    // self.publicStatic();
    // self.protectedStatic();
    // self.privateStatic();
    Issue336.classAs(self).publicStatic();
    Issue336.classAs(self).protectedStatic();
    Issue336.classAs(self).privateStatic();
  }

  @Static
  static void publicStatic(Issue336.StaticMethod access) {
    System.out.println(access.publicConst);
    System.out.println(access.protectedConst);
    System.out.println(access.privateConst);
    System.out.println(Issue336.classAs(access).publicConst);
    System.out.println(Issue336.classAs(access).protectedConst);
    System.out.println(Issue336.classAs(access).privateConst);
    access.publicStatic();
    access.protectedStatic();
    access.privateStatic();
    Issue336.classAs(access).publicStatic();
    Issue336.classAs(access).protectedStatic();
    Issue336.classAs(access).privateStatic();
  }

  @Protected @Static
  static void protectedStatic(Issue336.StaticMethod access) {
  }

  @Private @Static
  static void privateStatic(Issue336.StaticMethod access) {
  }

}
