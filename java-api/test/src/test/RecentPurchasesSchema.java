/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.mds.annotations.*;
import com.hpl.mds.*;
import static com.hpl.mds.MDS.*;
import com.hpl.erk.util.*;
import java.util.*;
import java.util.stream.*;

@RecordSchema
@TypeName(name="mds-test-%1$s")
public interface RecentPurchasesSchema {
  @Final ManagedArray<Basket> purchases();
  int nextPurchase();
  @Final int windowSize();

  static void RecentPurchases(RecentPurchases.Constructing self, int windowSize)
  {
    self.setWindowSize(windowSize);
    self.setPurchases(Basket.TYPE.createArray(windowSize));
    self.setNextPurchase(0);
  }

  static void note(RecentPurchases.Private self, Basket b) {
    /*
     * This needs to be done transactionally.  We assume it is being
     * done inside an isolation block in Basket.purchase().
     */
    // System.out.format("Noted: %s%n", b);
    int i = self.getAndIncNextPurchase();
    if (i == self.getWindowSize()-1) {
      self.setNextPurchase(0);
    }
    System.out.format("Recent[%d] = %s%n", i, b);
    self.getPurchases().set(i, b);
  }

  static void updateRanks(RecentPurchases.Private self,
                          ManagedArray<Product> products)
  {
    self.updateRanks(products, null);
  }

  static void updateRanks(RecentPurchases.Private self,
                          ManagedArray<Product> products,
                          Pause.Button pause)
  {
    ManagedArray<Basket> array = self.getPurchases();
    Map<Product, IntHolder> total = new HashMap<>();
    ToIntFunction<Product> lookup = p -> {
      IntHolder h = total.get(p);
      return h == null ? 0 : h.value;
    };
    
    isolated(Options.snapshot()
             .reportTo(new Trace("update")),
             () -> {
               System.out.format("In snapshot%n");
               Pause.on(pause);
               System.out.format("Outside task %s%n", Task.current());

               List<TaskComputed<Basket>> tcs = array.indexStream()
                 .mapToObj(i -> Task.computedValue((Basket old) -> {
                       System.out.format("Basket task %s%n", Task.current());
                       Basket b = array.get(i);
                       if (b != null) {
                         System.out.format("Basket: %s%n", b);
                       }
                       if (old != null) {
                         old.addTo(total, -1);
                       }
                       if (b != null) {
                         b.addTo(total, 1);
                       }
                       return b;
                     }))
                 .collect(Collectors.toList());
               asTask(() -> {
                   System.out.format("Sort task %s%n", Task.current());
                   // System.out.format("total = %s%n", total);
                   /*
                    * We touch each of the tcs to ensure that this task is
                    * dependent on all products.
                    */
                   tcs.forEach(TaskComputed::get);
                   Product[] sorted = products.stream()
                     .sorted((p1, p2) -> Integer.compare(lookup.applyAsInt(p2),
                                                         lookup.applyAsInt(p1)))
                     .toArray(Product[]::new);
                   // System.out.format("Products: %s%n", Arrays.toString(sorted));
                   int n = sorted.length;
                   for (int i=0; i<n; i++) {
                     Product p = sorted[i];
                     // System.out.format("product %,d: %s%n", i, p);
                     p.setRank(i);
                   }
                 });
        
             });
  }

}
