/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package test;

import com.hpl.erk.RandomChoice;
import com.hpl.erk.config.*;
import com.hpl.erk.config.ex.*;
import com.hpl.mds.*;
import java.io.*;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import org.apache.log4j.Logger;
import static com.hpl.mds.MDS.*;

public class Trace implements PublishReport {
  static final Logger log = Logger.getLogger(Trace.class);

  enum State { Reset, Running, Resolving, Succeeded, Failed }; 

  final String prefix;
  State state = State.Reset;
  int nRuns = 0;
  int nResolves = 0;
  

  Trace(String p) {
    if (p == null || p.isEmpty()) {
      prefix = "";
    } else {
      prefix = p+": ";
    }
  }

  @Override
  public boolean succeeded() {
    return state == State.Reset;
  }

  @Override
  public void reset() {
    state = State.Reset;
    nRuns = 0;
  }

  @Override
  public void beforeRun(IsolationContext ctxt) {
    String ss = ctxt.isSnapshot() ? "snapshot " : "";
    if (nRuns++ == 0) {
      System.out.format("%sIsolated in %scontext %s%n", prefix, ss, ctxt);
    } else {
      if (state == State.Resolving) {
        System.out.format("%sResolution failed after attempt %,d%n",
                          prefix, nResolves);
      } else {
        System.out.format("%sPublish failed%n", prefix);
      }
      System.out.format("%sRerun %,d in %scontext %s%n", prefix, nRuns, ss, ctxt);
    }
    state = State.Running;
    nResolves = 0;
  }

  @Override
  public void beforeResolve(Task[] tasks) {
    System.out.format("%sPublish failed%n", prefix);
    System.out.format("%sResolving, attempt %,d, tasks = %s%n",
                      prefix, ++nResolves, Arrays.toString(tasks));
    state = State.Resolving;
  }

  @Override
  public void noteSuccess() {
    System.out.format("%sPublish succeeded%n", prefix);
    state = State.Succeeded;
  }

  @Override
  public void noteFailure() {
    System.out.format("%sGiving up%n", prefix);
    state = State.Failed;
  }
}
