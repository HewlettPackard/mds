/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import com.hpl.mds.impl.AccumImpl;

import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.Supplier;

public interface Accumulator<A> {
  static <A> Accumulator<A> create(Supplier<? extends A> creator,
                                   BiConsumer<? super A, ? super A> rollbackFunc,
                                   int expectedTasks)
  {
    return AccumImpl.create(creator, rollbackFunc, expectedTasks);
  }

  static <A> Accumulator<A> create(Supplier<? extends A> creator,
                                   BiConsumer<? super A, ? super A> rollbackFunc)
  {
    return AccumImpl.create(creator, rollbackFunc);
  }

  void add(Consumer<? super A> adder);
  A get();

default
  <T> T get(Function<? super A, ? extends T> func) {
    return func.apply(get());
  }

  static class ForInt {
    final Accumulator<IntHolder> accum = Accumulator.create(IntHolder::new,
                                                            (h,rb)->{
                                                              h.value -= rb.value;
                                                            });
    public void add(int n) {
      accum.add(h->h.value+=n);
    }
    public void add() {
      add(1);
    }
    public int get() {
      return accum.get(h->h.value);
    }
  }
  static class ForLong {
    final Accumulator<LongHolder> accum = Accumulator.create(LongHolder::new,
                                                             (h,rb)->{
                                                               h.value -= rb.value;
                                                             });
    public void add(long n) {
      accum.add(h->h.value+=n);
    }
    public void add() {
      add(1);
    }
    public long get() {
      return accum.get(h->h.value);
    }
  }
  static class ForDouble {
    final Accumulator<DoubleHolder> accum = Accumulator.create(DoubleHolder::new,
                                                               (h,rb)->{
                                                                 h.value -= rb.value;
                                                               });
    public void add(double n) {
      accum.add(h->h.value+=n);
    }
    public void add() {
      add(1);
    }
    public double get() {
      return accum.get(h->h.value);
    }
  }
  static class ForFloat {
    final Accumulator<FloatHolder> accum = Accumulator.create(FloatHolder::new,
                                                              (h,rb)->{
                                                                h.value -= rb.value;
                                                              });
    public void add(float n) {
      accum.add(h->h.value+=n);
    }
    public void add() {
      add(1);
    }
    public float get() {
      return accum.get(h->h.value);
    }
  }
}
