/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import com.hpl.mds.impl.Stub;
import com.hpl.mds.tuple.Managed10ple;
import com.hpl.mds.tuple.Managed4ple;
import com.hpl.mds.tuple.Managed5ple;
import com.hpl.mds.tuple.Managed6ple;
import com.hpl.mds.tuple.Managed7ple;
import com.hpl.mds.tuple.Managed8ple;
import com.hpl.mds.tuple.Managed9ple;
import com.hpl.mds.tuple.ManagedPair;
import com.hpl.mds.tuple.ManagedSingle;
import com.hpl.mds.tuple.ManagedTriple;


public abstract class ManagedTuple implements ManagedValue {
  public ManagedType<?> type() {
    return Stub.notImplemented();
  };
  @Override
  public ManagedTuple bindName(Prior prior, Namespace ns, CharSequence name) {
    return Stub.notImplemented();
  }
  @Override
  public boolean isSameAs(ManagedObject other) {
    return Stub.notImplemented();
  }
  public static <T1> ManagedSingle<T1> of(T1 v1) {
    return new ManagedSingle<>(v1);
  }
  public static <T1,T2> ManagedPair<T1,T2> of(T1 v1, T2 v2) {
    return new ManagedPair<>(v1,v2);
  }
  public static <T1,T2,T3> ManagedTriple<T1,T2, T3> of(T1 v1, T2 v2, T3 v3) {
    return new ManagedTriple<>(v1,v2,v3);
  }
  public static <T1,T2,T3,T4> 
  Managed4ple<T1,T2,T3,T4> of(T1 v1, T2 v2, T3 v3, T4 v4) {
    return new Managed4ple<>(v1,v2,v3,v4);
  }
  public static <T1,T2,T3,T4,T5> 
  Managed5ple<T1,T2,T3,T4,T5> of(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) {
    return new Managed5ple<>(v1,v2,v3,v4,v5);
  }
  public static <T1,T2,T3,T4,T5,T6> 
  Managed6ple<T1,T2,T3,T4,T5,T6> of(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) {
    return new Managed6ple<>(v1,v2,v3,v4,v5,v6);
  }
  public static <T1,T2,T3,T4,T5,T6,T7> 
  Managed7ple<T1,T2,T3,T4,T5,T6,T7> of(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,
                                  T6 v6, T7 v7) {
    return new Managed7ple<>(v1,v2,v3,v4,v5,v6,v7);
  }
  public static <T1,T2,T3,T4,T5,T6,T7,T8> 
  Managed8ple<T1,T2,T3,T4,T5,T6,T7,T8> of(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,
                                     T6 v6, T7 v7, T8 v8) {
    return new Managed8ple<>(v1,v2,v3,v4,v5,v6,v7,v8);
  }
  public static <T1,T2,T3,T4,T5,T6,T7,T8,T9> 
  Managed9ple<T1,T2,T3,T4,T5,T6,T7,T8,T9> of(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,
                                        T6 v6, T7 v7, T8 v8, T9 v9) {
    return new Managed9ple<>(v1,v2,v3,v4,v5,v6,v7,v8,v9);
  }
  public static <T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> 
  Managed10ple<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> of(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,
                                             T6 v6, T7 v7, T8 v8, T9 v9, T10 v10) {
    return new Managed10ple<>(v1,v2,v3,v4,v5,v6,v7,v8,v9,v10);
  }
  
}
