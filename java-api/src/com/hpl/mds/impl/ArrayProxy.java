/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.impl;

import java.util.Iterator;
import java.util.Objects;

import com.hpl.mds.*;

public abstract class ArrayProxy<ET extends ManagedObject> extends Proxy implements ManagedArray<ET> {
	protected long size = -1;
  
  protected ArrayProxy(long handle, long size) {
    super(handle, null);
    this.size = size;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    } else if (o == null) {
      return false;
    } else if (!(o instanceof ManagedComposite)) {
      return false;
    }
    return isSameViewOfSameObject((ManagedComposite)o);
  }
	
	@Override
	public Iterator<ET> iterator() {
		final long s = longSize();
		return new Iterator<ET>() {
			long i = 0;
			@Override
			public boolean hasNext() {
				return i<s;
			}
			@Override
			public ET next() {
				return get(i++);
			}
		};
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		String sep = "[";
		for (ET elt : this) {
	        sb.append(sep);
	        sb.append(elt == null ? "null" : elt.toString());
	        sep = ", ";
		}
		sb.append("]");
		return sb.toString();
	}
	

}
