/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.impl;

import com.hpl.mds.*;

public class NamespaceProxy extends Proxy implements Namespace {
	
  private static final NativeLibraryLoader NATIVE_LIB_LOADER = NativeLibraryLoader.getInstance();
  
  private static NamespaceProxy ROOT = new NamespaceProxy(rootHandle(), HNameImpl.root());
  
  private static native void release(long h);
  private static native long rootHandle();
  private static native long childHandle(long h, long nameHandle, boolean createIfMissing);
  private static native boolean isBound(long h,long nameHandle);
  
  private final HNameImpl path;
  
  private NamespaceProxy(long handle, HNameImpl path) {
    super(handle, null);
    this.path = path;
  }

  public static Namespace root() {
    return ROOT;
  }
  
  static NamespaceProxy downcast(Namespace ns) {
    return (NamespaceProxy)ns;
  }
  
  /**
   * @throws NotANamespaceException if the extension bumps into something that
   * isn't a namespace
   */
  @Override
  public Namespace childNamespace(CharSequence name) {
    ManagedStringProxy np = ManagedStringProxy.valueOf(name);
    boolean createIfMissing = true;
    HNameImpl childPath = path.append(np);
    try {
    	long childHandle = childHandle(handleIndex_, np.handleIndex(), createIfMissing);
    	return new NamespaceProxy(childHandle, childPath);
    } catch (NotANamespaceException ex) {
    	ex.setData(this, np, childPath);
    	throw ex;
    }
  }
  
  @Override
  public HNameImpl getPath() {
    return path;
  }
  @Override
  public boolean isBound(CharSequence name, Prior prior) {
    return isBound(handleIndex_, ManagedStringProxy.valueOf(name).handleIndex());
  }
  @Override
  public <T extends ManagedObject> T bind(CharSequence name, T obj, Prior prior) {
	  @SuppressWarnings("unchecked")
	T val = (T)obj.bindName(prior, this, name);
    return val;
  }
  @Override
  public byte bind(CharSequence name, byte v, Prior prior) {
	  return ManagedByteType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public short bind(CharSequence name, short v, Prior prior) {
	  return ManagedShortType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public int bind(CharSequence name, int v, Prior prior) {
	  return ManagedIntType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public long bind(CharSequence name, long v, Prior prior) {
	  return ManagedLongType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public float bind(CharSequence name, float v, Prior prior) {
	  return ManagedFloatType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public double bind(CharSequence name, double v, Prior prior) {
	  return ManagedDoubleType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public boolean bind(CharSequence name, boolean v, Prior prior) {
	  return ManagedBooleanType.INSTANCE.bindIn(this, name, v);
  }
  @Override
  public String bind(CharSequence name, CharSequence v, Prior prior) {
	  ManagedString s = ManagedStringProxy.valueOf(v).bindName(prior, this, name);
	  return s == null ? null : s.asString();
  }
  @Override
  public void unbind(CharSequence name, Prior prior) {
	  Stub.notImplemented();
  }
  @Override
  public boolean unbind(CharSequence name) {
	  return Stub.notImplemented();
  }
  
  @Override
  void releaseHandleIndex(long index) {
    release(index);
  }

}
