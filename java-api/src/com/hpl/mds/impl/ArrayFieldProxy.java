/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.mds.impl;

import com.hpl.mds.*;

public abstract class ArrayFieldProxy<RT extends ManagedRecord, ET extends ManagedObject> extends FieldProxy<RT, ManagedArray<ET>> implements ArrayField<RT,ET> {

  private static final NativeLibraryLoader NATIVE_LIB_LOADER = NativeLibraryLoader.getInstance();
  
  protected ArrayFieldProxy(long handleIndex, RecordTypeProxy<RT> recType, ManagedStringProxy name) {
    super(handleIndex, recType, name);
  }
  
  private static native void release(long handle);
  private static native long getNameHandle(long handle);
  private static native long getRecTypeHandle(long handle);
  
  
  @Override
  void releaseHandleIndex(long index) {
    release(index);
  }
  
  @Override
  public ManagedStringProxy name() {
    if (name_ == null) {
      name_ = ManagedStringProxy.fromHandle(getNameHandle(handleIndex_));
    }
    return name_;
  }



  @Override
  public RecordType<RT> recordType() {
    if (recordType_ == null) {
      recordType_ = RecordTypeProxy.<RT>fromHandle(getRecTypeHandle(handleIndex_));
    }
    return recordType_;
  }
  
  static interface CreateFieldHandleFunction {
    long createHandle(long recTypeHandle, long nameHandle);
  }
  
  static interface CreateFieldProxyFunction<RT extends ManagedRecord, ET extends ManagedObject> {
    ArrayFieldProxy<RT,ET> createProxy(long handle, RecordTypeProxy<RT> recType, ManagedStringProxy name); 
  }
  
  static <RT extends ManagedRecord, ET extends ManagedObject> ArrayFieldProxy<RT,ET> 
  in(RecordType<RT> recType, CharSequence name, 
     CreateFieldHandleFunction cfh, 
     CreateFieldProxyFunction<RT, ET> cfp) 
  {
      final RecordTypeProxy<RT> rtp = RecordTypeProxy.downcast(recType);
      final ManagedStringProxy msn = ManagedStringProxy.valueOf(name);
      long handle = cfh.createHandle(rtp.handleIndex(), msn.handleIndex());
      ArrayFieldProxy<RT,ET> rfp = cfp.createProxy(handle, rtp, msn);
      return rfp;
  }
    
    
}
