/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.impl;

import java.util.function.Consumer;;
import java.util.function.Predicate;;
import java.util.function.BooleanSupplier;;
import java.util.Collection;

import com.hpl.mds.*;


abstract public class TaskOptionImpl implements TaskOption {
  public static final TaskOptionImpl BASE = new TaskOptionImpl(null) {
      @Override
      TaskOptionImpl asNext() {
        return null;
      }

      @Override void applyTo(Task task) {}
    };

  final TaskOptionImpl next;

  abstract void applyTo(Task task);
  
  TaskOptionImpl(TaskOptionImpl next) {
    this.next = next;
  }

  TaskOptionImpl asNext() {
    return this;
  }

  void applyChainTo(Task task) {
    for (TaskOptionImpl opt = this; opt != null; opt = opt.next) {
      opt.applyTo(task);
    }
  }

  @Override
  public TaskOption alwaysRedo() {
    return new TaskOptionImpl(asNext()) {
      @Override
      void applyTo(Task task) {
        task.alwaysRedo();
      }
    };
  }

  @Override
  public TaskOption cannotRedo() {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.cannotRedo();
      }
    };
  }

  @Override
  public TaskOption dependsOn(Collection<? extends Task> tasks) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.dependsOn(tasks);
      }
    };
  }

  @Override
  public TaskOption dependsOn(Task... tasks) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.dependsOn(tasks);
      }
    };
  }

  @Override
  public TaskOption onPrepareForRedo(Consumer<? super TaskProxy> fn) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.onPrepareForRedo(fn);
      }
    };
  }

  @Override
  public TaskOption onPrepareForRedo(Predicate<? super TaskProxy> fn) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.onPrepareForRedo(fn);
      }
    };
  }


  @Override
  public TaskOption onPrepareForRedo(BooleanSupplier fn) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.onPrepareForRedo(fn);
      }
    };
  }

  @Override
  public TaskOption onPrepareForRedo(Runnable fn) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        task.onPrepareForRedo(fn);
      }
    };
  }


  @Override
  public TaskOption and(Consumer<? super Task> fn) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        fn.accept(task);
      }
    };
  }

  @Override
  public TaskOption and(TaskOption other) {
    return new TaskOptionImpl(asNext()) {
      @Override void applyTo(Task task) {
        ((TaskOptionImpl)other).applyChainTo(task);
      }
    };
  }

  

}
