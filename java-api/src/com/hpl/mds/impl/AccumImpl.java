/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.impl;

import com.hpl.mds.*;

import com.hpl.erk.util.CollUtils;

//import java.util.Set;
import java.util.Map;
//import java.util.HashSet;
import java.util.WeakHashMap;

import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.Supplier;

public class AccumImpl<A> implements Accumulator<A> {
  final static TaskProxy topLevelTask = IsoContextProxy.global().topLevelTask();
  final BiConsumer<? super A, ? super A> rollbackFunc;
  final Supplier<? extends A> creator;
  final Node topLevel;
  final Map<TaskProxy,Node> forTask;
  final Map<TaskProxy,Boolean> writers;
  
  class Node {
    A weight = creator.get();
    final Node parent;
    // Set<Node> children = null;
    boolean adderp = false;

    Node(Node parent) {
      this.parent = parent;
      // if (parent != null) {
      //   parent.addChild(this);
      // }
    }

    // private void addChild(Node child) {
    //   if (children == null) {
    //     children = new HashSet<>();
    //   }
    //   children.add(child);
    // }

    void rollBack() {
      for (Node n = parent; n != null; n=n.parent) {
        rollbackFunc.accept(n.weight, weight);
      }
      // parent.children.remove(this);
    }
  }

  
  public static <A> AccumImpl<A> create(Supplier<? extends A> creator,
                                        BiConsumer<? super A, ? super A> rollbackFunc,
                                        int expectedTasks)
  {
    return new AccumImpl<>(creator, rollbackFunc, expectedTasks);
  }
  
  public static <A> AccumImpl<A> create(Supplier<? extends A> creator,
                                        BiConsumer<? super A, ? super A> rollbackFunc)
  {
    return AccumImpl.create(creator, rollbackFunc, 16);
  }

  private AccumImpl(Supplier<? extends A> creator,
                    BiConsumer<? super A, ? super A> rollbackFunc,
                    int expectedTasks)
  {
    this.creator = creator;
    this.rollbackFunc = rollbackFunc;
    topLevel = new Node(null);
    forTask = new WeakHashMap<>(expectedTasks);
    writers = new WeakHashMap<>(expectedTasks);
    forTask.put(topLevelTask, topLevel);
  }

  @Override
  public synchronized A get() {
    TaskProxy ct = TaskProxy.current();
    for (TaskProxy t : writers.keySet()) {
      ct.dependsOn(t);
    }
    return topLevel.weight;
  }

  @Override
  public synchronized void add(Consumer<? super A> adder) {
    TaskProxy ct = TaskProxy.current();
    writers.put(ct, Boolean.TRUE);
    for (Node n = nodeFor(ct); n != null; n=n.parent) {
      adder.accept(n.weight);
    }
  }

  private Node nodeFor(TaskProxy task) {
    /*
     * The JavaDoc implementation requirements for computeIfAbsent()
     * appear to guarantee that it works even if the function modifies
     * the map.
     *
     * TODO: This assumes that the task is under the top-level task.
     * If not, we'll eventually get a null pointer exception.  This
     * won't work if the accumulator is added to after the top-level
     * task publishes, so we need to make sure that this isn't called
     * if that's the case.
     */
    // System.out.format("Accum: looking up %s%n", task);
    return forTask.computeIfAbsent(task, t->{
        TaskProxy parent = t.getParent();
        if (parent == null) {
          parent = t.getContext().parent().topLevelTask();
        }
        // System.out.format("Accum: creating node for %s (%s)%n", task, parent);
        
        Node n = new Node(nodeFor(parent));
        t.onPrepareForRedo(()->n.rollBack());
        return n;
      });
  }
}
