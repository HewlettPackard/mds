/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import java.time.Duration;
import java.time.Instant;
import java.util.function.BooleanSupplier;
import java.util.function.Supplier;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.Collection;

import com.hpl.mds.impl.PubOptionImpl;
import com.hpl.mds.impl.TaskProxy;
import com.hpl.mds.IsolationContext.ViewType;
import com.hpl.mds.IsolationContext.ModificationType;;


public interface Options {
  static PubOption reRunIf(Supplier<BooleanSupplier> gen) {
    return PubOption.defaultOpts().reRunIf(gen);
  }
  static PubOption reRunIf(BooleanSupplier test) {
    return PubOption.defaultOpts().reRunIf(test);
  }
  static PubOption alwaysReRun() {
    return PubOption.defaultOpts().alwaysReRun();
  }
  static PubOption neverReRun() {
    return PubOption.defaultOpts().neverReRun();
  }
  static PubOption reRunNTimes(int n) {
    return PubOption.defaultOpts().reRunNTimes(n);
  }
  static PubOption reRunFor(Duration time) {
    return PubOption.defaultOpts().reRunFor(time);
  }
  static PubOption reRunUntil(Instant time) {
    return PubOption.defaultOpts().reRunUntil(time);
  }

  static PubOption resolveIf(Supplier<Predicate<PubResult>> gen) {
    return PubOption.defaultOpts().resolveIf(gen);
  }
  static PubOption resolveIf(Predicate<PubResult> test) {
    return PubOption.defaultOpts().resolveIf(test);
  }
  static PubOption alwaysResolve() {
    return PubOption.defaultOpts().alwaysResolve();
  }
  static PubOption neverResolve() {
    return PubOption.defaultOpts().neverResolve();
  }
  static PubOption resolveNTimes(int n) {
    return PubOption.defaultOpts().resolveNTimes(n);
  }
  static PubOption resolveFor(Duration time) {
    return PubOption.defaultOpts().resolveFor(time);
  }
  static PubOption resolveUntil(Instant time) {
    return PubOption.defaultOpts().resolveUntil(time);
  }

  static PubOption reportTo(PublishReport report) {
    return PubOption.defaultOpts().reportTo(report);
  }

  static PubOption as(ViewType vt, ModificationType mt) {
    return PubOption.defaultOpts().as(vt, mt);
  }
  
  static PubOption as(ViewType vt) {
    return PubOption.defaultOpts().as(vt);
  }
  static PubOption live() {
    return PubOption.defaultOpts().live();
  }
  static PubOption snapshot() {
    return PubOption.defaultOpts().snapshot();
  }

  static PubOption as(ModificationType mt) {
    return PubOption.defaultOpts().as(mt);
  }
  static PubOption publishable() {
    return PubOption.defaultOpts().publishable();
  }
  static PubOption detached() {
    return PubOption.defaultOpts().detached();
  }
  static PubOption readOnly() {
    return PubOption.defaultOpts().readOnly();
  }

  static PubOption publishableLive() {
    return PubOption.defaultOpts().publishableLive();
  }
  static PubOption detachedLive() {
    return PubOption.defaultOpts().detachedLive();
  }
  static PubOption readOnlyLive() {
    return PubOption.defaultOpts().readOnlyLive();
  }

  static PubOption publishableSnapshot() {
    return PubOption.defaultOpts().publishableSnapshot();
  }
  static PubOption detachedSnapshot() {
    return PubOption.defaultOpts().detachedSnapshot();
  }
  static PubOption readOnlySnapshot() {
    return PubOption.defaultOpts().readOnlySnapshot();
  }

  static TaskOption alwaysRedo() {
    return TaskOption.defaultOpts().alwaysRedo();
  }
  
  static TaskOption cannotRedo() {
    return TaskOption.defaultOpts().cannotRedo();
  }

  static TaskOption dependsOn(Collection<? extends Task> tasks) {
    return TaskOption.defaultOpts().dependsOn(tasks);
  }
   
  static TaskOption dependsOn(Task...tasks) {
    return TaskOption.defaultOpts().dependsOn(tasks);
  }

  static TaskOption onPrepareForRedo(Consumer<? super Task> fn) {
    return TaskOption.defaultOpts().onPrepareForRedo(fn);
  }

  static TaskOption onPrepareForRedo(Predicate<? super Task> fn) {
    return TaskOption.defaultOpts().onPrepareForRedo(fn);
  }

  static TaskOption onPrepareForRedo(BooleanSupplier fn) {
    return TaskOption.defaultOpts().onPrepareForRedo(fn);
  }

  static TaskOption onPrepareForRedo(Runnable fn) {
    return TaskOption.defaultOpts().onPrepareForRedo(fn);
  }

  static TaskOption forTask(Consumer<? super Task> fn) {
    return TaskOption.defaultOpts().and(fn);
  }
}


