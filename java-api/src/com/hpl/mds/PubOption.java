/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import java.time.Duration;
import java.time.Instant;
import java.util.function.BooleanSupplier;
import java.util.function.Supplier;
import java.util.function.Predicate;

import com.hpl.mds.impl.PubOptionImpl;
import com.hpl.mds.IsolationContext.ViewType;
import com.hpl.mds.IsolationContext.ModificationType;;


public interface PubOption {
  PubOption reRunIf(Supplier<BooleanSupplier> gen);
  PubOption reRunIf(BooleanSupplier test);
  PubOption alwaysReRun();
  PubOption neverReRun();
  PubOption reRunNTimes(int n);
  PubOption reRunFor(Duration time);
  PubOption reRunUntil(Instant time);

  PubOption resolveIf(Supplier<Predicate<PubResult>> gen);
  PubOption resolveIf(Predicate<PubResult> test);
  PubOption alwaysResolve();
  PubOption neverResolve();
  PubOption resolveNTimes(int n);
  PubOption resolveFor(Duration time);
  PubOption resolveUntil(Instant time);

  PubOption reportTo(PublishReport report);

  PubOption as(ViewType vt, ModificationType mt);

default PubOption as(ViewType vt) { return as(vt, null); }
default PubOption live() { return as(ViewType.Live); }
default PubOption snapshot() { return as(ViewType.Snapshot); }

default PubOption as(ModificationType mt) { return as(null, mt); }
default PubOption publishable() { return as(ModificationType.Full); }
default PubOption detached() { return as(ModificationType.Detached); }
default PubOption readOnly() { return as(ModificationType.ReadOnly); }

default PubOption publishableLive() {
  return as(ViewType.Live, ModificationType.Full);
}
default PubOption detachedLive() {
  return as(ViewType.Live, ModificationType.Detached);
}
default PubOption readOnlyLive(){
  return as(ViewType.Live, ModificationType.ReadOnly);
}

default PubOption publishableSnapshot() {
  return as(ViewType.Snapshot, ModificationType.Full);
}
default PubOption detachedSnapshot() {
  return as(ViewType.Snapshot, ModificationType.Detached);
}
default PubOption readOnlySnapshot() {
  return as(ViewType.Snapshot, ModificationType.ReadOnly);
}

  PubOption and(PubOption other);
  
  static PubOption defaultOpts() {
    return PubOptionImpl.BASE;
  }
  
}
