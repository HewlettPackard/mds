/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "usage.stg"
import "type.stg"
import "covariant.stg"
package() ::= "com.hpl.mds"
class() ::= "ManagedMap"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

contents(prims, masked, types) ::= <<
package $package()$;

import java.util.Map;
import java.util.function.Function;

import com.hpl.mds.usage.Operation;
import com.hpl.mds.usage.UsageBase;

import com.hpl.mds.impl.Stub;

public interface ManagedMap<K extends ManagedObject, V extends ManagedObject> 
extends ManagedContainer, Map<K,V> {
$masked: { type |
   static final ManagedStringTo$type.shortName$Map.Type FROM_STRING_TO_$type.shortUpper$_TYPE = ManagedStringTo$type.shortName$Map.TYPE;
} 
$

  static final Operation<ForManagedMap> ITERATE_KEYS = Stub.notImplemented();
  static final Operation<ForManagedMap> ITERATE_VALUES = Stub.notImplemented();
  static final Operation<ForManagedMap> ADD_NEW = Stub.notImplemented();
  static final Operation<ForManagedMap> REPLACE_OLD = Stub.notImplemented();
  static final Operation<ForManagedMap> DELETE = Stub.notImplemented();
  static final Operation<ForManagedMap> LOOKUP_MISSING = Stub.notImplemented();
  
  $type("ManagedMap", ["K", "V"], ["ManagedObject", "ManagedObject"], [], [], 
        ["ManagedContainer"], {
ManagedType<K> keyType();
ManagedType<V> valueType();

@Override
<RT extends ManagedRecord> MapField<RT,K,V> fieldIn(RecordType<RT> recType, CharSequence name);
@Override
<RT extends ManagedRecord> MapField<RT,K,V> findFieldIn(RecordType<RT> recType, CharSequence name);
},[])$
  
  
  $mapUsage("ManagedMap", "<K,V>", "ManagedContainer", ["ManagedContainer"])$
  
  $covariant({ManagedMap}, [{K},{V}], [{ManagedObject},{ManagedObject}], {Map<K,V>}, {map})$
  
  

  static <K extends ManagedObject, V extends ManagedObject> 
  Type<K,V> typeMapping(ManagedType<K> keyType, ManagedType<V> valType) {
    return valType.inMapFrom(keyType);
  }

  static <V extends ManagedObject> 
  ManagedMapFromString.Type<V> typeMapping(ManagedString.Type keyType, ManagedType<V> valType) {
    return valType.inMapFromString();
  }

$masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$.Type<K> typeMapping(ManagedType<K> keyType, $type.managedName$.Type valType) {
    return valType.inMapFrom(keyType);
  \}
} 
$
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$.Type<K> typeMappingTo$type.shortName$(ManagedType<K> keyType) {
    return $type.managedName$.TYPE.inMapFrom(keyType);
  \}
} 
$
  
  static <V extends ManagedObject> 
  ManagedMapFromString.Type<V> typeMappingStringTo(ManagedType<V> valType) {
    return valType.inMapFromString();
  }
 
$masked: { type |
  static <K extends ManagedObject> 
  ManagedStringTo$type.shortName$Map.Type typeMappingStringTo$type.shortName$() {
    return ManagedStringTo$type.shortName$Map.TYPE;
  \}
} 
$
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedStringTo$type.shortName$Map.Type typeMappingStringTo($type.managedName$.Type valType) {
    return ManagedStringTo$type.shortName$Map.TYPE;
  \}
} 
$
  
  
  static <K extends ManagedObject, V extends ManagedObject> 
  ManagedMap<K,V> mapping(ManagedType<K> keyType, ManagedType<V> valType, Usage hints) {
    return valType.createMapFrom(keyType, hints);
  }
  
  static <K extends ManagedObject, V extends ManagedObject> 
  ManagedMap<K,V> mapping(ManagedType<K> keyType, ManagedType<V> valType) {
    return valType.createMapFrom(keyType);
  }
  
  static <K extends ManagedObject, V extends ManagedObject> 
  ManagedMap<K,V> mapping(ManagedType<K> keyType, ManagedType<V> valType, UsageBase<? super ForManagedMap, ?> hints) {
    return valType.createMapFrom(keyType, hints.cast(Usage.class));
  }
  
  
  static <V extends ManagedObject> 
  ManagedMapFromString<V> mapping(ManagedString.Type keyType, ManagedType<V> valType, UsageBase<? super ManagedMapFromString.ForManagedMapFromString,?> hints) {
    return valType.createMapFromString(hints.cast(ManagedMapFromString.Usage.class));
  }
  
  static <V extends ManagedObject> 
  ManagedMapFromString<V> mapping(ManagedString.Type keyType, ManagedType<V> valType) {
    return valType.createMapFrom(keyType);
  }
  
  $masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$<K> mapping(ManagedType<K> keyType, $type.managedName$.Type valType, UsageBase<? super ManagedMapTo$type.shortName$.ForManagedMapTo$type.shortName$,?> hints) {
    return typeMapping(keyType, valType).create(hints.cast(ManagedMapTo$type.shortName$.Usage.class));
  \}
} 
$
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$<K> mappingTo$type.shortName$(ManagedType<K> keyType, UsageBase<? super ManagedMapTo$type.shortName$.ForManagedMapTo$type.shortName$,?> hints) {
    return typeMappingTo$type.shortName$(keyType).create(hints.cast(ManagedMapTo$type.shortName$.Usage.class));
  \}
} 
$
  
  static <V extends ManagedObject> 
  ManagedMapFromString<V> mappingStringTo(ManagedType<V> valType, UsageBase<? super ManagedMapFromString.ForManagedMapFromString,?> hints) {
    return typeMappingStringTo(valType).create(hints.cast(ManagedMapFromString.Usage.class));
  }
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedStringTo$type.shortName$Map mappingStringTo$type.shortName$(UsageBase<? super ManagedStringTo$type.shortName$Map.ForManagedStringTo$type.shortName$Map,?> hints) {
    return typeMappingStringTo$type.shortName$().create(hints.cast(ManagedStringTo$type.shortName$Map.Usage.class));
  \}
} 
$

$masked: { type |
  static <K extends ManagedObject> 
  ManagedStringTo$type.shortName$Map mappingStringTo($type.managedName$.Type valType, UsageBase<? super ManagedStringTo$type.shortName$Map.ForManagedStringTo$type.shortName$Map,?> hints) {
    return typeMappingStringTo$type.shortName$().create(hints.cast(ManagedStringTo$type.shortName$Map.Usage.class));
  \}
} 
$

  
  $masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$<K> mapping(ManagedType<K> keyType, $type.managedName$.Type valType) {
    return typeMapping(keyType, valType).create();
  \}
} 
$
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$<K> mappingTo$type.shortName$(ManagedType<K> keyType) {
    return typeMappingTo$type.shortName$(keyType).create();
  \}
} 
$
  
  static <V extends ManagedObject> 
  ManagedMapFromString<V> mappingStringTo(ManagedType<V> valType) {
    return typeMappingStringTo(valType).create();
  }
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedStringTo$type.shortName$Map mappingStringTo$type.shortName$() {
    return typeMappingStringTo$type.shortName$().create();
  \}
} 
$

$masked: { type |
  static <K extends ManagedObject> 
  ManagedStringTo$type.shortName$Map mappingStringTo($type.managedName$.Type valType) {
    return typeMappingStringTo$type.shortName$().create();
  \}
} 
$

  static <K extends ManagedObject, V extends ManagedObject>
  ManagedMap<K,V> create(Type<K,V> type) {
    return type.create();
  }
  
  static <K extends ManagedObject, V extends ManagedObject>
  ManagedMap<K,V> create(Type<K,V> type, Usage hints) {
    return type.create(hints);
  }
  
  static <K extends ManagedObject, V extends ManagedObject>
  ManagedMap<K,V> create(Type<K,V> type, UsageBase<? super ForManagedMap,?> hints) {
    return type.create(hints.cast(Usage.class));
  }
  
  static <K extends ManagedObject, V extends ManagedObject>
  ManagedMap<K,V> create(ManagedType<ManagedMap<K,V>\> type) {
    @SuppressWarnings("unchecked")
    final Type<K,V> dcType = (Type<K,V>)type;
    return dcType.create();
  }
  
  static <K extends ManagedObject, V extends ManagedObject>
  ManagedMap<K,V> create(ManagedType<ManagedMap<K,V>\> type, UsageBase<? super ForManagedMap,?> hints) {
    @SuppressWarnings("unchecked")
    final Type<K,V> dcType = (Type<K,V>)type;
    return dcType.create(hints.cast(Usage.class));
  }
  
  static <V extends ManagedObject>
  ManagedMapFromString<V> create(ManagedMapFromString.Type<V> type) {
    return type.create();
  }
  
  static <V extends ManagedObject>
  ManagedMapFromString<V> create(ManagedMapFromString.Type<V> type, UsageBase<? super ManagedMapFromString.ForManagedMapFromString,?> hints) {
    return type.create(hints.cast(ManagedMapFromString.Usage.class));
  }
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$<K> create(ManagedMapTo$type.shortName$.Type<K> type) {
    return type.create();
  \}
} 
$
  
$masked: { type |
  static <K extends ManagedObject> 
  ManagedMapTo$type.shortName$<K> create(ManagedMapTo$type.shortName$.Type<K> type, UsageBase<? super ManagedMapTo$type.shortName$.ForManagedMapTo$type.shortName$,?> hints) {
    return type.create(hints.cast(ManagedMapTo$type.shortName$.Usage.class));
  \}
} 
$
  
$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map create(ManagedStringTo$type.shortName$Map.Type type) {
    return type.create();
  \}
} 
$
  
$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map create(ManagedStringTo$type.shortName$Map.Type type, UsageBase<? super ManagedStringTo$type.shortName$Map.ForManagedMapTo$type.shortName$,?> hints) {
    return type.create(hints.cast(ManagedStringTo$type.shortName$Map.Usage.class));
  \}
} 
$
  
  
   ManagedType<K> keyType();
   ManagedType<V> valueType();

  @Override  default int size() {
    return ManagedContainer.super.size();
  }

  @Override
   default boolean isEmpty() {
    return longSize() == 0;
  }

   void replaceAll(Function<? super K, ? extends V> function);
  
}
>>