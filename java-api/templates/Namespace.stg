/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
package() ::= "com.hpl.mds"
class() ::= "Namespace"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

lookup(templates, ret, arg) ::= <<
  default $templates$ $ret$ lookup(CharSequence name, $arg$ type) {
    return type.lookupName(this, name);
  }
>>
contents(prims, masked, types) ::= <<
package $package()$;

import java.util.List;

import com.hpl.mds.impl.NamespaceProxy;



/*
 * TODO: A namespace *should* be iterable.
 */
public interface $class()$ 
{
  static Namespace fromPath(HName path) {
    return path.asNamespace();
  }
  
  static Namespace fromPath(char separator, CharSequence...segments) {
    return HName.from(separator, segments).asNamespace();
  }
  
  static Namespace fromPath(CharSequence...segments) {
    return HName.from(segments).asNamespace();
  }
  
  static Namespace from(char separator, List<? extends CharSequence> segments) {
    return HName.from(separator, segments).asNamespace();
  }
  
  static Namespace from(List<? extends CharSequence> segments) {
    return HName.from(segments).asNamespace();
  }
  
  static Namespace root() {
    return NamespaceProxy.root();
  }
  
  static Namespace getCurrent() {
    return HName.getCurrent().asNamespace();
  }
  
  HName getPath();
  
  default Namespace resolve(HName continuation) {
    return getPath().resolve(continuation).asNamespace();
  }
  
  default Namespace resolve(char sep, CharSequence...segments) {
    return resolve(HName.from(sep, segments));
  }
  
  default Namespace resolve(CharSequence...segments) {
    return resolve(HName.from(segments));
  }

  default Namespace resolve(char sep, List<? extends CharSequence> segments) {
    return resolve(HName.from(sep, segments));
  }
  
  default Namespace resolve(List<? extends CharSequence> segments) {
    return resolve(HName.from(segments));
  }
  
  Namespace childNamespace(CharSequence name);

  boolean isBound(CharSequence name, Prior prior);
  default boolean isBound(CharSequence name) {
    return isBound(name, Prior.wasBound());
  } 
  default boolean isBoundTo(ManagedObject obj, CharSequence name) {
    return isBound(name, Prior.was(obj));
  }
  default boolean isBoundToType(CharSequence name, ManagedType<?> type) {
    return isBound(name, Prior.was(type));
  }
  
  
  <T extends ManagedObject> T bind(CharSequence name, T obj, Prior prior);
  default <T extends ManagedObject> T bind(CharSequence name, T obj) {
    return bind(name, obj, Prior.wasAny());
  }

$masked: { type |
  $val()$ bind(CharSequence name, $arg()$ v, Prior prior);
  default $val()$ bind(CharSequence name, $arg()$ v) {
    return bind(name, v, Prior.wasAny());
  \}
}
$  
  
  void unbind(CharSequence name, Prior prior);
  boolean unbind(CharSequence name);
  
  $lookup("<T extends ManagedObject>", "T", "ManagedType<T>")$
  
$masked : { type |
  $lookup("", type.managedName, {$type.managedName$.Type})$
}
$  

$masked : { type |
  default $val()$ lookup$type.shortName$(CharSequence name) {
    return $type.managedName$.TYPE.lookupNameAs$type.shortName$(this, name);
  \}
}
$  

  $lookup("<V extends ManagedObject>", "ManagedList<V>", "ManagedList.Type<V>")$

$masked : { type |
  $lookup("", {$type.managedName$List}, {$type.managedName$List.Type})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedSet<V>", "ManagedSet.Type<V>")$

$masked : { type |
  $lookup("", {$type.managedName$Set}, {$type.managedName$Set.Type})$
}
$  

  $lookup("<K extends ManagedObject, V extends ManagedObject>", "ManagedMap<K,V>", "ManagedMap.Type<K,V>")$

$masked : { type |
  $lookup("<K extends ManagedObject>", {ManagedMapTo$type.shortName$<K>}, {ManagedMapTo$type.shortName$.Type<K>})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedMapFromString<V>", "ManagedMapFromString.Type<V>")$

$masked : { type |
  $lookup("", {ManagedStringTo$type.shortName$Map}, {ManagedStringTo$type.shortName$Map.Type})$
}
$  

}
>>