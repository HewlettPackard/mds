/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"

ccName() ::= "$class$$if(params)$<$params;separator={,}$>$endif$"
covariant(class, params, bounds, unmanaged, var) ::= <<
$if(unmanaged)$
import com.hpl.mds.impl.Downcast;
static $if(params)$<$params, bounds: {p,b| $p$ extends $b$};separator=", "$>$endif$
$class$$if(params)$<$params;separator=","$>$endif$ check($unmanaged$ $var$) {
  return Downcast.check($var$, $class$.class);
}
$endif$

$bind(class, params)$
>>

bind(class, params) ::= <<
@Override 
$ccName()$ bindName(Prior prior, Namespace ns, CharSequence name);

@Override 
default $ccName()$ bindName(Namespace ns, CharSequence name) {
  return bindName(Prior.wasAny(), ns, name);
}  



@Override
default $ccName()$ bindName(HName name) {
  return name.bind(this);
}
@Override
default $ccName()$ bindName(CharSequence...segments) {
  return bindName(HName.from(segments));
}
@Override
default $ccName()$ bindName(char sep, CharSequence...segments) {
  return bindName(HName.from(sep, segments));
}
@Override
default $ccName()$ bindName(List<? extends CharSequence> segments) {
  return bindName(HName.from(segments));
}
@Override
default $ccName()$ bindName(char sep, List<? extends CharSequence> segments) {
  return bindName(HName.from(sep, segments));
}
  
@Override
default $ccName()$ bindName(Prior prior, HName name) {
  return name.bind(this, prior);
}
@Override
default $ccName()$ bindName(Prior prior, CharSequence...segments) {
  return bindName(prior, HName.from(segments));
}
@Override
default $ccName()$ bindName(Prior prior, char sep, CharSequence...segments) {
  return bindName(prior, HName.from(sep, segments));
}
@Override
default $ccName()$ bindName(Prior prior, List<? extends CharSequence> segments) {
  return bindName(prior, HName.from(segments));
}
@Override
default $ccName()$ bindName(Prior prior, char sep, List<? extends CharSequence> segments) {
  return bindName(prior, HName.from(sep, segments));
}

>>