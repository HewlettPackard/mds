/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
package(type) ::= "com.hpl.mds"
class(type) ::= "$type.shortName$IndexedModifier"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.fieldName, type.shortName, types)$
>>                      

body(class, type, managed, boxed, prim, field, short, types) ::= <<
package $package(type)$;

import java.util.Objects;
import java.util.function.UnaryOperator;
import java.util.function.Function;
import java.util.function.BiFunction;

@FunctionalInterface
public interface $class$ extends BiFunction<$boxed$, Integer, $boxed$> {

  $prim$ apply($prim$ oldVal, int index);
  
  @Override
  default $boxed$ apply($boxed$ oldVal, Integer index) {
    return apply(oldVal.$type.shortLower$Value(), index.intValue());
  }
  
  
  default $class$ compose($class$ before) {
    Objects.requireNonNull(before);
    return (v, i) -> apply(before.apply(v, i), i);
  }
  
  default $class$ compose($type.shortName$Modifier before) {
    Objects.requireNonNull(before);
    return (v, i) -> apply(before.apply(v), i);
  }
  
  default $class$ compose(UnaryOperator<$boxed$> before) {
    Objects.requireNonNull(before);
    return (v, i) -> apply(($prim$)before.apply(v), i);
  }
  
  default $class$ andThen($class$ after) {
    Objects.requireNonNull(after);
    return (v, i) -> after.apply(apply(v, i), i);
  }
  default $class$ andThen($type.shortName$Modifier after) {
    Objects.requireNonNull(after);
    return (v, i) -> after.apply(apply(v, i));
  }
  default $class$ andThen(UnaryOperator<$boxed$> after) {
    Objects.requireNonNull(after);
    return (v, i) -> after.apply(apply(v, i));
  }
  
  public static $class$ ignoringIndex(To$short$Function<? super $boxed$> fn) {
    return (v, i) -> fn.apply(v);
  }
  
  public static $class$ ignoringIndex(Function<? super $boxed$, ? extends $boxed$> fn) {
    return (v, i) -> fn.apply(v);
  }
  
  
}
>>