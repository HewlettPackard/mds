/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
package() ::= "com.hpl.mds"
class() ::= "RecordType"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

contents(prims, masked, types) ::= <<
package $package()$;

import java.util.Arrays;
import java.util.Collection;
import com.hpl.mds.impl.Stub;
import com.hpl.mds.impl.RecordTypeProxy;



public interface RecordType<R extends ManagedRecord> extends ManagedType<R> {

  public static void ensureKnown(RecordType<?>...types) {
    // just need to be sure they're mentioned.
  }
  
  public static <R extends ManagedRecord> RecordType<R> find(CharSequence name) {
    // TODO
    return Stub.notImplemented();
  }
  public static <R extends ManagedRecord> RecordType<R> find(Class<R> clazz) {
    return find(defaultName(clazz));
  }
  
  public static <R extends ManagedRecord> RecordType<R> existing(CharSequence name) {
    // TODO
    return Stub.notImplemented();
  }
  
  public static <R extends ManagedRecord> RecordType<R> existing(Class<R> clazz) {
    return existing(defaultName(clazz));
  }
  
  public boolean isCreated();
  
  public ManagedString name();
  
  public Field<? super R, ? extends ManagedObject>[] fields();
  
  public RecordType<? super R>[] supertypes();
  
  
  public boolean ensureCreated();


  public static <R extends ManagedRecord> RecordType<R> declare(CharSequence name, Class<? extends R> implClass, Collection<RecordType<? super R>\> supers) {
	  return RecordTypeProxy.declare(name, implClass, supers);
  }
  
  @SafeVarargs
  public static <R extends ManagedRecord> RecordType<R> declare(CharSequence name, Class<? extends R> implClass, RecordType<? super R>...supers) {
    return declare(name, implClass, Arrays.asList(supers));
  }
  
  public static <R extends ManagedRecord> RecordType<R> declare(Class<R> clss, Class<? extends R> implClass, Collection<RecordType<? super R>\> supers) {
    return declare(defaultName(clss), implClass, supers);
  }
  
  @SafeVarargs
  public static <R extends ManagedRecord> RecordType<R> declare(Class<R> clss, Class<? extends R> implClass, RecordType<? super R>...supers) {
    return declare(defaultName(clss), implClass, supers);
  }
  
  static <R extends ManagedRecord> String defaultName(Class<R> clss) {
    return clss.getName();
  }
  
  public default <T extends ManagedObject> Field<R,T> field(CharSequence name, ManagedType<T> type) {
    return type.fieldIn(this, name);
  }
  public default <T extends ManagedObject> ListField<R,T> field(CharSequence name, ManagedList.Type<T> type) {
    return type.fieldIn(this, name);
  }
  public default <T extends ManagedObject> SetField<R,T> field(CharSequence name, ManagedSet.Type<T> type) {
    return type.fieldIn(this, name);
  }
  public default <T extends ManagedObject> ArrayField<R,T> field(CharSequence name, ManagedArray.Type<T> type) {
    return type.fieldIn(this, name);
  }
  public default <K extends ManagedObject, V extends ManagedObject> 
  MapField<R,K,V> field(CharSequence name, ManagedMap.Type<K,V> type) {
    return type.fieldIn(this, name);
  }

$masked : { type |
  public default $type.fieldName$<R> field(CharSequence name, $type.managedName$.Type type) {
    return type.fieldIn(this, name);
  \}
}
$

$masked : { type |
  public default $type.fieldName$<R> $type.shortLower$Field(CharSequence name) {
    return field(name, $type.managedName$.TYPE);
  \}
}
$
  
$masked : { type |
  public default $type.arrayFieldName$<R> field(CharSequence name, $type.managedName$Array.Type type) {
    return type.fieldIn(this, name);
  \}
}
$

$masked : { type |
  public default $type.arrayFieldName$<R> $type.shortLower$ArrayField(CharSequence name) {
    return field(name, $type.managedName$Array.TYPE);
  \}
}
$
  
  public default <ET extends ManagedObject> ListField<R,ET> listField(CharSequence name, ManagedType<ET> eltType) {
    return field(name, ManagedList.typeContaining(eltType));
  }
  public default <ET extends ManagedObject> SetField<R,ET> setField(CharSequence name, ManagedType<ET> eltType) {
    return field(name, ManagedSet.typeContaining(eltType));
  }
  public default <ET extends ManagedObject> ArrayField<R,ET> arrayField(CharSequence name, ManagedType<ET> eltType) {
    return field(name, ManagedArray.typeContaining(eltType));
  }
  public default <KT extends ManagedObject, VT extends ManagedObject> 
  MapField<R,KT,VT> mapField(CharSequence name, ManagedType<KT> keyType, ManagedType<VT> valType) {
    return field(name, ManagedMap.typeMapping(keyType, valType));
  }
  
  public default <T extends ManagedObject> Field<R,T> findField(CharSequence name, ManagedType<T> type) {
    return type.findFieldIn(this, name);
  }
  public default <T extends ManagedObject> ListField<R,T> findField(CharSequence name, ManagedList.Type<T> type) {
    return type.findFieldIn(this, name);
  }
  public default <T extends ManagedObject> SetField<R,T> findField(CharSequence name, ManagedSet.Type<T> type) {
    return type.findFieldIn(this, name);
  }
  public default <T extends ManagedObject> ArrayField<R,T> findField(CharSequence name, ManagedArray.Type<T> type) {
    return type.findFieldIn(this, name);
  }
  public default <K extends ManagedObject, V extends ManagedObject> 
  MapField<R,K,V> findField(CharSequence name, ManagedMap.Type<K,V> type) {
    return type.findFieldIn(this, name);
  }

$masked : { type |
  public default $type.fieldName$<R> findField(CharSequence name, $type.managedName$.Type type) {
    return type.findFieldIn(this, name);
  \}
}
$

$masked : { type |
  public default $type.fieldName$<R> find$type.shortName$Field(CharSequence name) {
    return findField(name, $type.managedName$.TYPE);
  \}
}
$
  
  
  public default <ET extends ManagedObject> ListField<R,ET> findListField(CharSequence name, ManagedType<ET> eltType) {
    return findField(name, ManagedList.typeContaining(eltType));
  }
  public default <ET extends ManagedObject> SetField<R,ET> findSetField(CharSequence name, ManagedType<ET> eltType) {
    return findField(name, ManagedSet.typeContaining(eltType));
  }
  public default <ET extends ManagedObject> ArrayField<R,ET> findArrayField(CharSequence name, ManagedType<ET> eltType) {
    return findField(name, ManagedArray.typeContaining(eltType));
  }
  public default <KT extends ManagedObject, VT extends ManagedObject> 
  MapField<R,KT,VT> findMapField(CharSequence name, ManagedType<KT> keyType, ManagedType<VT> valType) {
    return findField(name, ManagedMap.typeMapping(keyType, valType));
  }
  
  public RecordExtension<R> extension();
  
  public RecordExtension<R> extension(CharSequence name);
  
  public RecordExtension<R> extension(RecordType<? super R> etype);

}
>>