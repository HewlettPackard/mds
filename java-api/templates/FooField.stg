/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
package(type) ::= "com.hpl.mds"
class(type) ::= "$type.fieldName$"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.fieldName, type.shortName, types)$
>>                      

function() ::= "$ifString({Function<? super RT, ? extends $below()$>},{To$short$Function<? super RT>})$"
supplier() ::= "$ifString({Supplier<? extends $below()$>},{$short$Supplier})$"

body(class, type, managed, boxed, prim, field, short, types) ::= <<
package $package(type)$;


import java.util.function.Function;
$whenString({
import java.util.function.Supplier;
})$
$if(type.bool)$
import java.util.function.Predicate;
$endif$


public interface $field$<RT extends ManagedRecord> extends Field<RT, $managed$>$if(type.bool)$, Predicate<RT>$endif$ {

  static <RT extends ManagedRecord> $field$<RT> findIn(RecordType<RT> recType, CharSequence name) {
    return $managed$.TYPE.findFieldIn(recType, name);
  }
  
$ifString({
  default $val()$ get$short$(RT record) {
    $managed$ v = get(record);
    return ManagedString.as$short$(v);
  \}
  default $val()$ peek$short$(RT record) {
    $managed$ v = peek(record);
    return ManagedString.as$short$(v);
  \}
},{
  $val()$ get$short$(RT record);
  @Override 
  default $managed$ get(RT record) {
    return $managed$.valueOf(get$short$(record));
  \}
  $val()$ peek$short$(RT record);
  @Override 
  default $managed$ peek(RT record) {
    return $managed$.valueOf(peek$short$(record));
  \}
})$  
  
  boolean change(RT rec, $arg()$ expected, $arg()$ value);
  boolean change(RT rec, Holder<$boxed$> holdsExpected, $arg()$ value);
$unlessString({  
  boolean change(RT rec, $short$Holder holdsExpected, $arg()$ value);
})$  

    
$ifString({
  default $val()$ set(RT rec, $arg()$ val) {
    set(rec, ManagedString.valueOf(val));
    return val.toString();
  \}
  default $val()$ getAndSet(RT rec, $arg()$ val) {
    return ManagedString.asString(getAndSet(rec, ManagedString.valueOf(val)));
  \}
  default void initFinal(RT rec, $arg()$ val) {
    initFinal(rec, ManagedString.valueOf(val));
  \}
},{
  $val()$ set(RT rec, $arg()$ val);

  @Override
  default $managed$ set(RT rec, $managed$ val) {
    set(rec, $managed$.as$short$(val));
    return val;
  \}

  $val()$ getAndSet(RT rec, $arg()$ val);

  @Override
  default $managed$ getAndSet(RT rec, $managed$ val) {
    return $managed$.valueOf(getAndSet(rec, $managed$.as$short$(val)));
  \}

  void initFinal(RT rec, $arg()$ val);
  @Override
  default void initFinal(RT rec, $managed$ val) {
    initFinal(rec, $managed$.as$short$(val));
  \}
})$

  
  @Override
  default boolean change(RT rec, $managed$ expected, $managed$ val) {
$ifString({
    return change(rec, ($arg()$)expected, ($arg()$)val);
},{      
    return change(rec, $managed$.as$short$(expected), $managed$.as$short$(val));
})$    
  }
  

  default $ifString({Function<RT,String>},{To$short$Function<RT>})
$ as$short$Function() {
    return (rt) -> get$short$(rt);
  }

$if(type.numeric)$
$["inc","dec","mult","div",
  "getAndInc", "getAndDec", "getAndMult", "getAndDiv"]:{ func |
  $prim$ $func$(RT rec, $prim$ by);
  default $managed$ $func$(RT rec, $managed$ by) {
    return $managed$.valueOf($func$(rec, $managed$.as$type.shortName$(by)));
  \}
}
$
$endif$
$if(type.bool)$
  @Override
  default public boolean test(RT rt) {
    return get$short$(rt);
  }
$endif$  

}
>>