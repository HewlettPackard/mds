/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "usage.stg"
import "type.stg"
import "string.stg"
import "covariant.stg"
package(type) ::= "com.hpl.mds"
class(type) ::= "$type.managedName$List"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.fieldName, type.shortName, types)$
>>                      

body(class, type, managed, boxed, prim, field, short, types) ::= <<
package $package(type)$;

import java.util.Collection;
$whenString({import java.util.Deque;})$
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;

import com.hpl.mds.usage.UsageBase;


public interface $class$ extends $ifString({ManagedList<ManagedString>},{ManagedPrimList<$boxed$, $managed$>})$ {
  $type(class, [], [], "ManagedList", {<$managed$>}, 
        ["ManagedList", "ManagedCollection", "ManagedContainer"], {
default $managed$.Type eltType() {
  return $managed$.TYPE;
\}
},[])$
  
  $listUsage(class, "", "ManagedList", ["ManagedList", "ManagedCollection", "ManagedContainer"])$
  
  $covariant(class, [], [], {List<$managed$>}, {list})$

  $unlessString({@Override  
  })$UnmanagedListView asUnmanagedList();
  UnmanagedDequeView asUnmanagedDeque();
  DequeView asDeque();
  

  interface UnmanagedListView extends $ifString({List<String>},{ManagedPrimList.UnmanagedListView<$boxed$, $managed$>})$ {
    $class$ asManagedList();
    DequeView asDeque();
    UnmanagedDequeView asUnmanagedDeque();
  }

  interface UnmanagedDequeView extends $ifString({Deque<String>},{ManagedPrimList.UnmanagedDequeView<$boxed$, $managed$>})$ {
    $class$ asManagedList();
    UnmanagedListView asUnmanagedList();
    DequeView asManagedDeque();
    
  }


  
  interface DequeView extends $ifString({ManagedList.DequeView<ManagedString>},{ManagedPrimList.DequeView<$boxed$, $managed$>})$ {
    $class$ asManagedList();
    UnmanagedListView asUnmanagedList();
    UnmanagedDequeView asUnmanagedDeque();
    
    $class$.Type type();

    $val()$ $type.shortLower$Element();
    boolean offer($arg()$ e);
    $boxed$ peek$short$();
    $boxed$ poll$short$();
    $val()$  remove$short$();
    void addFirst($arg()$ e);
    void addLast($arg()$ e);
    Iterator<$boxed$> descending$short$Iterator();
    $val()$ getFirst$short$();
    $val()$ getLast$short$();
    boolean offerFirst($arg()$ e);
    boolean offerLast($arg()$ e);
    $boxed$ peekFirst$short$();
    $boxed$ peekLast$short$();
    $boxed$ pollFirst$short$();
    $boxed$ pollLast$short$();
    $val()$ pop$short$();
    void push($arg()$ e);
    $val()$ removeFirst$short$();
    $val()$ removeLast$short$();
    default Iterable<$boxed$> $type.shortLower$Elements() {
      return asUnmanagedDeque();
    }
    boolean addAll$short$s(Collection<? extends $below()$> coll);
    boolean forEach$short$(Consumer<? super $above()$> consumer);
    boolean remove$short$if(Predicate<? super $above()$> pred);
    $val()$[] toArray($val()$[] array);
$unlessString({
    boolean add($prim$ e);
    boolean removeFirstOccurrence($prim$ e);
    boolean removeLastOccurrence($prim$ e);
    
    boolean addAll($prim$[] array);
    boolean contains($prim$ v);
    boolean containsAll($prim$[] array);
    boolean forEach($short$Consumer consumer);

    boolean remove($prim$ v);
    boolean removeAll($prim$[] array);
    boolean removeIf($short$Predicate pred);
})$    
  }
  
  static $class$ create(Usage hints) {
    return TYPE.create(hints);
  }
  
  static $class$ create() {
    return TYPE.create();
  }
  
  static $class$ create(UsageBase<? super ForManaged$short$List, ?> hints) {
    return create(hints.cast(Usage.class));
  }
  
  
  @Override
  default $managed$.Type eltType() {
    return $managed$.TYPE;
  }
  
  boolean add($arg()$ v);
  boolean add(int index, $arg()$ v);
$unlessString({  
  boolean addAll($prim$[] array);
})$
  boolean contains($managed$ v);  
  boolean contains($arg()$ v);
  boolean addAll$short$s(Collection<? extends $below()$> coll);
$unlessString({  
  boolean containsAll($prim$[] array);
  boolean forEach($short$Consumer consumer);
})$  
  boolean forEach$short$(Consumer<? super $above()$> consumer);
  $val()$ get$short$(int index);
  int indexOf($arg()$ v);  
  default Iterable<$boxed$> $type.shortLower$Elements() {
    return asUnmanagedList();
  }
  int lastIndexOf($arg()$ v);
  ListIterator<$boxed$> $type.shortLower$ListIterator();
  ListIterator<$boxed$> $type.shortLower$ListIterator(int valueOfIndex);
  boolean remove$short$($arg()$ v);
$unlessString({  
  boolean removeAll($prim$[] array);
  boolean removeIf($short$Predicate pred);
})$  
  boolean remove$short$if(Predicate<? super $above()$> pred);
$unlessString({  
  void replaceAll($short$Modifier operator);
  void replaceAll($short$IndexedModifier operator);
})$  
  void replaceAll$short$s(Function<? super $above()$, ? extends $below()$> modifier);
$unlessString({  
  void retainAll($prim$[] array);
})$  
  $val()$ set$short$(int index, $arg()$ val);
  default $val()$ set$short$(int index, $managed$ val) {
    return set$short$(index, $managed$.as$short$(val));
  }
  default $managed$ set(int index, $arg()$ val) {
    return $managed$.valueOf(set$short$(index, val));
  }
  void sort$short$s(Comparator<? super $above()$> cptr);
  Spliterator<$boxed$> $type.shortLower$Spliterator();
  Stream<$boxed$> $type.shortLower$Stream();
  $val()$[] toArray($val()$[] array);
  $val()$[] to$short$Array();  
  
  
  
$if(type.numeric)$
$["inc","dec","mult","div"]:{ func |
  $prim$ $func$$short$(int index, $prim$ by);
  default $prim$ $func$$short$(int index, $managed$ by) {
    return $func$$short$(index, $managed$.as$type.shortName$(by));
  \}
  default $managed$ $func$(int index, $prim$ by) {
    return $managed$.valueOf($func$$short$(index, by));
  \}
  default $managed$ $func$(int index, $managed$ by) {
    return $managed$.valueOf($func$$short$(index, $managed$.as$type.shortName$(by)));
  \}
  default void $func$All($managed$ by) {
    $func$All($managed$.as$short$(by));
  \}
  void $func$All($prim$ by);
  
}
$
$endif$  
}
>>