/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
package(type) ::= "com.hpl.mds.impl"
class(type) ::= "$type.arrayFieldName$Proxy"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.arrayFieldName, type.shortName, type.jniName, types)$
>>                      

body(class, type, managed, boxed, prim, field, short, jni, types) ::= <<
package $package(type)$;

import com.hpl.mds.*;
import java.util.function.Function;
import java.util.function.ToLongFunction;

//public class $class$<RT extends ManagedRecord, $managed$> extends FieldProxy<RT, $managed$> implements $field$<RT> {
//public interface $field$<RT extends ManagedRecord> extends Field<RT, $managed$>

public class $class$<RT extends ManagedRecord> 
             extends ArrayFieldProxy<RT, $managed$> 
             implements $field$<RT> 
{

  private static final NativeLibraryLoader NATIVE_LIB_LOADER = NativeLibraryLoader.getInstance();
  
  protected $class$(long handleIndex, RecordTypeProxy<RT> recType, ManagedStringProxy name) {
    super(handleIndex, recType, name);
  }

  private static native long getValueHandle(long handle, long recHandle);
  private static native long peekValueHandle(long handle, long recHandle);
  private static native long setValueHandle(long handle, long recHandle, long valHandle);
  private static native boolean initFinal(long handle, long recHandle, long valHandle);
  private static native long getAndSetValueHandle(long handle, long recHandle, long valHandle);
  private static native long createFieldIn(long rtHandle, long nameHandle);

  static <RT extends ManagedRecord> $class$<RT> in(RecordType<RT> recType, CharSequence name) {
    ArrayFieldProxy<RT, $managed$> 
    p = ArrayFieldProxy.<RT,$managed$>in(recType, name, 
                                             $class$::createFieldIn,
                                             $class$<RT>::new);
    return ($class$<RT>)p;
  }
    
  public $short$ArrayType valueType() {
    return $short$ArrayType.INSTANCE;
  }
  
  @Override
  public $short$ArrayProxy get(RT record) {
    long h = $class$.<RT>getValueHandle(handleIndex_, 
                                        ManagedRecordProxy.handleOf(record));
    return $short$ArrayProxy.fromHandle(h);
  }
  @Override
  public $short$ArrayProxy peek(RT record) {
    long h = $class$.<RT>peekValueHandle(handleIndex_,
                                        ManagedRecordProxy.handleOf(record));
    return $short$ArrayProxy.fromHandle(h);
  }
    
  @Override
  public $short$ArrayProxy getAndSet(RT rec, ManagedArray<$managed$> val) {
    long h = getAndSetValueHandle(handleIndex_, 
                           ManagedRecordProxy.handleOf(rec), 
                           (($short$ArrayProxy)val).handleIndex());
    return $short$ArrayProxy.fromHandle(h);
  }
	
  @Override
  public $short$ArrayProxy set(RT rec, ManagedArray<$managed$> val) {
    setValueHandle(handleIndex_, 
                           ManagedRecordProxy.handleOf(rec), 
                           (($short$ArrayProxy)val).handleIndex());
    return ($short$ArrayProxy)val;
  }
	
  @Override
  public void initFinal(RT rec, ManagedArray<$managed$> val) {
    if (!initFinal(handleIndex_, 
                   ManagedRecordProxy.handleOf(rec), 
                   (($short$ArrayProxy)val).handleIndex()))
    {
      throw new FinalFieldModifiedException(recordType().name().asString(),
                                            name().asString());
    
    \}
  }
	

}

>>
