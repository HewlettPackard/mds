/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "usage.stg"
import "type.stg"
import "covariant.stg"
package() ::= "com.hpl.mds"
class() ::= "ManagedSet"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

contents(prims, masked, types) ::= <<
package $package()$;

import java.util.Collection;
import java.util.Set;

import com.hpl.mds.usage.UsageBase;



public interface ManagedSet<T extends ManagedObject> extends ManagedCollection<T>, Set<T> {
$masked: { type |
    static final Managed$type.shortName$Set.Type OF_$type.shortUpper$_TYPE = Managed$type.shortName$Set.TYPE;
}
$
  $type("ManagedSet", "T", "ManagedObject", "ManagedCollection", "<T, ManagedSet<T>\>", 
        ["ManagedCollection", "ManagedContainer"], {
@Override
<RT extends ManagedRecord> SetField<RT,T> fieldIn(RecordType<RT> recType, CharSequence name);
@Override
<RT extends ManagedRecord> SetField<RT,T> findFieldIn(RecordType<RT> recType, CharSequence name);
},[])$
  
  $setUsage("ManagedSet", "<T>", "ManagedCollection", ["ManagedCollection", "ManagedContainer"])$
  
  $covariant({ManagedSet}, {T}, {ManagedObject}, {Set<T>}, {set})$
  

  static <T extends ManagedObject> 
  ManagedSet<T> of(ManagedType<T> eltType, Usage hints) {
    return eltType.createSet(hints);
  }

  static <T extends ManagedObject> 
  ManagedSet<T> of(ManagedType<T> eltType) {
    return eltType.createSet();
  }

  static <T extends ManagedObject> 
  ManagedSet<T> of(ManagedType<T> eltType, UsageBase<? super ForManagedSet,?> hints) {
    return ManagedSet.of(eltType, hints.cast(Usage.class));
  }
  
$masked: { type |
    static Managed$type.shortName$Set of($type.managedName$.Type type) {
      return OF_$type.shortUpper$_TYPE.create();
    \}
}
$

$masked: { type |
    static Managed$type.shortName$Set of($type.managedName$.Type type, UsageBase<? super Managed$type.shortName$Set.ForManaged$type.shortName$Set,?> hints) {
      return OF_$type.shortUpper$_TYPE.create(hints.cast(Managed$type.shortName$Set.Usage.class));
    \}
}
$

$masked: { type |
    static Managed$type.shortName$Set of$type.shortName$() {
      return OF_$type.shortUpper$_TYPE.create();
    \}
}
$

$masked: { type |
    static Managed$type.shortName$Set of$type.shortName$(UsageBase<? super Managed$type.shortName$Set.ForManaged$type.shortName$Set,?> hints) {
      return OF_$type.shortUpper$_TYPE.create(hints.cast(Managed$type.shortName$Set.Usage.class));
    \}
}
$

  
  static <T extends ManagedObject>
  ManagedSet<T> create(ManagedType<ManagedSet<T>\> type, Usage hints) {
    return ((Type<T>)type).create(hints);
  }
  static <T extends ManagedObject>
  ManagedSet<T> create(ManagedType<ManagedSet<T>\> type, UsageBase<? super ForManagedSet,?> hints) {
    return ManagedSet.create(type, hints.cast(Usage.class));
  }
  
    
$masked: { type |
    static Managed$type.shortName$Set create($type.managedName$Set.Type type) {
      return OF_$type.shortUpper$_TYPE.create();
    \}
}
$

$masked: { type |
    static Managed$type.shortName$Set create($type.managedName$Set.Type type, UsageBase<? super Managed$type.shortName$Set.ForManaged$type.shortName$Set,?> hints) {
      return OF_$type.shortUpper$_TYPE.create(hints.cast(Managed$type.shortName$Set.Usage.class));
    \}
}
$

  static <T extends ManagedObject> Type<T> typeContaining(ManagedType<T> type) {
    return type.inSet();
  }
  
  
$masked: { type |
    static Managed$type.shortName$Set.Type typeContaining($type.managedName$.Type type) {
      return OF_$type.shortUpper$_TYPE;
    \}
}
$

$masked: { type |
    static Managed$type.shortName$Set.Type typeContaining$type.shortName$() {
      return OF_$type.shortUpper$_TYPE;
    \}
}
$


  @Override 
  default boolean isEmpty() {
    return ManagedCollection.super.isEmpty();
  }
  
  @Override
  default boolean retainAll(Collection<?> c) {
    return ManagedCollection.super.retainAll(c);
  }
  
  @Override
  default boolean removeAll(java.util.Collection<?> c) {
    return ManagedCollection.super.removeAll(c);
  }
  
  @Override 
  default boolean containsAll(Collection<?> c) {
    return ManagedCollection.super.containsAll(c);
  }
  
  @Override
  default boolean addAll(Collection<? extends T> c) {
    return ManagedCollection.super.addAll(c);
  }
  
  
  
  @Override 
  default int size() {
    return ManagedCollection.super.size();
  }


}
>>