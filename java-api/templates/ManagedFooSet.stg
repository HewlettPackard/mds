/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "usage.stg"
import "type.stg"
import "string.stg"
import "covariant.stg"
package(type) ::= "com.hpl.mds"
class(type) ::= "$type.managedName$Set"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.fieldName, type.shortName, types)$
>>                      

body(class, type, managed, boxed, prim, field, short, types) ::= <<
package $package(type)$;

import java.util.Collection;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;

import com.hpl.mds.usage.UsageBase;


public interface $class$ extends $ifString({ManagedSet<$managed$>},{ManagedPrimSet<$boxed$, $managed$>})$ {
  $type(class, [], [], "ManagedSet", {<$managed$>}, 
        ["ManagedSet", "ManagedCollection", "ManagedContainer"], {
default $managed$.Type eltType() {
  return $managed$.TYPE;
\}
},[])$
  
  $setUsage(class, "", "ManagedSet", ["ManagedSet", "ManagedCollection", "ManagedContainer"])$
  
  $covariant(class, [], [], {Set<$managed$>}, {set})$

  
  interface UnmanagedSetView extends $ifString({Set<String>},{ManagedPrimSet.UnmanagedSetView<$boxed$, $managed$>})$ {
    $class$ asManagedSet();

  }

  $unlessString({@Override  
  })$UnmanagedSetView asUnmanagedSet();

  static $class$ create(Usage hints) {
    return TYPE.create(hints);
  }
  
  static $class$ create() {
    return TYPE.create();
  }
  
  static $class$ create(UsageBase<? super ForManaged$short$Set, ?> hints) {
    return create(hints.cast(Usage.class));
  }
  
  @Override
  default $managed$.Type eltType() {
    return $managed$.TYPE;
  }

  boolean add($arg()$ v);
  boolean add(int index, $arg()$ v);
$unlessString({  
  boolean addAll($prim$[] array);
})$  
  boolean addAll$short$s(Collection<? extends $below()$> coll);
  boolean contains($managed$ v);
  boolean contains($arg()$ v);
$unlessString({  
  boolean containsAll($prim$[] array);
})$  
  boolean containsAll$short$s(Collection<? extends $below()$> coll);
$unlessString({  
  boolean forEach($short$Consumer consumer);
})$  
  boolean forEach$short$(Consumer<? super $above()$> consumer);
  default Iterable<$boxed$> $type.shortLower$Elements() {
    return asUnmanagedSet();
  }
  boolean remove$short$($arg()$ v);
$unlessString({  
  boolean removeAll($prim$[] array);
  boolean removeIf($short$Predicate pred);
})$  
  boolean remove$short$if(Predicate<? super $above()$> pred);
$unlessString({  
  void retainAll($prim$[] array);
})$  
  Spliterator<$boxed$> $type.shortLower$Spliterator();
  Stream<$boxed$> $type.shortLower$Stream();
  $val()$[] toArray($val()$[] array);
  $val()$[] to$short$Array();
  
}
>>