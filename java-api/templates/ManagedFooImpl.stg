/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
package(type) ::= "com.hpl.mds.impl"
class(type) ::= "$type.implName$"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.fieldName, type.shortName, type.implName, types)$
>>                      

body(class, type, managed, boxed, prim, field, short, impl, types) ::= <<
package $package(type)$;

import com.hpl.mds.*;

public class $class$ implements $managed$ {
	
	private $prim$ value;
	
$if(type.int)$
    public static final $prim$ minCached = -128;
    public static final $prim$ maxCached = 512;
    private static final $class$[] cache = new $class$[maxCached-minCached+1];
    static {
import java.util.Arrays;    
      Arrays.setAll(cache, (i)->new $class$(i+minCached));
    }
$endif$
$if(type.bool)$
    public static final $class$ FALSE = new $class$(false);     
    public static final $class$ TRUE = new $class$(true);     
$endif$    

	private $class$($arg()$ value) {
		this.value = value;
	}
	
	public static $class$ valueOf($arg()$ val) {
$if(type.int)$
        if (val >= minCached && val <= maxCached) {
            return cache[val-minCached];
        }
$endif$
$if(type.bool)$
        return val ? TRUE : FALSE;
$else$        
	    return new $class$(val);
$endif$	    
	}

	@Override
	public $boxed$ boxedVal() {
		return value;
	}

	@Override
	public boolean isSameAs(ManagedObject other) {
	  return equals(other);
	}

	@Override
	public int hashCode() {
	  return $boxed$.hashCode(value);
	}
	
	@Override
	public boolean equals(Object other) {
		// TODO Auto-generated method stub
		if (other == this) { return true; }
		if (other == null) { return false; }
		if (other instanceof $class$) {
		   return value == (($class$)other).value;
		}
		return false;
	}

        @Override
        public int compareTo($prim$ val) {
          return $boxed$.compare(as$type.shortName$(), val);
        }

        @Override
        public int compareTo($managed$ other) {
          if (this == other) {
            return 0;
          }
          if (other == null) {
            return 1;
          }
          return compareTo(other.as$type.shortName$());
        }

$if(type.numeric)$
	@Override
	public int intValue() {
		return $if(type.needIntCast)$(int)$endif$value;
	}

	@Override
	public long longValue() {
		return $if(type.needLongCast)$(long)$endif$value;
	}

	@Override
	public float floatValue() {
		return $if(type.needFloatCast)$(float)$endif$value;
	}

	@Override
	public double doubleValue() {
		return value;
	}
$endif$	

	@Override
	public $val()$ as$type.shortName$() {
		return value;
	}
	
	@Override
    public $managed$ bindName(Prior prior, Namespace ns, CharSequence name) {
      return type().bindIn(ns, name, this, prior);
    }
	

}

>>