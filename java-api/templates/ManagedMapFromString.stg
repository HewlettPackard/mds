/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "usage.stg"
import "type.stg"
import "covariant.stg"
package() ::= "com.hpl.mds"
class() ::= "ManagedMapFromString"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

contents(prims, masked, types) ::= <<
package $package()$;

import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;

import com.hpl.mds.usage.UsageBase;


public interface ManagedMapFromString<V extends ManagedObject> extends ManagedMap<ManagedString, V> {
  $type(class(), "V", "ManagedObject", "ManagedMap", {<ManagedString, V>}, 
        ["ManagedMap", "ManagedContainer"], {
default ManagedString.Type keyType() {
  return ManagedString.TYPE;
\}
},[])$


  $mapUsage("ManagedMapFromString", "<V>", "ManagedMap", ["ManagedMap", "ManagedContainer"])$
  
  $covariant({ManagedMapFromString}, {V}, {ManagedObject}, {Map<String,V>}, {map})$
  
  

  interface UnmanagedMapView<V extends ManagedObject> extends Map<String, V> {
    ManagedMapFromString<V> asManagedMap();

  }

  UnmanagedMapView<V> asUnmanageKeyMap();


  static <V extends ManagedObject> 
  ManagedMapFromString<V> mappingTo(ManagedType<V> valueType) {
    return valueType.createMapFromString();
  }

  static <V extends ManagedObject> 
  ManagedMapFromString<V> mappingTo(ManagedType<V> valueType, UsageBase<? super ForManagedMapFromString,?> hints) {
    return valueType.createMapFromString(hints.cast(Usage.class));
  }
  
$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map mappingTo($type.managedName$.Type valueType) {
    return valueType.createMapFromString();
  \}
} 
$

$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map mappingTo($type.managedName$.Type valueType, UsageBase<? super ManagedStringTo$type.shortName$Map.ForManagedStringTo$type.shortName$Map,?> hints) {
    return valueType.createMapFromString(hints.cast(ManagedStringTo$type.shortName$Map.Usage.class));
  \}
} 
$

  
  static <V extends ManagedObject> 
  ManagedMapFromString<V> mapping(ManagedType<ManagedString> keyType, ManagedType<V> valType, UsageBase<? super ForManagedMapFromString,?> hints) {
    return mappingTo(valType, hints.cast(Usage.class));
  }

  static <V extends ManagedObject> 
  ManagedMapFromString<V> mapping(ManagedType<ManagedString> keyType, ManagedType<V> valType) {
    return mappingTo(valType);
  }

$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map mapping(ManagedType<ManagedString> keyType, $type.managedName$.Type valueType) {
    return valueType.createMapFromString();
  \}
} 
$

$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map mapping(ManagedType<ManagedString> keyType, $type.managedName$.Type valueType, UsageBase<? super ManagedStringTo$type.shortName$Map.ForManagedStringTo$type.shortName$Map,?> hints) {
    return valueType.createMapFromString(hints.cast(ManagedStringTo$type.shortName$Map.Usage.class));
  \}
} 
$


  

  static <V extends ManagedObject>
  ManagedMapFromString<V> create(ManagedMapFromString.Type<V> type) {
    return type.create();
  }
  static <V extends ManagedObject>
  ManagedMapFromString<V> create(ManagedMapFromString.Type<V> type, UsageBase<? super ForManagedMapFromString,?> hints) {
    return create(type, hints.cast(Usage.class));
  }

  

  static <V extends ManagedObject>
  ManagedMapFromString<V> create(ManagedType<ManagedMap<ManagedString, V>\> type) {
    final Type<V> dcType = (Type<V>)type;
    return create(dcType);
  }
  static <V extends ManagedObject>
  ManagedMapFromString<V> create(ManagedType<ManagedMap<ManagedString,V>\> type, UsageBase<? super ForManagedMapFromString,?> hints) {
    final Type<V> dcType = (Type<V>)type;
    return create(dcType, hints);
  }


$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map create(ManagedStringTo$type.shortName$Map.Type type) {
    return type.create();
  \}
} 
$

$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map mapping(ManagedStringTo$type.shortName$Map.Type type, UsageBase<? super ManagedStringTo$type.shortName$Map.ForManagedStringTo$type.shortName$Map,?> hints) {
    return type.create(hints.cast(ManagedStringTo$type.shortName$Map.Usage.class));
  \}
} 
$

  static <V extends ManagedObject> 
  Type<V> typeMappingTo(ManagedType<V> valueType) {
    return valueType.inMapFromString();
  }
  static <K extends ManagedObject> 
  Type<K> typeMapping(ManagedType<K> keyType, ManagedType<ManagedString> valType) {
    return typeMappingTo(keyType);
  }


  @Override
  default ManagedString.Type keyType() {
    return ManagedString.TYPE;
  }

  V put(CharSequence k, V v);
  Set<String> stringKeySet();
  V putIfAbsent(CharSequence k, V v);
  V putIfPresent(CharSequence k, V v);
  boolean replace(CharSequence k, V oldV, V newV);
  boolean replace(CharSequence k, V v);

  void forEachStringKey(BiConsumer<? super String, ? super V> action);
  void replaceAllStringKeys(BiFunction<? super String, ? super V, ? extends V> function);
  void replaceAllStringKeys(Function<? super String, ? extends V> function);
  V computeIfAbsentStringKey(CharSequence key, Function<? super String, ? extends V> function);
  V computeIfPresentStringKey(CharSequence key, Function<? super String, ? extends V> function);
  V computeStringKey(CharSequence key, BiFunction<? super String, ? super V, ? extends V> function);
  V mergeStringKey(CharSequence key, V v, BiFunction<? super String, ? super V, ? extends V> function);

}
>>