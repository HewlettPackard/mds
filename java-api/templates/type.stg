/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"

pList(params) ::= "$if(params)$<$params;separator={,}$>$endif$"
pClass(class, params) ::= "$class$$pList(params)$"
pType(params) ::= "Type$pList(params)$"

tSuper(directSupers,dsParams,class,params) ::= <<
$if(directSupers)$$directSupers,dsParams: {s,p| $s$.Type$p$};separator=", "$$else$ManagedType<$pClass(class,params)$>$endif$
>>

type(class, params, bounds, directSupers, dsParams, allSupers, extras, typeInit) ::= <<
import java.util.List;
$if(!params)$
$if (typeInit)$
static Type TYPE = $typeInit$;
$else$
import com.hpl.mds.impl.Stub;
static Type TYPE = Stub.notImplemented();  // TODO
$endif$
$endif$

interface Type$if(params)$<$params, bounds: {p,b| $p$ extends $b$};separator=", "$>$endif$ extends $tSuper(directSupers,dsParams,class,params)$ {
  @Override  
  $pClass(class,params)$ construct(Object...ctorParams);

  $pClass(class,params)$ create(Usage hints);
$allSupers:{ s |
  $pClass(class,params)$ create($s$.Usage hints);   
}$

  $pClass(class,params)$ create();

  @Override
  $ccName()$ lookupName(Namespace ns, CharSequence name);
  @Override
  default $ccName()$ lookupName(HName name) {
    HName n = HName.getCurrent().resolve(name);
    return lookupName(n.getParent().asNamespace(), n.getName());
  \}
  @Override
  default $ccName()$ lookupName(CharSequence...segments) {
    return lookupName(HName.from(segments));
  \}
  @Override
  default $ccName()$ lookupName(char sep, CharSequence...segments) {
    return lookupName(HName.from(sep, segments));
  \}
  @Override
  default $ccName()$ lookupName(List<? extends CharSequence> segments) {
    return lookupName(HName.from(segments));
  \}
  @Override
  default $ccName()$ lookupName(char sep, List<? extends CharSequence> segments) {
    return lookupName(HName.from(sep, segments));
  \}
$if(extras)$
  $extras$
$endif$
}

@Override
$if(!params)$default $endif$$pType(params)$ type()$if(params)$;$else${
  return TYPE;
}$endif$

>>

