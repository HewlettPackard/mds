/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
package() ::= "com.hpl.mds"
class() ::= "ManagedType"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

contents(prims, masked, types) ::= <<
package $package()$;

import java.util.List;


public interface $class()$<T extends ManagedObject> {
$masked: { type |
  static final $type.managedName$.Type $type.shortUpper$ = $type.managedName$.TYPE;
}
$

$masked: { type |
  static final Managed$type.shortName$Array.Type ARRAY_OF_$type.shortUpper$ = Managed$type.shortName$Array.TYPE; 
}
$

$masked: { type |
  static final Managed$type.shortName$List.Type LIST_OF_$type.shortUpper$ = Managed$type.shortName$List.TYPE; 
}
$

$masked: { type |
  static final Managed$type.shortName$Set.Type SET_OF_$type.shortUpper$ = Managed$type.shortName$Set.TYPE; 
}
$
  
$masked: { type |
  static final ManagedStringTo$type.shortName$Map.Type MAP_FROM_STRING_TO_$type.shortUpper$ = ManagedStringTo$type.shortName$Map.TYPE; 
}
$
  
$masked: { type |
  static $type.managedName$.Type for$type.shortName$() {
    return $type.shortUpper$;
  \}
}
$
  ManagedArray.Type<T> inArray();
  
  static <V extends ManagedObject>
  ManagedArray.Type<V> forArrayOf(ManagedType<V> valType) {
    return valType.inArray();
  \}
  
  
$masked: { type |
  static Managed$type.shortName$Array.Type forArrayOf($type.managedName$.Type type) {
    return ARRAY_OF_$type.shortUpper$;
  \}
}
$

$masked: { type |
  static Managed$type.shortName$Array.Type forArrayOf$type.shortName$() {
    return ARRAY_OF_$type.shortUpper$;
  \}
}
$

  ManagedList.Type<T> inList();

  static <V extends ManagedObject>
  ManagedList.Type<V> forListOf(ManagedType<V> valType) {
    return valType.inList();
  \}

$masked: { type |
  static Managed$type.shortName$List.Type forListOf($type.managedName$.Type type) {
    return LIST_OF_$type.shortUpper$;
  \}
}
$
  
  
$masked: { type |
  static Managed$type.shortName$List.Type forListOf$type.shortName$() {
    return LIST_OF_$type.shortUpper$;
  \}
}
$
  
  ManagedSet.Type<T> inSet();
  
  static <V extends ManagedObject>
  ManagedSet.Type<V> forSetOf(ManagedType<V> valType) {
    return valType.inSet();
  \}
  
$masked: { type |
  static Managed$type.shortName$Set.Type forSetOf$type.shortName$() {
    return SET_OF_$type.shortUpper$;
  \}
}
$

$masked: { type |
  static Managed$type.shortName$Set.Type forSetOf($type.managedName$.Type type) {
    return SET_OF_$type.shortUpper$;
  \}
}
$

  default <V extends ManagedObject> 
  ManagedMap.Type<T,V> inMapTo(ManagedType<V> valType) {
    return valType.inMapFrom(this);
  }
  
$masked: { type |
  default ManagedMapTo$type.shortName$.Type<T> inMapTo($type.managedName$.Type valType) {
    return $type.shortUpper$.inMapFrom(this);
  \}
}
$  
  
  <K extends ManagedObject>
  ManagedMap.Type<K,T> inMapFrom(ManagedType<K> keyType);
  
  ManagedMapFromString.Type<T> inMapFromString();
  
  default ManagedMapFromString.Type<T> inMapFrom(ManagedString.Type keyType) {
    return inMapFromString();
  }
  
  static <K extends ManagedObject, V extends ManagedObject>
  ManagedMap.Type<K,V> forMap(ManagedType<K> keyType, ManagedType<V> valType) {
    return valType.inMapFrom(keyType);
  }
  
$masked: { type |
  static <K extends ManagedObject>
  ManagedMapTo$type.shortName$.Type<K> forMap(ManagedType<K> keyType, $type.managedName$.Type valType) {
    return $type.shortUpper$.inMapFrom(keyType);
  \}
}
$

  static <V extends ManagedObject>
  ManagedMapFromString.Type<V> forMapFromString(ManagedType<V> valType) {
    return valType.inMapFromString();
  }
  
$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map.Type forMapFromString($type.managedName$.Type valType) {
    return MAP_FROM_STRING_TO_$type.shortUpper$;
  \}
}
$

  static <V extends ManagedObject>
  ManagedMapFromString.Type<V> forMap(ManagedString.Type keyType, ManagedType<V> valType) {
    return valType.inMapFromString();
  }
  
  
$masked: { type |
  static 
  ManagedStringTo$type.shortName$Map.Type forMap(ManagedString.Type keyType, $type.managedName$.Type valType) {
    return MAP_FROM_STRING_TO_$type.shortUpper$;
  \}
}
$


$masked: { type |
  default ManagedMap.Type<T, $type.managedName$> inMapTo$type.shortName$() {
    return inMapTo($type.shortUpper$);
  \}
}
$
  
  
$masked: { type |
  static <K extends ManagedObject>
  ManagedMapTo$type.shortName$.Type<K> forMapTo$type.shortName$(ManagedType<K> keyType) {
    return ManagedType.forMap(keyType, $type.shortUpper$);
  \}
}
$
  // ManagedType.fieldIn invoked for Record field in RecordType -- susspence
  
  <RT extends ManagedRecord> Field<RT,T> 
  fieldIn(RecordType<RT> recType, CharSequence name);

  <RT extends ManagedRecord> Field<RT,T> 
  findFieldIn(RecordType<RT> recType, CharSequence name);
  
  T construct(Object... ctorParams); // Do we want this?
  
  default ManagedArray<T> createArray(long size) {
    return inArray().create(size);
  }
  
  default ManagedArray<T> createArray(T[] arr) {
    return inArray().create(arr);
  }
  
$["ManagedArray", "ManagedOrdered"] : { c |
  default ManagedArray<T> createArray($c$.Usage hints) {
    return inArray().create(hints);
  \}
}  
$  
  default ManagedList<T> createList() {
    return inList().create();
  }
  
$["ManagedList", "ManagedCollection", "ManagedContainer"] : { c |
  default ManagedList<T> createList($c$.Usage hints) {
    return inList().create(hints);
  \}
}  
$  
  default ManagedSet<T> createSet() {
    return inSet().create();
  }
$["ManagedSet", "ManagedCollection", "ManagedContainer"] : { c |
  default ManagedSet<T> createSet($c$.Usage hints) {
    return inSet().create(hints);
  \}
}  
$  
  
  default <K extends ManagedObject> 
  ManagedMap<K,T> createMapFrom(ManagedType<K> keyType) {
    return inMapFrom(keyType).create();
  }
$["ManagedMap", "ManagedContainer"] : { c |
  default <K extends ManagedObject>
  ManagedMap<K,T> createMapFrom(ManagedType<K> keyType, $c$.Usage hints) {
    return inMapFrom(keyType).create(hints);
  \}
}  
$  
  
  default ManagedMapFromString<T> createMapFromString() {
    return inMapFromString().create();
  }
$["ManagedMapFromString", "ManagedMap", "ManagedContainer"] : { c |
  default ManagedMapFromString<T> createMapFromString($c$.Usage hints) {
    return inMapFromString().create(hints);
  \}
}  
$  
  
  default ManagedMapFromString<T> createMapFrom(ManagedString.Type keyType) {
    return createMapFromString();
  }
  
$["ManagedMapFromString", "ManagedMap", "ManagedContainer"] : { c |
  default ManagedMapFromString<T> createMapFrom(ManagedString.Type keyType, $c$.Usage hints) {
    return createMapFromString(hints);
  \}
}  
$  

  T lookupName(Namespace ns, CharSequence name);
  default T lookupName(HName name) {
    HName n = HName.getCurrent().resolve(name);
    return lookupName(n.getParent().asNamespace(), n.getName());
  }
  default T lookupName(CharSequence...segments) {
    return lookupName(HName.from(segments));
  }
  default T lookupName(char sep, CharSequence...segments) {
    return lookupName(HName.from(sep, segments));
  }
  default T lookupName(List<? extends CharSequence> segments) {
    return lookupName(HName.from(segments));
  }
  default T lookupName(char sep, List<? extends CharSequence> segments) {
    return lookupName(HName.from(sep, segments));
  }
  
  T bindIn(Namespace ns, CharSequence name, T val, Prior prior);
  default T bindIn(Namespace ns, CharSequence name, T val) {
    return bindIn(ns, name, val, Prior.wasAny());
  }
  
}
>>