/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
import "type.stg"
import "covariant.stg"
package(type) ::= "com.hpl.mds"
class(type) ::= "$type.managedName$"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.managedName, type.boxedName, type.primName, type.fieldName, type.shortName, type.implName, types)$
>>                      

body(class, type, managed, boxed, prim, field, short, impl, types) ::= <<
package $package(type)$;

import java.util.List;

import com.hpl.mds.impl.$impl$;
import com.hpl.mds.impl.$managed$Type;


public interface $class$ extends ManagedPrimitive<$boxed$>,Comparable<$class$>$if(type.numeric)$, ManagedNumber$endif$$whenString({, CharSequence})$ {
$if(type.bool)$
  static final ManagedBoolean TRUE = $impl$.TRUE;
  static final ManagedBoolean FALSE = $impl$.FALSE;
$endif$  
  
  static final Type TYPE = $managed$Type.INSTANCE;
  static interface Type extends ManagedPrimitive.Type<$managed$> {
    
    <RT extends ManagedRecord> $field$<RT> fieldIn(RecordType<RT> recType, CharSequence name);

    <RT extends ManagedRecord> $field$<RT> findFieldIn(RecordType<RT> recType, CharSequence name);
    

    $val()$ lookupNameAs$short$(Namespace ns, CharSequence name);
    default $val()$ lookupNameAs$short$(HName name) {
      HName n = HName.getCurrent().resolve(name);
      return lookupNameAs$short$(n.getParent().asNamespace(), n.getName());
    }
    default $val()$ lookupNameAs$short$(CharSequence...segments) {
      return lookupNameAs$short$(HName.from(segments));
    }
    default $val()$ lookupNameAs$short$(char sep, CharSequence...segments) {
      return lookupNameAs$short$(HName.from(sep, segments));
    }
    default $val()$ lookupNameAs$short$(List<? extends CharSequence> segments) {
      return lookupNameAs$short$(HName.from(segments));
    }
    default $val()$ lookupNameAs$short$(char sep, List<? extends CharSequence> segments) {
      return lookupNameAs$short$(HName.from(sep, segments));
    }
  
    $val()$ bindIn(Namespace ns, CharSequence name, $arg()$ val, Prior prior);
    default $val()$ bindIn(Namespace ns, CharSequence name, $arg()$ val) {
      return bindIn(ns, name, val, Prior.wasAny());
    }
    
    default $managed$ bindIn(Namespace ns, CharSequence name, $managed$ val, Prior prior) {
      bindIn(ns, name, $managed$.as$short$(val), prior);
      return val;
    }
        
    
    @Override
    default Managed$type.shortName$Set.Type inSet() {
      return Managed$type.shortName$Set.TYPE;
    }

    @Override
    default Managed$type.shortName$Array.Type inArray() {
      return Managed$type.shortName$Array.TYPE;
    }
    
    @Override
    default Managed$type.shortName$List.Type inList() {
      return Managed$type.shortName$List.TYPE;
    }
    
    @Override
    default <K extends ManagedObject> 
    ManagedMapTo$type.shortName$.Type<K> inMapFrom(ManagedType<K> keyType) {
      return ManagedMapTo$type.shortName$.typeMappingFrom(keyType);
    }
    
    @Override
    default
    ManagedStringTo$type.shortName$Map.Type inMapFrom(ManagedString.Type keyType) {
      return inMapFromString();
    }
    
    
    @Override
    default ManagedStringTo$type.shortName$Map.Type inMapFromString() {
      return ManagedStringTo$type.shortName$Map.TYPE;
    }
    
$whenString({
    default <V extends ManagedObject> 
    ManagedMapFromString.Type<V> inMapTo(ManagedType<V> valType) {
      return ManagedMapFromString.typeMappingTo(valType);
    \}
$types.maskedTypes: { t |     

    default ManagedStringTo$t.shortName$Map.Type inMapTo($t.managedName$.Type valType) {
      return ManagedStringTo$t.shortName$Map.TYPE;
    \}
}$

})$

    static $managed$ create($arg()$ value) {
    	return $impl$.valueOf(value);  
    \}
    
    
    @Override
    $class$ construct(Object... ctorParams);
    
    
    default $managed$Array createArray(long size) {
      return inArray().create(size);
    }
  
    default $managed$Array createArray($arg()$[] arr) {
      return inArray().create(arr);
    }
  
$[{$managed$Array}, "ManagedArray", "ManagedOrdered"] : { c |
    default $managed$Array createArray($c$.Usage hints) {
      return inArray().create(hints);
    \}
} 
$ 

    default $managed$List createList() {
      return inList().create();
    }
  
$[{$managed$List}, "ManagedList", "ManagedCollection", "ManagedContainer"] : { c |
    default $managed$List createList($c$.Usage hints) {
      return inList().create(hints);
    \}
}  
$  
    default $managed$Set createSet() {
      return inSet().create();
    }
$[{$managed$Set}, "ManagedSet", "ManagedCollection", "ManagedContainer"] : { c |
    default $managed$Set createSet($c$.Usage hints) {
      return inSet().create(hints);
    \}
}  
$  
  
    default <K extends ManagedObject> 
    ManagedMapTo$short$<K> createMapFrom(ManagedType<K> keyType) {
      return inMapFrom(keyType).create();
    }
$[{ManagedMapTo$short$}, "ManagedMap", "ManagedContainer"] : { c |
    default <K extends ManagedObject>
    ManagedMapTo$short$<K> createMapFrom(ManagedType<K> keyType, $c$.Usage hints) {
      return inMapFrom(keyType).create(hints);
    \}
}  
$  
  
    default ManagedStringTo$short$Map createMapFromString() {
      return inMapFromString().create();
    }
$[{ManagedStringTo$short$Map}, "ManagedMapFromString", "ManagedMap", "ManagedContainer"] : { c |
    default ManagedStringTo$short$Map createMapFromString($c$.Usage hints) {
      return inMapFromString().create(hints);
    \}
}  
$  
  
    default ManagedStringTo$short$Map createMapFrom(ManagedString.Type keyType) {
      return createMapFromString();
    }
  
$[{ManagedStringTo$short$Map}, "ManagedMapFromString", "ManagedMap", "ManagedContainer"] : { c |
    default ManagedStringTo$short$Map createMapFrom(ManagedString.Type keyType, $c$.Usage hints) {
      return createMapFromString(hints);
    \}
}  
$  
    
  }
  
  @Override
  default Type type() {
    return TYPE;
  }
  
  
  static $class$ valueOf($arg()$ val) {
$if(type.bool)$
    return val ? TRUE : FALSE;
$else$
    return $impl$.valueOf(val);
$endif$    
  }

  int compareTo($arg()$ val);

  @Override
  default $boxed$ boxedVal() {
    return as$short$();
  }
  
  $val()$ as$type.shortName$();

  static $val()$ as$type.shortName$($class$ value) {
    return value == null ? $ifString({null},{$if(type.bool)$false$else$0$endif$})$ : value.as$type.shortName$();
  }
  
$whenString({
  $val()$ asStringNoCache();

  static $val()$ asStringNoCache($class$ value) {
    return value == null ? null : value.asStringNoCache();
  \}

  void clearCache();
})$

  $bind(class, [])$
  
}
>>