/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
package() ::= "com.hpl.mds"
class() ::= "HName"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

lookup(templates, ret, arg) ::= <<
  default $templates$ $ret$ lookup($arg$ type) {
    return getParent().asNamespace().lookup(getName(), type);
  }
>>
contents(prims, masked, types) ::= <<
package $package()$;

import java.util.Collection;
import java.util.List;
import java.util.Arrays;  

import com.hpl.mds.impl.HNameImpl;



public interface $class()$ extends Iterable<ManagedString>
{
  static final char DEFAULT_SEPARATOR = '/';
  
  interface DirUse extends AutoCloseable {}
  
  static HName from(char separator, CharSequence...segments) {
    return from(separator, Arrays.asList(segments));
  }
  
  static HName from(CharSequence...segments) {
    return from(DEFAULT_SEPARATOR, segments);
  }
  
  static HName from(char separator, List<? extends CharSequence> segments) {
    return HNameImpl.from(separator, segments);
  }
  
  static HName from(List<? extends CharSequence> segments) {
    return from(DEFAULT_SEPARATOR, segments);
  }
  
  static HName root() {
    return HNameImpl.root();
  }
  
  static HName getCurrent() {
    return HNameImpl.getCurrent();
  }
  
  int length();
  
  List<ManagedString> segments();
  
  List<String> stringSegments();
  
  List<HName> prefixes(boolean includeRoot);
  
  default List<HName> prefixes() {
    return prefixes(false);
  }
  
  ManagedString getName();
  
  HName getParent();
  
  boolean isRoot();
  
  boolean isAbsolute();
  
  DirUse makeCurrent();
  
  ManagedString asManagedString(char sep);
  
  default ManagedString asManagedString() {
    return asManagedString(DEFAULT_SEPARATOR);
  }
  
  String asString(char sep);
  
  default String asString() {
    return asString(DEFAULT_SEPARATOR);
  }
  
  HName resolve(HName continuation);
  
  default HName resolve(char sep, CharSequence...segments) {
    return resolve(sep, Arrays.asList(segments));
  }
  
  default HName resolve(CharSequence...segments) {
    return resolve(DEFAULT_SEPARATOR, segments);
  }

  default HName resolve(char sep, List<? extends CharSequence> segments) {
    return resolve(from(sep, segments));
  }
  
  default HName resolve(List<? extends CharSequence> segments) {
    return resolve(DEFAULT_SEPARATOR, segments);
  }
  
  Namespace asNamespace();

  default boolean isBound(Prior prior) {
    return getParent().asNamespace().isBound(getName(), prior);
  }
  default boolean isBound() {
    return isBound(Prior.wasBound());
  } 
  default boolean isBoundTo(ManagedObject obj) {
    return isBound(Prior.was(obj));
  }
  default boolean isBoundToType(ManagedType<?> type) {
    return isBound(Prior.was(type));
  }
  
  
  default <T extends ManagedObject> T bind(T obj, Prior prior) {
    ManagedObject val = obj.bindName(prior, getParent().asNamespace(), getName());
    /*
     * By contravariance, this is guaranteed to work
     */
    @SuppressWarnings("unchecked")
    T dcVal = (T)val;
    return dcVal;
  }
  
  default <T extends ManagedObject> T bind(T obj) {
    return bind(obj, Prior.wasAny());
  }

$masked: { type |
$whenString({
  /*
   * Since ManagedString is a CharSequence, if this was called bind(),
   * passing a managed string would be ambiguous between this and the
   * one that returns a ManagedString
   */
})$
  default $val()$ bind$whenString({String})$($arg()$ v, Prior prior) {
    return getParent().asNamespace().bind(getName(), v, prior);
  \}
  default $val()$ bind$whenString({String})$($arg()$ v) {
    return bind$whenString({String})$(v, Prior.wasAny());
  \}
}
$  
  
  default void unbind(Prior prior) {
    getParent().asNamespace().unbind(getName(), prior);
  }
  default boolean unbind() {
    return getParent().asNamespace().unbind(getName());
  }
  boolean alias(HName...aliases);
  boolean alias(Collection<? extends HName> aliases);
  
  $lookup("<T extends ManagedObject>", "T", "ManagedType<T>")$
  
$masked : { type |
  $lookup("", type.managedName, {$type.managedName$.Type})$
}
$  

$masked : { type |
  default $val()$ lookup$type.shortName$() {
    return getParent().asNamespace().lookup$type.shortName$(getName());
  \}
}
$  

  $lookup("<V extends ManagedObject>", "ManagedList<V>", "ManagedList.Type<V>")$

$masked : { type |
  $lookup("", {$type.managedName$List}, {$type.managedName$List.Type})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedSet<V>", "ManagedSet.Type<V>")$

$masked : { type |
  $lookup("", {$type.managedName$Set}, {$type.managedName$Set.Type})$
}
$  

  $lookup("<K extends ManagedObject, V extends ManagedObject>", "ManagedMap<K,V>", "ManagedMap.Type<K,V>")$

$masked : { type |
  $lookup("<K extends ManagedObject>", {ManagedMapTo$type.shortName$<K>}, {ManagedMapTo$type.shortName$.Type<K>})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedMapFromString<V>", "ManagedMapFromString.Type<V>")$

$masked : { type |
  $lookup("", {ManagedStringTo$type.shortName$Map}, {ManagedStringTo$type.shortName$Map.Type})$
}
$  

}
>>