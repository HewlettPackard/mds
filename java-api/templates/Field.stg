/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
package() ::= "com.hpl.mds"
class() ::= "Field"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

contents(prims, masked, types) ::= <<
package $package()$;

import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.Consumer;

import com.hpl.mds.callbacks.ChangeHandlerRemovalHook;
import com.hpl.mds.callbacks.ChangeHandler;
import com.hpl.mds.callbacks.FieldChange;

public interface Field<RT extends ManagedRecord, FT extends ManagedObject> 
extends Function<RT, FT>
{

  FT get(RT record);
  FT peek(RT record);
   
  public FT set(RT rec, FT val);
  public FT getAndSet(RT rec, FT val);

  public void initFinal(RT rec, FT val);
  
  public boolean change(RT rec, FT expected, FT val);
  public boolean change(RT rec, Holder<FT> holdsExpected, FT val);
  
  public ManagedString name();
  
  public RecordType<RT> recordType();
  
  public ManagedType<FT> valueType();
  
  public static <RT extends ManagedRecord, FT extends ManagedObject>
  Field<RT,FT> in(RecordType<RT> recType, CharSequence name, ManagedType<FT> valType) {
     return valType.fieldIn(recType, name);
  }

  public static <RT extends ManagedRecord, ET extends ManagedObject>
  ListField<RT,ET> in(RecordType<RT> recType, CharSequence name, ManagedList.Type<ET> valType) {
    return valType.fieldIn(recType, name);
  }
  public static <RT extends ManagedRecord, ET extends ManagedObject>
  SetField<RT,ET> in(RecordType<RT> recType, CharSequence name, ManagedSet.Type<ET> valType) {
    return valType.fieldIn(recType, name);
  }
  public static <RT extends ManagedRecord, KT extends ManagedObject, VT extends ManagedObject>
  MapField<RT,KT,VT> in(RecordType<RT> recType, CharSequence name, ManagedMap.Type<KT,VT> valType) {
    return valType.fieldIn(recType, name);
  }
  
$masked: { type |
  public static <RT extends ManagedRecord>
  $type.fieldName$<RT> in(RecordType<RT> recType, CharSequence name, $type.managedName$.Type valType) {
    return valType.fieldIn(recType, name);
  \}
}
$  
  
  
$masked: { type |
  public static <RT extends ManagedRecord>
  $type.fieldName$<RT> $type.shortLower$FieldIn(RecordType<RT> recType, CharSequence name) {
    return Field.in(recType, name, $type.managedName$.TYPE);
  \}
}
$  
  public static <RT extends ManagedRecord, ET extends ManagedObject>
  ListField<RT,ET> listFieldIn(RecordType<RT> recType, CharSequence name, ManagedType<ET> eltType) {
    return in(recType, name, ManagedList.typeContaining(eltType));
  }
  public static <RT extends ManagedRecord, ET extends ManagedObject>
  SetField<RT,ET> setFieldIn(RecordType<RT> recType, CharSequence name, ManagedType<ET> eltType) {
    return in(recType, name, ManagedSet.typeContaining(eltType));
  }
  public static <RT extends ManagedRecord, KT extends ManagedObject, VT extends ManagedObject>
  MapField<RT,KT,VT> mapFieldIn(RecordType<RT> recType, CharSequence name, ManagedType<KT> keyType, ManagedType<VT> valType) {
    return in(recType, name, ManagedMap.typeMapping(keyType, valType));
  }

  
  
  public static <RT extends ManagedRecord, FT extends ManagedObject>
  Field<RT,FT> findIn(RecordType<RT> recType, CharSequence name, ManagedType<FT> valType) {
    return valType.findFieldIn(recType, name);
  }
  public static <RT extends ManagedRecord, ET extends ManagedObject>
  ListField<RT,ET> findIn(RecordType<RT> recType, CharSequence name, ManagedList.Type<ET> valType) {
    return valType.findFieldIn(recType, name);
  }
  public static <RT extends ManagedRecord, ET extends ManagedObject>
  SetField<RT,ET> findIn(RecordType<RT> recType, CharSequence name, ManagedSet.Type<ET> valType) {
    return valType.findFieldIn(recType, name);
  }
  public static <RT extends ManagedRecord, KT extends ManagedObject, VT extends ManagedObject>
  MapField<RT,KT,VT> findIn(RecordType<RT> recType, CharSequence name, ManagedMap.Type<KT,VT> valType) {
    return valType.findFieldIn(recType, name);
  }
  
$masked: { type |
  public static <RT extends ManagedRecord>
  $type.fieldName$<RT> findIn(RecordType<RT> recType, CharSequence name, $type.managedName$.Type valType) {
    return valType.findFieldIn(recType, name);
  \}
}
$  
  
$masked: { type |
  public static <RT extends ManagedRecord>
  $type.fieldName$<RT> find$type.fieldName$In(RecordType<RT> recType, CharSequence name) {
    return Field.findIn(recType, name, $type.managedName$.TYPE);
  \}
}
$  
  
  
  
  static <RT extends ManagedRecord, ET extends ManagedObject>
  ListField<RT,ET> findListFieldIn(RecordType<RT> recType, CharSequence name, ManagedType<ET> eltType) {
    return findIn(recType, name, ManagedList.typeContaining(eltType));
  }
  static <RT extends ManagedRecord, ET extends ManagedObject>
  SetField<RT,ET> findSetFieldIn(RecordType<RT> recType, CharSequence name, ManagedType<ET> eltType) {
    return findIn(recType, name, ManagedSet.typeContaining(eltType));
  }
  static <RT extends ManagedRecord, KT extends ManagedObject, VT extends ManagedObject>
  MapField<RT,KT,VT> findMapFieldIn(RecordType<RT> recType, CharSequence name, ManagedType<KT> keyType, ManagedType<VT> valType) {
    return findIn(recType, name, ManagedMap.typeMapping(keyType, valType));
  }

  @Override
  default FT apply(RT record) {
    return get(record);
  }
  
  ChangeHandlerRemovalHook afterChange(ChangeHandler<? super FieldChange<? super RT, ? super FT>\> handler);  
  default ChangeHandlerRemovalHook afterChange(Consumer<? super FieldChange<? super RT, ? super FT>\> handler) {
    return afterChange((change, changeSet) -> handler.accept(change));
  }  
  
}
>>
