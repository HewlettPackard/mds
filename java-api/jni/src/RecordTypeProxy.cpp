/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/* C++ code implementing native methods of Java class:
 *   com.hpl.mds.impl.RecordTypeProxy
 */

#include "mds-debug.h"
#include <jni.h>
#include "mds_core_api.h"                            // MDS Core API
#include "mds_jni.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;

extern "C"
{

  JNIEXPORT
  void
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_release (JNIEnv *jEnv, jclass,
						 jlong handleIndex)
  {
    exception_handler (jEnv, [=]
      {
	indexed<record_type_handle> self
	  { handleIndex};
	self.release();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_declareType__J (JNIEnv *jEnv, jobject,
							jlong nameHIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<interned_string_handle> name
	  { nameHIndex};
        // std::cout << "Looking up record type " << *name << std::endl;
	/*
	 *  TODO: We need to decide what to do with the fact that we have const and non-const
	 *  record_type_handles (created as non-const, but const in records and fields), but the
	 *  handle stores won't consider them the same.  This is a problem!!!
	 */

	indexed<record_type_handle> rt
	  { record_type_handle::declare(*name)};
	return rt.return_index();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_declareType__JJ (JNIEnv *jEnv, jobject,
							 jlong nameHIndex,
							 jlong superHIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<interned_string_handle> name
	  { nameHIndex};
	indexed<record_type_handle> super
	  { superHIndex};
        // std::cout << "Looking up record type " << *name << std::endl;
	/*
	 *  TODO: We need to decide what to do with the fact that we have const and non-const
	 *  record_type_handles (created as non-const, but const in records and fields), but the
	 *  handle stores won't consider them the same.  This is a problem!!!
	 */

	indexed<record_type_handle> rt
	  { record_type_handle::declare(*name, *super)};
	return rt.return_index();
      });
  }

  JNIEXPORT
  jboolean
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_bindHandle (JNIEnv *jEnv, jobject,
						    jlong hIndex,
						    jlong nsHIndex,
						    jlong nameHIndex,
						    jlong valHandle)
  {
    ensure_thread_initialized(jEnv);
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> rt
	  { hIndex};
	indexed<namespace_handle> ns
	  { nsHIndex};
	indexed<interned_string_handle> name
	  { nameHIndex};
	indexed<managed_record_handle> val
	  { valHandle};
	return ns->bind<kind::RECORD>(*name, *val);
      });
  }

  JNIEXPORT
  jboolean
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_isSameAs (JNIEnv *jEnv, jobject,
						  jlong aHIndex, jlong bHIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> a
	  { aHIndex};
	indexed<record_type_handle> b
	  { bHIndex};
	return a->is_same_as(*b);
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_ensureCreated (JNIEnv *jEnv, jobject,
						       jlong hIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> rt
	  { hIndex};
	indexed<const_record_type_handle> current
	  { rt->ensure_created()};
	return current.return_index();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_lookupHandle (JNIEnv *jEnv, jobject,
						      jlong hIndex,
						      jlong nsHIndex,
						      jlong nameHIndex)
  {
    ensure_thread_initialized(jEnv);
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> self
	  { hIndex};
	indexed<namespace_handle> ns
	  { nsHIndex};
	indexed<interned_string_handle> name
	  { nameHIndex};
	indexed<managed_record_handle> val
        { ns->lookup(*name, *self)};
	return val.return_index();

      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_nameHandle (JNIEnv *jEnv, jclass,
						    jlong handleIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> self
	  { handleIndex};
	indexed<interned_string_handle> name
	  { self->name()};
	return name.return_index();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_RecordTypeProxy_superHandle (JNIEnv *jEnv, jclass,
						     jlong handleIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> self
	  { handleIndex};
	indexed<const_record_type_handle> super_type
	  { self->super_type()};
	return super_type.return_index();
      });
  }

}
