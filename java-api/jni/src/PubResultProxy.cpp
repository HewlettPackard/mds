/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


#include "mds-debug.h"
#include <jni.h>
#include "mds_core_api.h"                           // MDS Core API
#include "mds_jni.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;



extern "C" {


JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_PubResultProxy_release
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  exception_handler(jEnv, [=]{
      indexed<publication_attempt_handle> self { handleIndex };
      self.release();
    });
}

JNIEXPORT
jboolean
JNICALL
Java_com_hpl_mds_impl_PubResultProxy_succeeded
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
      indexed<publication_attempt_handle> self { handleIndex };
      return self->succeeded();
    });
}

JNIEXPORT
jlong
JNICALL Java_com_hpl_mds_impl_PubResultProxy_sourceContextIndex
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
      indexed<publication_attempt_handle> self { handleIndex };
      indexed<iso_context_handle> ctxt { self->source_context() };
      return ctxt.return_index();
    });
}

JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_PubResultProxy_nToRedo
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
      indexed<publication_attempt_handle> self { handleIndex };
      return self->n_to_redo();
    });
}

  

JNIEXPORT
jlongArray
JNICALL
Java_com_hpl_mds_impl_PubResultProxy_redoTasksByStartTime
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  // I originally erroneously had this returning a TaskProxy[].  I'm
  // leaving the code here to remind myself how I did it.  After this,
  // the array was created using NewObjectArray(), the TaskProxy using
  // CallStaticObjectMethod(), and the element set using
  // SetObjectArrayElement().

  /*
  static const jclass c = find_class(jEnv, "com/hpl/mds/impl/TaskProxy");
  if (c == nullptr) {
    return NULL; // exception thrown
  }
  static jmethodID m = find_static_method(jEnv, c,
                                          "fromHandle",
                                          "(J)Lcom/hpl/mds/impl/TaskProxy;");
  if (m == nullptr) {
    return NULL; // exception thrown;
  }
  */
  return exception_handler_wr(jEnv, [=]{
      indexed<publication_attempt_handle> self { handleIndex };
      std::vector<task_handle> tasks { self->redo_tasks_by_start_time() };
      int n = tasks.size();
      //      std::cout << n << " tasks to redo" << std::endl;
      jlongArray array = jEnv->NewLongArray(n);
      for (int i=0; i<n; i++) {
        //        std::cout << "Indexing task " << tasks[i] << std::endl;
        indexed<task_handle> t{tasks[i]};
        //        std::cout << "  Got " << t << std::endl;
        /*
         * We call return_index() rather than peek_index(), because
         * we're handing a reference to fromHandle().  (Which it may
         * release if it already has it.)
         */
        jlong task_index = t.return_index();
        jEnv->SetLongArrayRegion(array, i, 1, &task_index);
      }
      //      std::cout << "Built the array" << std::endl;
      return array;
    });
}

JNIEXPORT
jboolean
JNICALL
Java_com_hpl_mds_impl_PubResultProxy_prepareForRedo
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
      indexed<publication_attempt_handle> self { handleIndex };
      return self->prepare_for_redo();
    });
}
  
}



