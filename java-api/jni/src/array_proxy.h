/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include "mds-debug.h"
#include "mds_core_api.h"                           // MDS Core API
#include "mds_jni.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;

namespace mds
{
  namespace jni
  {
    namespace array_proxy
    {
      template<kind KIND>
	inline void
	release (api_type<kind::LONG> handleIndex)
	{
	  indexed<managed_array_handle<KIND>> self
	    { handleIndex };
	  self.release ();
	}

      template<kind KIND>
	inline api_type<kind::BOOL>
	is_same_as (api_type<kind::LONG> aHIndex, api_type<kind::LONG> bHIndex)
	{
	  indexed<managed_array_handle<KIND>> a
	    { aHIndex };
	  indexed<managed_array_handle<KIND>> b
	    { bHIndex };
	  return a == b;
	}

      template<kind KIND>
	inline api_type<kind::BOOL>
	is_same_object (api_type<kind::LONG> aHIndex, api_type<kind::LONG> bHIndex)
	{
	  indexed<managed_array_handle<KIND>> a
	    { aHIndex };
	  indexed<managed_array_handle<KIND>> b
	    { bHIndex };
	  return a->object() == b->object();
	}

      template<kind KIND>
	inline api_type<kind::BOOL>
	is_same_view_same_object (api_type<kind::LONG> aHIndex,
                                  api_type<kind::LONG> bHIndex)
	{
	  indexed<managed_array_handle<KIND>> a
	    { aHIndex };
	  indexed<managed_array_handle<KIND>> b
	    { bHIndex };
          return a->same_in_prevailing_context(*b);
	}

      template<kind KIND>
	inline api_type<kind::LONG>
	create_array (api_type<kind::LONG> size)
	{
	  indexed<managed_array_handle<KIND>> a
	    { managed_array_handle_by_kind<KIND> ().create_array (size) };
	  return a.return_index ();
	}

      template<kind KIND>
	inline typename str_to_long<KIND>::type
	read_value (api_type<kind::LONG> handleIndex,
                    api_type<kind::LONG> index)
	{
	  indexed<managed_array_handle<KIND>> a
	    { handleIndex };
	  return a->frozen_read (index);
	}

      template<kind KIND>
	inline typename str_to_long<KIND>::type
	peek_value (api_type<kind::LONG> handleIndex,
                    api_type<kind::LONG> index)
	{
	  indexed<managed_array_handle<KIND>> a
	    { handleIndex };
	  return a->free_read (index);
	}

      template<>
	inline typename str_to_long<kind::STRING>::type
	read_value<kind::STRING> (api_type<kind::LONG> handleIndex,
				  api_type<kind::LONG> index)
	{
	  indexed<managed_array_handle<kind::STRING>> a
	    { handleIndex };
	  api_type<kind::STRING> val = a->frozen_read (index);
	  indexed<interned_string_handle> s
	    { val };
	  return s.return_index ();
	}

      template<>
	inline typename str_to_long<kind::STRING>::type
	peek_value<kind::STRING> (api_type<kind::LONG> handleIndex,
				  api_type<kind::LONG> index)
	{
	  indexed<managed_array_handle<kind::STRING>> a
	    { handleIndex };
	  api_type<kind::STRING> val = a->free_read (index);
	  indexed<interned_string_handle> s
	    { val };
	  return s.return_index ();
	}

      template<kind KIND>
	inline typename str_to_long<KIND>::type
	write_value (api_type<kind::LONG> handleIndex,
		     api_type<kind::LONG> index,
		     typename str_to_long<KIND>::type valArg,
                     ret_mode returning = ret_mode::resulting_val)
	{
	  indexed<managed_array_handle<KIND>> a
	    { handleIndex };
	  return a->write (index, valArg, returning);
	}

      template<>
	inline typename str_to_long<kind::STRING>::type
	write_value<kind::STRING> (api_type<kind::LONG> handleIndex,
				   api_type<kind::LONG> index,
				   typename str_to_long<kind::STRING>::type valArg,
                                   ret_mode returning)
	{
	  indexed<managed_array_handle<kind::STRING>> a
	    { handleIndex };
	  indexed<interned_string_handle> s
	    { valArg };
	  indexed<interned_string_handle> old
          { a->write (index, *s, returning) };

	  return old.return_index ();
	}

      template<kind KIND>
	struct handler
	{
	  inline static api_type<KIND>
	  write_value (api_type<kind::LONG> handleIndex,
		       api_type<kind::LONG> index, api_type<KIND> valArg,
                       ret_mode returning = ret_mode::resulting_val)
	  {
	    indexed<managed_array_handle<KIND>> a
	      { handleIndex };

	    return a->write (index, valArg, returning);
	  }

	  inline static api_type<KIND>
	  read_value (api_type<kind::LONG> handleIndex,
		      api_type<kind::LONG> index)
	  {
	    indexed<managed_array_handle<KIND>> a
	      { handleIndex };
	    return a->frozen_read (index);
	  }
	};

      template<>
	struct handler<kind::STRING>
	{
	  inline static api_type<kind::LONG>
	  write_value (api_type<kind::LONG> handleIndex,
		       api_type<kind::LONG> index, api_type<kind::LONG> valArg,
                       ret_mode returning)
	  {
	    indexed<managed_array_handle<kind::STRING>> a
	      { handleIndex };
	    indexed<interned_string_handle> s
	      { valArg };
	    indexed<interned_string_handle> old
            { a->write (index, *s, returning) };

	    return old.return_index ();
	  }

	  inline static api_type<kind::LONG>
	  read_value (api_type<kind::LONG> handleIndex,
		      api_type<kind::LONG> index)
	  {
	    indexed<managed_array_handle<kind::STRING>> a
	      { handleIndex };
	    api_type<kind::STRING> val = a->frozen_read(index);
	    indexed<interned_string_handle> s
	      { val };
	    return s.return_index ();
	  }
	};

      template<kind KIND>
	api_type<kind::LONG>
	inline
	size (api_type<kind::LONG> handleIndex)
	{
          indexed<managed_array_handle<KIND>> a
	    { handleIndex };
	  return a->size ();
	}


      template<kind KIND, ARITH_OP OP>
	inline api_type<KIND>
	modify_value (api_type<kind::LONG> hIndex,
		      api_type<kind::LONG> index, api_type<KIND> amt,
                      ret_mode returning = ret_mode::resulting_val)
	{
	  // Check if OP is supported by the array proxy type :)
	  static_assert(OP == ARITH_OP::add || OP == ARITH_OP::sub ||
	      OP == ARITH_OP::mul || OP == ARITH_OP::div,
	      "Not supported arithmetic operation, please add "
	      "the new operation into the switch block bellow");

	  indexed<managed_array_handle<KIND>> a
	    { hIndex };

	  switch (OP)
	    {
	    case ARITH_OP::add:
	      return a->add (index, amt, returning);
	    case ARITH_OP::sub:
	      return a->sub (index, amt, returning);
	    case ARITH_OP::mul:
	      return a->mul (index, amt, returning);
	    case ARITH_OP::div:
	      return a->div (index, amt, returning);
	    }
	}
    }
  }
}

