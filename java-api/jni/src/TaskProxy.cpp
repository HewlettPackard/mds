/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


/* C++ code implementing native methods of Java class:
 *   com.hpl.mds.impl.IntFieldProxy
 */

#include "mds-debug.h"
#include <jni.h>
#include "mds_core_api.h"                           // MDS Core API
#include "mds_jni.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;



extern "C" {



JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_TaskProxy_release
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  exception_handler(jEnv, [=]{
      //      std::cout << "Releasing task " << handleIndex << std::endl;
      indexed<task_handle> self { handleIndex };
      self.release();
    });
}

JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_TaskProxy_defaultTaskHandle
  (JNIEnv *jEnv, jclass)
{
  return exception_handler_wr(jEnv, [](){
      static indexed<task_handle> h { task_handle::default_task() };
      //      std::cout << "Default task is " << h << std::endl;
      return h.return_index();
    });
}

JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_TaskProxy_pushNewHandle
  (JNIEnv *jEnv, jclass)
{
  ensure_thread_initialized(jEnv);
  return exception_handler_wr(jEnv, [](){
      indexed<task_handle> h { task_handle::push_new() };
      //      std::cout << "Pushing to new task " << h << std::endl;
      return h.return_index();
    });
}

JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_TaskProxy_popHandle
  (JNIEnv *jEnv, jclass)
{
  ensure_thread_initialized(jEnv);
  return exception_handler_wr(jEnv, [](){
      indexed<task_handle> h { task_handle::pop() };
      //      std::cout << "Popping to task " << h << std::endl;
      return h.return_index();
    });
}


JNIEXPORT
jlong
JNICALL Java_com_hpl_mds_impl_TaskProxy_push
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  ensure_thread_initialized(jEnv);
  return exception_handler_wr(jEnv, [=]{
      indexed<task_handle> self { handleIndex };
      // std::cout << "Pushing to existing task " << self << std::endl;
      indexed<task_handle> t { self->push() };
      return t.return_index();
    });
}

JNIEXPORT
jlong
JNICALL Java_com_hpl_mds_impl_TaskProxy_getContext
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  ensure_thread_initialized(jEnv);
  return exception_handler_wr(jEnv, [=]{
      //      std::cout << "Looking for context of task " << handleIndex << std::endl;
      indexed<task_handle> self { handleIndex };
      indexed<iso_context_handle> c { self->get_context() };
      return c.return_index();
    });
}

JNIEXPORT
jlong
JNICALL Java_com_hpl_mds_impl_TaskProxy_getParent
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  ensure_thread_initialized(jEnv);
  return exception_handler_wr(jEnv, [=]{
      indexed<task_handle> self { handleIndex };
      indexed<task_handle> p { self->get_parent() };
      return p.return_index();
    });
}

JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_TaskProxy_addDependent
  (JNIEnv *jEnv, jclass,
   jlong handleIndex,
   jlong otherTask)
{
  ensure_thread_initialized(jEnv);
  return exception_handler(jEnv, [=]{
      indexed<task_handle> self { handleIndex };
      indexed<task_handle> other { otherTask };
      self->add_dependent(*other);
    });
}

JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_TaskProxy_alwaysRedo
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  ensure_thread_initialized(jEnv);
  return exception_handler(jEnv, [=]{
      //      std::cout << "Looking for context of task " << handleIndex << std::endl;
      indexed<task_handle> self { handleIndex };
      self->always_redo();
    });
}

JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_TaskProxy_cannotRedo
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  ensure_thread_initialized(jEnv);
  return exception_handler(jEnv, [=]{
      //      std::cout << "Looking for context of task " << handleIndex << std::endl;
      indexed<task_handle> self { handleIndex };
      self->cannot_redo();
    });
}

}

