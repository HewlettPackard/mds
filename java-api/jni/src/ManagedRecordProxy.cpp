/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/* C++ code implementing native methods of Java class:
 *   com.hpl.mds.impl.ManagedRecordBaseImpl
 */

#include "mds-debug.h"
#include <jni.h>
#include "mds_core_api.h"                                 // MDS Core API
#include "mds_jni.h"

#include <iostream>

using namespace mds;
using namespace mds::api;
using namespace mds::jni;

extern "C"
{

  JNIEXPORT
  void
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_release (JNIEnv *jEnv, jclass,
						    jlong handleIndex)
  {
    // std::cerr << "Releasing record " << handleIndex << std::endl;
    exception_handler (jEnv, [=]
      {
	indexed<managed_record_handle> self
	  { handleIndex};
	self.release();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_recordTypeIndex (JNIEnv *jEnv,
							    jclass,
							    jlong handleIndex)
  {
    ensure_thread_initialized(jEnv);
    return exception_handler_wr (jEnv, [=]
      {
	indexed<managed_record_handle> self
	  { handleIndex};
	indexed<const_record_type_handle> type
	  { self->type()};

//	std::cerr << "\nObject = " << self.peek_index()
//			<< ", type = " << type.peek_index()
//			<< ", type id = " << type->uuid()
//			<< std::endl;

	return type.return_index();
      });
  }

  /*
   * Class:     com_hpl_mds_impl_ManagedRecordBaseImpl
   * Method:    createRecord
   * Signature: (Lcom/hpl/mds/RecordType;)V
   */
  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_createRecord (JNIEnv *jEnv, jobject,
							 jlong recTypeHIndex)
  {
    ensure_thread_initialized(jEnv);
    return exception_handler_wr (jEnv, [=]
      {
	indexed<record_type_handle> rt
	  { recTypeHIndex};
        //        std::cerr << "Creating a record of type " << rt.peek_index() << std::endl;
	indexed<managed_record_handle> rec
	  { rt->create_record()};
        // std::cerr << "Got record " << rec.peek_index() << std::endl;
	return rec.return_index();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_getUUID (JNIEnv *jEnv, jobject,
						    jlong recHIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<managed_record_handle> r
	  { recHIndex};
	return r->uuid().high;
      });
  }

  JNIEXPORT
  jboolean
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_isIdentical (JNIEnv *jEnv, jobject,
						     jlong aHIndex,
						     jlong bHIndex)
  {
    return exception_handler_wr (jEnv, [=]
      {
	indexed<managed_record_handle> a
	  { aHIndex};
	indexed<managed_record_handle> b
	  { bHIndex};
	return a == b;
      });
  }

  JNIEXPORT
  jboolean
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_isSameObject (JNIEnv *jEnv, jclass,
                                                       jlong aHIndex, jlong bHIndex)
  {
    return exception_handler_wr (jEnv, [=] {
        indexed<managed_record_handle> a { aHIndex };
        indexed<managed_record_handle> b { bHIndex };
        return a->object() == b->object();
      });
  }
  JNIEXPORT
  jboolean
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_isSameViewOfSameObject (JNIEnv *jEnv, jclass,
                                                                   jlong aHIndex, jlong bHIndex)
  {
    ensure_thread_initialized(jEnv);
    return exception_handler_wr (jEnv, [=] {
        indexed<managed_record_handle> a { aHIndex };
        indexed<managed_record_handle> b { bHIndex };
        return a->same_in_prevailing_context(*b);
      });
  }

  JNIEXPORT
  void
  JNICALL
  Java_com_hpl_mds_impl_ManagedRecordProxy_freeHandle (JNIEnv *jEnv, jobject,
						       jlong recHIndex)
  {
    exception_handler (jEnv, [=]
      {
	indexed<managed_record_handle> r
	  { recHIndex};
	r.release();
      });
  }

}
