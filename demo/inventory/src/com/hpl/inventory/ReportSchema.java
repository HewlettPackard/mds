/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.inventory;

import java.io.PrintStream;
import java.util.function.IntFunction;

import com.hpl.erk.TopN;
import com.hpl.mds.IsolationContext;
import com.hpl.mds.ManagedArray;
import com.hpl.mds.annotations.RecordSchema;
import com.hpl.mds.annotations.Final;
import com.hpl.mds.IntHolder;

import java.util.function.ToIntFunction;

@RecordSchema(name = "com.hpl.inventory.Report")
public interface ReportSchema {
	
	@Final String name();
	@Final ListOfProducts allProducts();
	@Final ManagedArray<Product> topN();
	@Final int totalRevenue();

	
	static void Report(Report.Constructing self, String name, Inventory inventory, int nInTop) {
		self.setName(name);
		ListOfProducts products = IsolationContext.inReadOnlySnapshot(inventory::getProducts);
		self.setAllProducts(products);
		// self.setTotalRevenue(0);
		TopN<Product> highestRevenue = new TopN<>(nInTop, (a,b)-> {
			int value = Integer.compare(b.getRevenue(), a.getRevenue());
			if (value == 0) {
				value = a.getName().compareTo(b.getName());
			}
			return value;
		});
		IntHolder r = new IntHolder();
		products.forEach((p)->{
			highestRevenue.add(p);
			r.value += p.getRevenue();
		});
		self.setTotalRevenue(r.value);
		Product[] array = highestRevenue.stream().toArray(Product[]::new);
//		self.setTopN(ManagedArray.from(Product.TYPE, array));
		self.setTopN(Product.TYPE.inArray().create(array));
	}
	
	static void Report(Report.Constructing self, String name, Inventory inventory) {
		self.thisInit(name, inventory, 3);
	}
	
	static String formatFraction(Report.Private self, ToIntFunction<? super Product> func, IntFunction<String> valFormatter) {
	  int top = self.getTopN().stream().mapToInt(func).sum();
		int all = self.getAllProducts().total(func);
		double pct = (100.0*top)/all;
		return String.format("%s of %s (%.2f%%)", valFormatter.apply(top), valFormatter.apply(all), pct);
	}
	
	static void print(Report.Private self, PrintStream out) {
		out.format("--------------%n");
		out.format("%s%n", self.getName());
		out.format("--------------%n");
		out.format("Top by revenue:%n");
		self.getTopN().forEach((p) -> out.format("   %s: %s%n", p.getName(), Formatting.formatCurrency(p.getRevenue())));
		out.format("Revenue: %s%n", self.formatFraction(Product::getRevenue, Formatting::formatCurrency));
		out.format("  Value: %s%n", self.formatFraction(Product::getValue, Formatting::formatCurrency));
		out.println();
	}
	static void print(Report.Private self) {
		self.print(System.out);
	}
	
}
