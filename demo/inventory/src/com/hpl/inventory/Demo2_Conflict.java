/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.inventory;

import static com.hpl.mds.IsolationContext.isolated;

import com.hpl.mds.Options;
import com.hpl.mds.FailedTransactionException;

public class Demo2_Conflict extends DemoBase {
	
    public static void main(String[] args) {
        Inventory inventory = Inventory.create.record();
        Product p = Product.create.record("Widget", 100, 20_00);
        inventory.add(p);
        p.printAll();
        
        int nRetries = 3;

        Thread thread1 = new Thread(){
        	@Override
        	public void run() {
        		PubTrace trace = new PubTrace(1, "Buy 1 (with delay)", nRetries);
        		// ###########################
                try {
                  isolated(Options.reRunNTimes(nRetries)
                           .reportTo(trace),
                           () -> {
                             inventory.orderOut(1, p);
                             p.printAll();
                             block(2_000);
                           });
                } catch (FailedTransactionException e) {
                    // ignored
                }
        		// ###########################
        	}

        };
        
        Thread thread2 = new Thread(){
        	@Override
        	public void run() {
        		PubTrace trace = new PubTrace(2, "Buy 5 ", nRetries);
        		// ###########################
                try {
                  isolated(Options.reRunNTimes(nRetries)
                           .reportTo(trace),
                           () -> {
                             inventory.orderOut(5, p);
                             p.printAll();
                           });
                } catch (FailedTransactionException e) {
                    // ignored
                }
        		// ###########################
        	}
        };
        
        thread1.start();
		block(1_000);
        thread2.start();
        
    	try {
			thread1.join();
			thread2.join();
		} catch (InterruptedException e) {
			// ignore
		}

    	p.printAll();
    }

	private static void block(int delay) {
		try {
			Thread.sleep(delay);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


}  // end class Demo2_Conflict 
