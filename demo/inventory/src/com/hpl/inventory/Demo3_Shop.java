/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.inventory;

import static com.hpl.mds.IsolationContext.isolated;

import java.time.Duration;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.log4j.Logger;

import com.hpl.erk.config.ConfigParam;
import com.hpl.erk.config.RunConfig;
import com.hpl.erk.config.RunContext;
import com.hpl.erk.config.ex.ConfigErrorsSeen;
import com.hpl.mds.IsolationContext;
import com.hpl.mds.Options;
import com.hpl.mds.FailedTransactionException;
import com.plant42.log4j.appenders.RabbitMQAppender;
import com.plant42.log4j.layouts.PlainLayout;


public class Demo3_Shop extends Demo3Base {
	
	private static final Logger LOGGER = Logger.getLogger(Demo3_Shop.class);
	

	static final RunContext rc = demo3rc.subContext("shop").activate();
    
	static final ConfigParam<String> queueNameParam = rc.param(String.class, "queueName")
    		.help("The name of the queue for the Message Queue")
    		.defaultVal("");
    static final ConfigParam<Double> pHotParam = rc.param(double.class, "phot")
    		.help("Percentage of transactions that go to 'hot' products")
    		.defaultVal(0.1);
    static final ConfigParam<Integer> nHotParam = rc.param(int.class, "nhot")
    		.help("Products less than this number will be considered 'hot'")
    		.defaultVal(3);
    static final ConfigParam<String> shopNameParam = rc.param(String.class, "shop")
    		.help("The name of the shop")
    		.defaultVal("shop1");
    static final ConfigParam<Integer> nThreadsParam = rc.param(int.class, "nthreads")
    		.help("The number of parallel threads to launch")
    		.defaultVal(5);
    static final ConfigParam<Integer> minQParam = rc.param(int.class, "minq")
    		.help("The minimum quantity of an order")
    		.defaultVal(1);
    static final ConfigParam<Integer> maxQParam = rc.param(int.class, "maxq")
    		.help("The maximum quantity of an order")
    		.defaultVal(20);
    static final ConfigParam<Integer> restockAmtParam = rc.param(int.class, "restock")
    		.help("The quantity of a restock")
    		.defaultVal(100);
    static final ConfigParam<Double> pBlockParam = rc.param(double.class, "pblock")
    		.help("The probability of a block in a transaction")
    		.defaultVal(0.1);
    static final ConfigParam<Integer> blockMillisParam = rc.param(int.class, "blockms")
    		.help("The number of milliseconds to block")
    		.defaultVal(1_000);
    static final ConfigParam<Integer> meanDelayParam = rc.param(int.class, "mean_delay_ms")
    		.help("The mean delay (in ms) between transactions on a thread")
    		.defaultVal(100);
    static final ConfigParam<Integer> sdDelayParam = rc.param(int.class, "sd_delay_ms")
    		.help("The standard deviation of delay (in ms) between transactions on a thread")
    		.defaultVal(10);
    static final ConfigParam<Integer> maxRetriesParam = rc.param(int.class, "max_retries")
    		.help("The maximum number of retries of a transaction")
    		.defaultVal(3);
    static final ConfigParam<Integer> runLengthParam = rc.param(int.class, "stop_after")
    		.help("The maximum run length, in seconds")
    		.defaultVal(300);
    static final ConfigParam<Integer> maxTransactionsParam = rc.param(int.class, "max_transactions")
    		.help("The maximum number of transactions")
    		.defaultVal(100_000);
    

    public static void run() {
    	final AtomicInteger nextTxn = new AtomicInteger(0);
    	int maxTries = maxRetriesParam.v();
    	
    	Inventory inventory = Inventory.TYPE.lookupName(invNameParam.v());
    	int maxProduct = findMaxProduct(inventory);
    	int maxHot = nHotParam.v();
    	double pHot = pHotParam.v();
    	
    	Experiment experiment = new Experiment()
    	.addAction(1, () -> {
    		String productName = chooseProduct(maxProduct, pHot, maxHot);
    		int units = restockAmtParam.v();
    		String desc = String.format("IN:  %,4d of %s", units, productName);
    		//yw: PubTrace trace = new PubTrace(nextTxn.incrementAndGet(), desc, maxTries);
    		PubTrace trace = new PubTrace(nextTxn.incrementAndGet(), desc, maxTries, shopNameParam.getVal());
    		// ***************************
            try {
                isolated(Options.reRunNTimes(maxTries).reportTo(trace),
                         () -> {
                           inventory.stockIn(units, productName);
                         });
            } catch (FailedTransactionException e) {
                // ignored
            }
    		// ***************************
    	})
    	.addAction(10, () -> {
    		String productName = chooseProduct(maxProduct, pHot, maxHot);
    		int units = chooseQuantity();
    		String desc = String.format("OUT: %,4d of %s", units, productName);
        	//yw: PubTrace trace = new PubTrace(nextTxn.incrementAndGet(), desc, maxTries);
    		PubTrace trace = new PubTrace(nextTxn.incrementAndGet(), desc, maxTries, shopNameParam.getVal());
    		// ***************************
            try {
              isolated(Options.reRunNTimes(maxTries).reportTo(trace),
                       () -> {
                         inventory.orderOut(units, productName);
                         maybeBlock();
                       });
            } catch (FailedTransactionException e) {
                // ignored
            }
    		// ***************************
    	})
    	.setDelay(Duration.ofMillis(meanDelayParam.v()), Duration.ofMillis(sdDelayParam.v()))
    	.stopAfter(Duration.ofSeconds(runLengthParam.v()))
    	.stopAfterN(maxTransactionsParam.v());
    	experiment.start(nThreadsParam.v());
        PubTrace.reportFinalResult();
    }

	private static void maybeBlock() {
		boolean block = ThreadLocalRandom.current().nextDouble() < pBlockParam.v();
		if (block) {
			try {
				Thread.sleep(blockMillisParam.v());
			} catch (Exception e) {
				// ignore
			}
		}
	}
    
    private static int findMaxProduct(Inventory inventory) {
    	Product last = null;
    	for (Product p : inventory.getProducts().asList()) {
    		last = p;
    	}
    	String name = last.getName();
    	int asInt = Integer.parseInt(name.substring(1));
    	System.out.format("Max product: %s (%,d)%n", name, asInt);
		return asInt;
	}

	static String chooseProduct(int nProducts, double pHot, int nHot) {
    	ThreadLocalRandom r = ThreadLocalRandom.current();
    	int bound = r.nextDouble() < pHot ? nHot : nProducts;
    	int which = r.nextInt(bound)+1;
    	String name = String.format("P%06d", which);
    	return name;
    }

    static int chooseQuantity() {
    	return ThreadLocalRandom.current().nextInt(minQParam.v(), maxQParam.v()+1);
    }

    public static void main(String[] args) throws ConfigErrorsSeen {
    	args = RunConfig.process(Demo3_Shop.class, args);
    	
    	setupMQChannel();
	ShowMemStats.schedule(5_000);

        run();
    }

	private static void setupMQChannel() {
		String channelName = queueNameParam.v();
		if (!channelName.isEmpty()) {
			LOGGER.debug("using queue: " + channelName);
			RabbitMQAppender appender = new RabbitMQAppender();
			appender.setIdentifier("identifier");
			appender.setHost("localhost");
			appender.setPort(5672);
			appender.setUsername("guest");
			appender.setPassword("guest");
			appender.setVirtualHost("/");
			appender.setType("direct");
			appender.setDurable(true);
			appender.setExchange("amq.direct");
			appender.setQueue(channelName);
			appender.setRoutingKey(channelName);
			appender.setLayout(new PlainLayout());
			appender.activateOptions();
			Logger.getRootLogger().addAppender(appender);
		}
	}
} // end class Demo3_Shop


