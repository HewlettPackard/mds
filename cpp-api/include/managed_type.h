/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * managed_type.h
 *
 *  Created on: Mar 14, 2015
 *      Author: evank
 */

#ifndef MANAGED_TYPE_H_
#define MANAGED_TYPE_H_

#include "mds_common.h"

namespace mds {
  template <typename T, typename Enable = void> struct managed_type;

  template <api::kind K, typename MT = api::core_type<K>>
  struct managed_type_base__ {
    using handle_type = api::const_managed_type_handle<K>;
    using field_handle_type = api::const_record_field_handle<K>;
    using core_api_type = api::api_type<K>;
    using mds_type = MT;
    using const_mds_type = mds_type;
    static const api::kind kind = K;
  public:
    // subclasses are expected to define
    // handle_type handle() const
    static void ensure_complete() {
    }
  };

  template <api::kind K, api::const_managed_type_handle<K> APIFn()>
  struct managed_prim_type__ : managed_type_base__<K, api::core_type<K>> {
    using super = managed_type_base__<K,api::core_type<K>>;
    using typename super::handle_type;
    using typename super::core_api_type;
    using typename super::mds_type;
    static const handle_type &cached_handle() {
      static const handle_type h = APIFn();
      return h;
    }

    const handle_type &handle() const {
      return cached_handle();
    }

    mds_type from_core(const core_api_type &data) const {
      return data;
    }
    core_api_type to_core(const mds_type &data) const {
      return data;
    }


  };

#define _MP_TYPE(K,name) \
  template <> \
  struct managed_type<api::core_type<K>> : managed_prim_type__<K, api::managed_##name##_type_handle> {}; \
  using managed_##name##_type = managed_type<api::core_type<K>>;

//  template <>
//  struct managed_type<bool> : managed_prim_type__<api::kind::BOOL, api::managed_bool_type_handle> {};

  _MP_TYPE(api::kind::BOOL,bool)
  _MP_TYPE(api::kind::BYTE,byte)
  _MP_TYPE(api::kind::UBYTE,ubyte)
  _MP_TYPE(api::kind::SHORT,short)
  _MP_TYPE(api::kind::USHORT,ushort)
  _MP_TYPE(api::kind::INT,int)
  _MP_TYPE(api::kind::UINT,uint)
  _MP_TYPE(api::kind::LONG,long)
  _MP_TYPE(api::kind::ULONG,ulong)
  _MP_TYPE(api::kind::FLOAT,float)
  _MP_TYPE(api::kind::DOUBLE,double)
}



#endif /* MANAGED_TYPE_H_ */
