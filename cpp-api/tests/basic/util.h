/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include <condition_variable>
#include <memory>
#include <mutex>
#include <ostream>
#include <random>

using namespace std;
using namespace std::chrono;

inline
auto &tl_rand() {
  static thread_local mt19937 gen{random_device{}()};
  return gen;
}

struct pause {
  class button {
    condition_variable _cv;
    bool _pressed = false;
    mutex _mutex;
  public:
    void wait_for_press() {
      unique_lock<mutex> lock{_mutex};
      while (!_pressed) {
        _cv.wait(lock);
      }
    }

    void press() {
      lock_guard<mutex> lock{_mutex};
      _pressed = true;
      _cv.notify_all();
    }
        
  }; // button

  static void on(const shared_ptr<button> &b,
                 const string &prefix = "")
  {
    if (b != nullptr) {
      cout << prefix << "Pausing" << endl;
      b->wait_for_press();
      cout << prefix << "Back from pause" << endl;
    }
  }

  template <typename R, typename P>
  static void time(const duration<R,P> &d,
                   string prefix = "")
  {
    if (d.count() > 0) {
      bool announce_back = !prefix.empty();
      if (announce_back) {
        prefix = prefix + ": ";
      }
      duration<double> secs = d;
      cout << prefix << "Pausing for " << secs.count() << " seconds" << endl;
      this_thread::sleep_for(d);
      if (announce_back) {
        cout << prefix << "Back from " << secs.count() << " second pause" << endl;
      }
    }
  }
    
}; // pause
