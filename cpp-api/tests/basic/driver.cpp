/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include <getopt.h>
#include <unistd.h>
#include <string>
#include <signal.h>
#include <cstring>
#include <map>
#include <iostream>

#include "driver.h"

namespace {

  void hdl_segv(int sig, siginfo_t *siginfo, void *context) {
    kill(0, SIGSTOP);
  }


  void stop_on_seg_fault() {
    struct sigaction act;
    std::memset(&act, '\0', sizeof(act));
    act.sa_flags = SA_SIGINFO | SA_RESTART;
    act.sa_sigaction = &hdl_segv;
    if (sigaction(SIGSEGV, &act, NULL) < 0) {
      std::abort();
    }
  }

  string prog_name;

  map<string, test_fn_t> dispatch_map;

}

void register_test(const string &name, test_fn_t test) {
  if (dispatch_map.count(name) > 0) {
    cout << "WARNING: Test '" << name << "' already registered, replacing" << endl;
  } 
  dispatch_map[name] = test;
}

void show_usage() {
  cerr << "usage: " << prog_name << " [options] <test number> [args]" << endl
       << endl
       << "Options:" << endl
       << "-h, --help\t\t Display this message" << endl
       << "-p, --products <file=products.csv>\t\t The name of the products file" << endl;
}

void register_tests();

int main(int argc, char *argv[]) {
  stop_on_seg_fault();

  struct option long_options[] = {
    {"help",         no_argument,        0, 'h'},
    {"products",     required_argument,        0, 'p'},
    {0,              0,            0,  0 }
  };

  prog_name = argv[0];

  while (true) {
    int c = getopt_long(argc, argv, "+p:h", long_options, nullptr);
    if (c == -1) {
      break;
    }

    switch(c) {
    case 'h':
      show_usage();
      return 0;

    case 'p':
      prod_file = optarg;
      break;

    case '?':
      show_usage();
      return -1;
    }
  }

  if (optind >= argc) {
    cerr << "Test not specified" << endl << endl;
    show_usage();
    return -1;
  }


  string cmd = argv[optind];
  argc -= optind;
  argv += optind;

  register_tests();

  test_fn_t fn = dispatch_map[cmd];
  if (fn != nullptr) {
    return fn(argc, argv, cmd);
  }
  
  cerr << "Unknown test '" << cmd << "'" << endl << endl;
  show_usage();
  return -1;
  
}
